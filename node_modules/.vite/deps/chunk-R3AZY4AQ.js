import {
  Chi,
  HashMD,
  Maj
} from "./chunk-IR42BTEO.js";
import {
  BaseError,
  LruMap,
  checksumAddress,
  concat,
  defineFormatter,
  from,
  fromBoolean,
  fromBytes,
  fromNumber,
  fromString,
  fromString2,
  hexToBigInt,
  hexToNumber,
  isHex,
  keccak256,
  keccak_256,
  numberToHex,
  padLeft,
  padRight,
  size,
  size2,
  toHex
} from "./chunk-DNQROGB5.js";
import {
  clean,
  createHasher,
  rotl
} from "./chunk-4UVRAIAO.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS,
  __toESM
} from "./chunk-JE6AHIQZ.js";

// node_modules/.pnpm/tslib@1.14.1/node_modules/tslib/tslib.es6.js
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __read: () => __read,
  __rest: () => __rest,
  __spread: () => __spread,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values
});
function __extends(d, b) {
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __createBinding(o, m, k2, k22) {
  if (k22 === void 0)
    k22 = k2;
  o[k22] = m[k2];
}
function __exportStar(m, exports) {
  for (var p in m)
    if (p !== "default" && !exports.hasOwnProperty(p))
      exports[p] = m[p];
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar3 = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar3.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar3;
}
function __spread() {
  for (var ar3 = [], i = 0; i < arguments.length; i++)
    ar3 = ar3.concat(__read(arguments[i]));
  return ar3;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k2 = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j2 = 0, jl = a.length; j2 < jl; j2++, k2++)
      r[k2] = a[j2];
  return r;
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k2 in mod)
      if (Object.hasOwnProperty.call(mod, k2))
        result[k2] = mod[k2];
  }
  result.default = mod;
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }
  privateMap.set(receiver, value);
  return value;
}
var extendStatics, __assign;
var init_tslib_es6 = __esm({
  "node_modules/.pnpm/tslib@1.14.1/node_modules/tslib/tslib.es6.js"() {
    extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (b2.hasOwnProperty(p))
            d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    __assign = function() {
      __assign = Object.assign || function __assign2(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
  }
});

// node_modules/.pnpm/@walletconnect+time@1.0.2/node_modules/@walletconnect/time/dist/cjs/utils/delay.js
var require_delay = __commonJS({
  "node_modules/.pnpm/@walletconnect+time@1.0.2/node_modules/@walletconnect/time/dist/cjs/utils/delay.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.delay = void 0;
    function delay(timeout) {
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve(true);
        }, timeout);
      });
    }
    exports.delay = delay;
  }
});

// node_modules/.pnpm/@walletconnect+time@1.0.2/node_modules/@walletconnect/time/dist/cjs/constants/misc.js
var require_misc = __commonJS({
  "node_modules/.pnpm/@walletconnect+time@1.0.2/node_modules/@walletconnect/time/dist/cjs/constants/misc.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ONE_THOUSAND = exports.ONE_HUNDRED = void 0;
    exports.ONE_HUNDRED = 100;
    exports.ONE_THOUSAND = 1e3;
  }
});

// node_modules/.pnpm/@walletconnect+time@1.0.2/node_modules/@walletconnect/time/dist/cjs/constants/time.js
var require_time = __commonJS({
  "node_modules/.pnpm/@walletconnect+time@1.0.2/node_modules/@walletconnect/time/dist/cjs/constants/time.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ONE_YEAR = exports.FOUR_WEEKS = exports.THREE_WEEKS = exports.TWO_WEEKS = exports.ONE_WEEK = exports.THIRTY_DAYS = exports.SEVEN_DAYS = exports.FIVE_DAYS = exports.THREE_DAYS = exports.ONE_DAY = exports.TWENTY_FOUR_HOURS = exports.TWELVE_HOURS = exports.SIX_HOURS = exports.THREE_HOURS = exports.ONE_HOUR = exports.SIXTY_MINUTES = exports.THIRTY_MINUTES = exports.TEN_MINUTES = exports.FIVE_MINUTES = exports.ONE_MINUTE = exports.SIXTY_SECONDS = exports.THIRTY_SECONDS = exports.TEN_SECONDS = exports.FIVE_SECONDS = exports.ONE_SECOND = void 0;
    exports.ONE_SECOND = 1;
    exports.FIVE_SECONDS = 5;
    exports.TEN_SECONDS = 10;
    exports.THIRTY_SECONDS = 30;
    exports.SIXTY_SECONDS = 60;
    exports.ONE_MINUTE = exports.SIXTY_SECONDS;
    exports.FIVE_MINUTES = exports.ONE_MINUTE * 5;
    exports.TEN_MINUTES = exports.ONE_MINUTE * 10;
    exports.THIRTY_MINUTES = exports.ONE_MINUTE * 30;
    exports.SIXTY_MINUTES = exports.ONE_MINUTE * 60;
    exports.ONE_HOUR = exports.SIXTY_MINUTES;
    exports.THREE_HOURS = exports.ONE_HOUR * 3;
    exports.SIX_HOURS = exports.ONE_HOUR * 6;
    exports.TWELVE_HOURS = exports.ONE_HOUR * 12;
    exports.TWENTY_FOUR_HOURS = exports.ONE_HOUR * 24;
    exports.ONE_DAY = exports.TWENTY_FOUR_HOURS;
    exports.THREE_DAYS = exports.ONE_DAY * 3;
    exports.FIVE_DAYS = exports.ONE_DAY * 5;
    exports.SEVEN_DAYS = exports.ONE_DAY * 7;
    exports.THIRTY_DAYS = exports.ONE_DAY * 30;
    exports.ONE_WEEK = exports.SEVEN_DAYS;
    exports.TWO_WEEKS = exports.ONE_WEEK * 2;
    exports.THREE_WEEKS = exports.ONE_WEEK * 3;
    exports.FOUR_WEEKS = exports.ONE_WEEK * 4;
    exports.ONE_YEAR = exports.ONE_DAY * 365;
  }
});

// node_modules/.pnpm/@walletconnect+time@1.0.2/node_modules/@walletconnect/time/dist/cjs/constants/index.js
var require_constants = __commonJS({
  "node_modules/.pnpm/@walletconnect+time@1.0.2/node_modules/@walletconnect/time/dist/cjs/constants/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_misc(), exports);
    tslib_1.__exportStar(require_time(), exports);
  }
});

// node_modules/.pnpm/@walletconnect+time@1.0.2/node_modules/@walletconnect/time/dist/cjs/utils/convert.js
var require_convert = __commonJS({
  "node_modules/.pnpm/@walletconnect+time@1.0.2/node_modules/@walletconnect/time/dist/cjs/utils/convert.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromMiliseconds = exports.toMiliseconds = void 0;
    var constants_1 = require_constants();
    function toMiliseconds(seconds) {
      return seconds * constants_1.ONE_THOUSAND;
    }
    exports.toMiliseconds = toMiliseconds;
    function fromMiliseconds(miliseconds) {
      return Math.floor(miliseconds / constants_1.ONE_THOUSAND);
    }
    exports.fromMiliseconds = fromMiliseconds;
  }
});

// node_modules/.pnpm/@walletconnect+time@1.0.2/node_modules/@walletconnect/time/dist/cjs/utils/index.js
var require_utils = __commonJS({
  "node_modules/.pnpm/@walletconnect+time@1.0.2/node_modules/@walletconnect/time/dist/cjs/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_delay(), exports);
    tslib_1.__exportStar(require_convert(), exports);
  }
});

// node_modules/.pnpm/@walletconnect+time@1.0.2/node_modules/@walletconnect/time/dist/cjs/watch.js
var require_watch = __commonJS({
  "node_modules/.pnpm/@walletconnect+time@1.0.2/node_modules/@walletconnect/time/dist/cjs/watch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Watch = void 0;
    var Watch = class {
      constructor() {
        this.timestamps = /* @__PURE__ */ new Map();
      }
      start(label) {
        if (this.timestamps.has(label)) {
          throw new Error(`Watch already started for label: ${label}`);
        }
        this.timestamps.set(label, { started: Date.now() });
      }
      stop(label) {
        const timestamp = this.get(label);
        if (typeof timestamp.elapsed !== "undefined") {
          throw new Error(`Watch already stopped for label: ${label}`);
        }
        const elapsed = Date.now() - timestamp.started;
        this.timestamps.set(label, { started: timestamp.started, elapsed });
      }
      get(label) {
        const timestamp = this.timestamps.get(label);
        if (typeof timestamp === "undefined") {
          throw new Error(`No timestamp found for label: ${label}`);
        }
        return timestamp;
      }
      elapsed(label) {
        const timestamp = this.get(label);
        const elapsed = timestamp.elapsed || Date.now() - timestamp.started;
        return elapsed;
      }
    };
    exports.Watch = Watch;
    exports.default = Watch;
  }
});

// node_modules/.pnpm/@walletconnect+time@1.0.2/node_modules/@walletconnect/time/dist/cjs/types/watch.js
var require_watch2 = __commonJS({
  "node_modules/.pnpm/@walletconnect+time@1.0.2/node_modules/@walletconnect/time/dist/cjs/types/watch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IWatch = void 0;
    var IWatch = class {
    };
    exports.IWatch = IWatch;
  }
});

// node_modules/.pnpm/@walletconnect+time@1.0.2/node_modules/@walletconnect/time/dist/cjs/types/index.js
var require_types = __commonJS({
  "node_modules/.pnpm/@walletconnect+time@1.0.2/node_modules/@walletconnect/time/dist/cjs/types/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_watch2(), exports);
  }
});

// node_modules/.pnpm/@walletconnect+time@1.0.2/node_modules/@walletconnect/time/dist/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/.pnpm/@walletconnect+time@1.0.2/node_modules/@walletconnect/time/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_utils(), exports);
    tslib_1.__exportStar(require_watch(), exports);
    tslib_1.__exportStar(require_types(), exports);
    tslib_1.__exportStar(require_constants(), exports);
  }
});

// node_modules/.pnpm/@walletconnect+window-getters@1.0.1/node_modules/@walletconnect/window-getters/dist/cjs/index.js
var require_cjs2 = __commonJS({
  "node_modules/.pnpm/@walletconnect+window-getters@1.0.1/node_modules/@walletconnect/window-getters/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLocalStorage = exports.getLocalStorageOrThrow = exports.getCrypto = exports.getCryptoOrThrow = exports.getLocation = exports.getLocationOrThrow = exports.getNavigator = exports.getNavigatorOrThrow = exports.getDocument = exports.getDocumentOrThrow = exports.getFromWindowOrThrow = exports.getFromWindow = void 0;
    function getFromWindow(name2) {
      let res = void 0;
      if (typeof window !== "undefined" && typeof window[name2] !== "undefined") {
        res = window[name2];
      }
      return res;
    }
    exports.getFromWindow = getFromWindow;
    function getFromWindowOrThrow(name2) {
      const res = getFromWindow(name2);
      if (!res) {
        throw new Error(`${name2} is not defined in Window`);
      }
      return res;
    }
    exports.getFromWindowOrThrow = getFromWindowOrThrow;
    function getDocumentOrThrow() {
      return getFromWindowOrThrow("document");
    }
    exports.getDocumentOrThrow = getDocumentOrThrow;
    function getDocument() {
      return getFromWindow("document");
    }
    exports.getDocument = getDocument;
    function getNavigatorOrThrow() {
      return getFromWindowOrThrow("navigator");
    }
    exports.getNavigatorOrThrow = getNavigatorOrThrow;
    function getNavigator() {
      return getFromWindow("navigator");
    }
    exports.getNavigator = getNavigator;
    function getLocationOrThrow() {
      return getFromWindowOrThrow("location");
    }
    exports.getLocationOrThrow = getLocationOrThrow;
    function getLocation() {
      return getFromWindow("location");
    }
    exports.getLocation = getLocation;
    function getCryptoOrThrow() {
      return getFromWindowOrThrow("crypto");
    }
    exports.getCryptoOrThrow = getCryptoOrThrow;
    function getCrypto() {
      return getFromWindow("crypto");
    }
    exports.getCrypto = getCrypto;
    function getLocalStorageOrThrow() {
      return getFromWindowOrThrow("localStorage");
    }
    exports.getLocalStorageOrThrow = getLocalStorageOrThrow;
    function getLocalStorage() {
      return getFromWindow("localStorage");
    }
    exports.getLocalStorage = getLocalStorage;
  }
});

// node_modules/.pnpm/@walletconnect+window-metadata@1.0.1/node_modules/@walletconnect/window-metadata/dist/cjs/index.js
var require_cjs3 = __commonJS({
  "node_modules/.pnpm/@walletconnect+window-metadata@1.0.1/node_modules/@walletconnect/window-metadata/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getWindowMetadata = void 0;
    var window_getters_1 = require_cjs2();
    function getWindowMetadata() {
      let doc;
      let loc;
      try {
        doc = window_getters_1.getDocumentOrThrow();
        loc = window_getters_1.getLocationOrThrow();
      } catch (e) {
        return null;
      }
      function getIcons() {
        const links = doc.getElementsByTagName("link");
        const icons2 = [];
        for (let i = 0; i < links.length; i++) {
          const link = links[i];
          const rel = link.getAttribute("rel");
          if (rel) {
            if (rel.toLowerCase().indexOf("icon") > -1) {
              const href = link.getAttribute("href");
              if (href) {
                if (href.toLowerCase().indexOf("https:") === -1 && href.toLowerCase().indexOf("http:") === -1 && href.indexOf("//") !== 0) {
                  let absoluteHref = loc.protocol + "//" + loc.host;
                  if (href.indexOf("/") === 0) {
                    absoluteHref += href;
                  } else {
                    const path = loc.pathname.split("/");
                    path.pop();
                    const finalPath = path.join("/");
                    absoluteHref += finalPath + "/" + href;
                  }
                  icons2.push(absoluteHref);
                } else if (href.indexOf("//") === 0) {
                  const absoluteUrl = loc.protocol + href;
                  icons2.push(absoluteUrl);
                } else {
                  icons2.push(href);
                }
              }
            }
          }
        }
        return icons2;
      }
      function getWindowMetadataOfAny(...args) {
        const metaTags = doc.getElementsByTagName("meta");
        for (let i = 0; i < metaTags.length; i++) {
          const tag = metaTags[i];
          const attributes = ["itemprop", "property", "name"].map((target) => tag.getAttribute(target)).filter((attr) => {
            if (attr) {
              return args.includes(attr);
            }
            return false;
          });
          if (attributes.length && attributes) {
            const content = tag.getAttribute("content");
            if (content) {
              return content;
            }
          }
        }
        return "";
      }
      function getName() {
        let name3 = getWindowMetadataOfAny("name", "og:site_name", "og:title", "twitter:title");
        if (!name3) {
          name3 = doc.title;
        }
        return name3;
      }
      function getDescription() {
        const description2 = getWindowMetadataOfAny("description", "og:description", "twitter:description", "keywords");
        return description2;
      }
      const name2 = getName();
      const description = getDescription();
      const url = loc.origin;
      const icons = getIcons();
      const meta = {
        description,
        url,
        icons,
        name: name2
      };
      return meta;
    }
    exports.getWindowMetadata = getWindowMetadata;
  }
});

// node_modules/.pnpm/blakejs@1.2.1/node_modules/blakejs/util.js
var require_util = __commonJS({
  "node_modules/.pnpm/blakejs@1.2.1/node_modules/blakejs/util.js"(exports, module) {
    var ERROR_MSG_INPUT = "Input must be an string, Buffer or Uint8Array";
    function normalizeInput(input) {
      let ret;
      if (input instanceof Uint8Array) {
        ret = input;
      } else if (typeof input === "string") {
        const encoder = new TextEncoder();
        ret = encoder.encode(input);
      } else {
        throw new Error(ERROR_MSG_INPUT);
      }
      return ret;
    }
    function toHex3(bytes) {
      return Array.prototype.map.call(bytes, function(n) {
        return (n < 16 ? "0" : "") + n.toString(16);
      }).join("");
    }
    function uint32ToHex(val) {
      return (4294967296 + val).toString(16).substring(1);
    }
    function debugPrint(label, arr, size4) {
      let msg = "\n" + label + " = ";
      for (let i = 0; i < arr.length; i += 2) {
        if (size4 === 32) {
          msg += uint32ToHex(arr[i]).toUpperCase();
          msg += " ";
          msg += uint32ToHex(arr[i + 1]).toUpperCase();
        } else if (size4 === 64) {
          msg += uint32ToHex(arr[i + 1]).toUpperCase();
          msg += uint32ToHex(arr[i]).toUpperCase();
        } else
          throw new Error("Invalid size " + size4);
        if (i % 6 === 4) {
          msg += "\n" + new Array(label.length + 4).join(" ");
        } else if (i < arr.length - 2) {
          msg += " ";
        }
      }
      console.log(msg);
    }
    function testSpeed(hashFn, N11, M2) {
      let startMs = (/* @__PURE__ */ new Date()).getTime();
      const input = new Uint8Array(N11);
      for (let i = 0; i < N11; i++) {
        input[i] = i % 256;
      }
      const genMs = (/* @__PURE__ */ new Date()).getTime();
      console.log("Generated random input in " + (genMs - startMs) + "ms");
      startMs = genMs;
      for (let i = 0; i < M2; i++) {
        const hashHex = hashFn(input);
        const hashMs = (/* @__PURE__ */ new Date()).getTime();
        const ms = hashMs - startMs;
        startMs = hashMs;
        console.log("Hashed in " + ms + "ms: " + hashHex.substring(0, 20) + "...");
        console.log(
          Math.round(N11 / (1 << 20) / (ms / 1e3) * 100) / 100 + " MB PER SECOND"
        );
      }
    }
    module.exports = {
      normalizeInput,
      toHex: toHex3,
      debugPrint,
      testSpeed
    };
  }
});

// node_modules/.pnpm/blakejs@1.2.1/node_modules/blakejs/blake2b.js
var require_blake2b = __commonJS({
  "node_modules/.pnpm/blakejs@1.2.1/node_modules/blakejs/blake2b.js"(exports, module) {
    var util = require_util();
    function ADD64AA(v2, a, b) {
      const o0 = v2[a] + v2[b];
      let o1 = v2[a + 1] + v2[b + 1];
      if (o0 >= 4294967296) {
        o1++;
      }
      v2[a] = o0;
      v2[a + 1] = o1;
    }
    function ADD64AC(v2, a, b0, b1) {
      let o0 = v2[a] + b0;
      if (b0 < 0) {
        o0 += 4294967296;
      }
      let o1 = v2[a + 1] + b1;
      if (o0 >= 4294967296) {
        o1++;
      }
      v2[a] = o0;
      v2[a + 1] = o1;
    }
    function B2B_GET32(arr, i) {
      return arr[i] ^ arr[i + 1] << 8 ^ arr[i + 2] << 16 ^ arr[i + 3] << 24;
    }
    function B2B_G(a, b, c, d, ix, iy) {
      const x0 = m[ix];
      const x1 = m[ix + 1];
      const y0 = m[iy];
      const y1 = m[iy + 1];
      ADD64AA(v, a, b);
      ADD64AC(v, a, x0, x1);
      let xor0 = v[d] ^ v[a];
      let xor1 = v[d + 1] ^ v[a + 1];
      v[d] = xor1;
      v[d + 1] = xor0;
      ADD64AA(v, c, d);
      xor0 = v[b] ^ v[c];
      xor1 = v[b + 1] ^ v[c + 1];
      v[b] = xor0 >>> 24 ^ xor1 << 8;
      v[b + 1] = xor1 >>> 24 ^ xor0 << 8;
      ADD64AA(v, a, b);
      ADD64AC(v, a, y0, y1);
      xor0 = v[d] ^ v[a];
      xor1 = v[d + 1] ^ v[a + 1];
      v[d] = xor0 >>> 16 ^ xor1 << 16;
      v[d + 1] = xor1 >>> 16 ^ xor0 << 16;
      ADD64AA(v, c, d);
      xor0 = v[b] ^ v[c];
      xor1 = v[b + 1] ^ v[c + 1];
      v[b] = xor1 >>> 31 ^ xor0 << 1;
      v[b + 1] = xor0 >>> 31 ^ xor1 << 1;
    }
    var BLAKE2B_IV32 = new Uint32Array([
      4089235720,
      1779033703,
      2227873595,
      3144134277,
      4271175723,
      1013904242,
      1595750129,
      2773480762,
      2917565137,
      1359893119,
      725511199,
      2600822924,
      4215389547,
      528734635,
      327033209,
      1541459225
    ]);
    var SIGMA8 = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3,
      11,
      8,
      12,
      0,
      5,
      2,
      15,
      13,
      10,
      14,
      3,
      6,
      7,
      1,
      9,
      4,
      7,
      9,
      3,
      1,
      13,
      12,
      11,
      14,
      2,
      6,
      5,
      10,
      4,
      0,
      15,
      8,
      9,
      0,
      5,
      7,
      2,
      4,
      10,
      15,
      14,
      1,
      11,
      12,
      6,
      8,
      3,
      13,
      2,
      12,
      6,
      10,
      0,
      11,
      8,
      3,
      4,
      13,
      7,
      5,
      15,
      14,
      1,
      9,
      12,
      5,
      1,
      15,
      14,
      13,
      4,
      10,
      0,
      7,
      6,
      3,
      9,
      2,
      8,
      11,
      13,
      11,
      7,
      14,
      12,
      1,
      3,
      9,
      5,
      0,
      15,
      4,
      8,
      6,
      2,
      10,
      6,
      15,
      14,
      9,
      11,
      3,
      0,
      8,
      12,
      2,
      13,
      7,
      1,
      4,
      10,
      5,
      10,
      2,
      8,
      4,
      7,
      6,
      1,
      5,
      15,
      11,
      9,
      14,
      3,
      12,
      13,
      0,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3
    ];
    var SIGMA82 = new Uint8Array(
      SIGMA8.map(function(x2) {
        return x2 * 2;
      })
    );
    var v = new Uint32Array(32);
    var m = new Uint32Array(32);
    function blake2bCompress(ctx, last) {
      let i = 0;
      for (i = 0; i < 16; i++) {
        v[i] = ctx.h[i];
        v[i + 16] = BLAKE2B_IV32[i];
      }
      v[24] = v[24] ^ ctx.t;
      v[25] = v[25] ^ ctx.t / 4294967296;
      if (last) {
        v[28] = ~v[28];
        v[29] = ~v[29];
      }
      for (i = 0; i < 32; i++) {
        m[i] = B2B_GET32(ctx.b, 4 * i);
      }
      for (i = 0; i < 12; i++) {
        B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1]);
        B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3]);
        B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5]);
        B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7]);
        B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9]);
        B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11]);
        B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13]);
        B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15]);
      }
      for (i = 0; i < 16; i++) {
        ctx.h[i] = ctx.h[i] ^ v[i] ^ v[i + 16];
      }
    }
    var parameterBlock = new Uint8Array([
      0,
      0,
      0,
      0,
      //  0: outlen, keylen, fanout, depth
      0,
      0,
      0,
      0,
      //  4: leaf length, sequential mode
      0,
      0,
      0,
      0,
      //  8: node offset
      0,
      0,
      0,
      0,
      // 12: node offset
      0,
      0,
      0,
      0,
      // 16: node depth, inner length, rfu
      0,
      0,
      0,
      0,
      // 20: rfu
      0,
      0,
      0,
      0,
      // 24: rfu
      0,
      0,
      0,
      0,
      // 28: rfu
      0,
      0,
      0,
      0,
      // 32: salt
      0,
      0,
      0,
      0,
      // 36: salt
      0,
      0,
      0,
      0,
      // 40: salt
      0,
      0,
      0,
      0,
      // 44: salt
      0,
      0,
      0,
      0,
      // 48: personal
      0,
      0,
      0,
      0,
      // 52: personal
      0,
      0,
      0,
      0,
      // 56: personal
      0,
      0,
      0,
      0
      // 60: personal
    ]);
    function blake2bInit(outlen, key, salt, personal) {
      if (outlen === 0 || outlen > 64) {
        throw new Error("Illegal output length, expected 0 < length <= 64");
      }
      if (key && key.length > 64) {
        throw new Error("Illegal key, expected Uint8Array with 0 < length <= 64");
      }
      if (salt && salt.length !== 16) {
        throw new Error("Illegal salt, expected Uint8Array with length is 16");
      }
      if (personal && personal.length !== 16) {
        throw new Error("Illegal personal, expected Uint8Array with length is 16");
      }
      const ctx = {
        b: new Uint8Array(128),
        h: new Uint32Array(16),
        t: 0,
        // input count
        c: 0,
        // pointer within buffer
        outlen
        // output length in bytes
      };
      parameterBlock.fill(0);
      parameterBlock[0] = outlen;
      if (key)
        parameterBlock[1] = key.length;
      parameterBlock[2] = 1;
      parameterBlock[3] = 1;
      if (salt)
        parameterBlock.set(salt, 32);
      if (personal)
        parameterBlock.set(personal, 48);
      for (let i = 0; i < 16; i++) {
        ctx.h[i] = BLAKE2B_IV32[i] ^ B2B_GET32(parameterBlock, i * 4);
      }
      if (key) {
        blake2bUpdate(ctx, key);
        ctx.c = 128;
      }
      return ctx;
    }
    function blake2bUpdate(ctx, input) {
      for (let i = 0; i < input.length; i++) {
        if (ctx.c === 128) {
          ctx.t += ctx.c;
          blake2bCompress(ctx, false);
          ctx.c = 0;
        }
        ctx.b[ctx.c++] = input[i];
      }
    }
    function blake2bFinal(ctx) {
      ctx.t += ctx.c;
      while (ctx.c < 128) {
        ctx.b[ctx.c++] = 0;
      }
      blake2bCompress(ctx, true);
      const out = new Uint8Array(ctx.outlen);
      for (let i = 0; i < ctx.outlen; i++) {
        out[i] = ctx.h[i >> 2] >> 8 * (i & 3);
      }
      return out;
    }
    function blake2b(input, key, outlen, salt, personal) {
      outlen = outlen || 64;
      input = util.normalizeInput(input);
      if (salt) {
        salt = util.normalizeInput(salt);
      }
      if (personal) {
        personal = util.normalizeInput(personal);
      }
      const ctx = blake2bInit(outlen, key, salt, personal);
      blake2bUpdate(ctx, input);
      return blake2bFinal(ctx);
    }
    function blake2bHex(input, key, outlen, salt, personal) {
      const output = blake2b(input, key, outlen, salt, personal);
      return util.toHex(output);
    }
    module.exports = {
      blake2b,
      blake2bHex,
      blake2bInit,
      blake2bUpdate,
      blake2bFinal
    };
  }
});

// node_modules/.pnpm/blakejs@1.2.1/node_modules/blakejs/blake2s.js
var require_blake2s = __commonJS({
  "node_modules/.pnpm/blakejs@1.2.1/node_modules/blakejs/blake2s.js"(exports, module) {
    var util = require_util();
    function B2S_GET32(v2, i) {
      return v2[i] ^ v2[i + 1] << 8 ^ v2[i + 2] << 16 ^ v2[i + 3] << 24;
    }
    function B2S_G(a, b, c, d, x2, y) {
      v[a] = v[a] + v[b] + x2;
      v[d] = ROTR32(v[d] ^ v[a], 16);
      v[c] = v[c] + v[d];
      v[b] = ROTR32(v[b] ^ v[c], 12);
      v[a] = v[a] + v[b] + y;
      v[d] = ROTR32(v[d] ^ v[a], 8);
      v[c] = v[c] + v[d];
      v[b] = ROTR32(v[b] ^ v[c], 7);
    }
    function ROTR32(x2, y) {
      return x2 >>> y ^ x2 << 32 - y;
    }
    var BLAKE2S_IV = new Uint32Array([
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ]);
    var SIGMA = new Uint8Array([
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3,
      11,
      8,
      12,
      0,
      5,
      2,
      15,
      13,
      10,
      14,
      3,
      6,
      7,
      1,
      9,
      4,
      7,
      9,
      3,
      1,
      13,
      12,
      11,
      14,
      2,
      6,
      5,
      10,
      4,
      0,
      15,
      8,
      9,
      0,
      5,
      7,
      2,
      4,
      10,
      15,
      14,
      1,
      11,
      12,
      6,
      8,
      3,
      13,
      2,
      12,
      6,
      10,
      0,
      11,
      8,
      3,
      4,
      13,
      7,
      5,
      15,
      14,
      1,
      9,
      12,
      5,
      1,
      15,
      14,
      13,
      4,
      10,
      0,
      7,
      6,
      3,
      9,
      2,
      8,
      11,
      13,
      11,
      7,
      14,
      12,
      1,
      3,
      9,
      5,
      0,
      15,
      4,
      8,
      6,
      2,
      10,
      6,
      15,
      14,
      9,
      11,
      3,
      0,
      8,
      12,
      2,
      13,
      7,
      1,
      4,
      10,
      5,
      10,
      2,
      8,
      4,
      7,
      6,
      1,
      5,
      15,
      11,
      9,
      14,
      3,
      12,
      13,
      0
    ]);
    var v = new Uint32Array(16);
    var m = new Uint32Array(16);
    function blake2sCompress(ctx, last) {
      let i = 0;
      for (i = 0; i < 8; i++) {
        v[i] = ctx.h[i];
        v[i + 8] = BLAKE2S_IV[i];
      }
      v[12] ^= ctx.t;
      v[13] ^= ctx.t / 4294967296;
      if (last) {
        v[14] = ~v[14];
      }
      for (i = 0; i < 16; i++) {
        m[i] = B2S_GET32(ctx.b, 4 * i);
      }
      for (i = 0; i < 10; i++) {
        B2S_G(0, 4, 8, 12, m[SIGMA[i * 16 + 0]], m[SIGMA[i * 16 + 1]]);
        B2S_G(1, 5, 9, 13, m[SIGMA[i * 16 + 2]], m[SIGMA[i * 16 + 3]]);
        B2S_G(2, 6, 10, 14, m[SIGMA[i * 16 + 4]], m[SIGMA[i * 16 + 5]]);
        B2S_G(3, 7, 11, 15, m[SIGMA[i * 16 + 6]], m[SIGMA[i * 16 + 7]]);
        B2S_G(0, 5, 10, 15, m[SIGMA[i * 16 + 8]], m[SIGMA[i * 16 + 9]]);
        B2S_G(1, 6, 11, 12, m[SIGMA[i * 16 + 10]], m[SIGMA[i * 16 + 11]]);
        B2S_G(2, 7, 8, 13, m[SIGMA[i * 16 + 12]], m[SIGMA[i * 16 + 13]]);
        B2S_G(3, 4, 9, 14, m[SIGMA[i * 16 + 14]], m[SIGMA[i * 16 + 15]]);
      }
      for (i = 0; i < 8; i++) {
        ctx.h[i] ^= v[i] ^ v[i + 8];
      }
    }
    function blake2sInit(outlen, key) {
      if (!(outlen > 0 && outlen <= 32)) {
        throw new Error("Incorrect output length, should be in [1, 32]");
      }
      const keylen = key ? key.length : 0;
      if (key && !(keylen > 0 && keylen <= 32)) {
        throw new Error("Incorrect key length, should be in [1, 32]");
      }
      const ctx = {
        h: new Uint32Array(BLAKE2S_IV),
        // hash state
        b: new Uint8Array(64),
        // input block
        c: 0,
        // pointer within block
        t: 0,
        // input count
        outlen
        // output length in bytes
      };
      ctx.h[0] ^= 16842752 ^ keylen << 8 ^ outlen;
      if (keylen > 0) {
        blake2sUpdate(ctx, key);
        ctx.c = 64;
      }
      return ctx;
    }
    function blake2sUpdate(ctx, input) {
      for (let i = 0; i < input.length; i++) {
        if (ctx.c === 64) {
          ctx.t += ctx.c;
          blake2sCompress(ctx, false);
          ctx.c = 0;
        }
        ctx.b[ctx.c++] = input[i];
      }
    }
    function blake2sFinal(ctx) {
      ctx.t += ctx.c;
      while (ctx.c < 64) {
        ctx.b[ctx.c++] = 0;
      }
      blake2sCompress(ctx, true);
      const out = new Uint8Array(ctx.outlen);
      for (let i = 0; i < ctx.outlen; i++) {
        out[i] = ctx.h[i >> 2] >> 8 * (i & 3) & 255;
      }
      return out;
    }
    function blake2s(input, key, outlen) {
      outlen = outlen || 32;
      input = util.normalizeInput(input);
      const ctx = blake2sInit(outlen, key);
      blake2sUpdate(ctx, input);
      return blake2sFinal(ctx);
    }
    function blake2sHex(input, key, outlen) {
      const output = blake2s(input, key, outlen);
      return util.toHex(output);
    }
    module.exports = {
      blake2s,
      blake2sHex,
      blake2sInit,
      blake2sUpdate,
      blake2sFinal
    };
  }
});

// node_modules/.pnpm/blakejs@1.2.1/node_modules/blakejs/index.js
var require_blakejs = __commonJS({
  "node_modules/.pnpm/blakejs@1.2.1/node_modules/blakejs/index.js"(exports, module) {
    var b2b = require_blake2b();
    var b2s = require_blake2s();
    module.exports = {
      blake2b: b2b.blake2b,
      blake2bHex: b2b.blake2bHex,
      blake2bInit: b2b.blake2bInit,
      blake2bUpdate: b2b.blake2bUpdate,
      blake2bFinal: b2b.blake2bFinal,
      blake2s: b2s.blake2s,
      blake2sHex: b2s.blake2sHex,
      blake2sInit: b2s.blake2sInit,
      blake2sUpdate: b2s.blake2sUpdate,
      blake2sFinal: b2s.blake2sFinal
    };
  }
});

// node_modules/.pnpm/detect-browser@5.3.0/node_modules/detect-browser/es/index.js
var __spreadArray = function(to3, from8, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from8.length, ar3; i < l; i++) {
      if (ar3 || !(i in from8)) {
        if (!ar3)
          ar3 = Array.prototype.slice.call(from8, 0, i);
        ar3[i] = from8[i];
      }
    }
  return to3.concat(ar3 || Array.prototype.slice.call(from8));
};
var BrowserInfo = (
  /** @class */
  function() {
    function BrowserInfo2(name2, version2, os2) {
      this.name = name2;
      this.version = version2;
      this.os = os2;
      this.type = "browser";
    }
    return BrowserInfo2;
  }()
);
var NodeInfo = (
  /** @class */
  function() {
    function NodeInfo2(version2) {
      this.version = version2;
      this.type = "node";
      this.name = "node";
      this.os = process.platform;
    }
    return NodeInfo2;
  }()
);
var SearchBotDeviceInfo = (
  /** @class */
  function() {
    function SearchBotDeviceInfo2(name2, version2, os2, bot) {
      this.name = name2;
      this.version = version2;
      this.os = os2;
      this.bot = bot;
      this.type = "bot-device";
    }
    return SearchBotDeviceInfo2;
  }()
);
var BotInfo = (
  /** @class */
  function() {
    function BotInfo2() {
      this.type = "bot";
      this.bot = true;
      this.name = "bot";
      this.version = null;
      this.os = null;
    }
    return BotInfo2;
  }()
);
var ReactNativeInfo = (
  /** @class */
  function() {
    function ReactNativeInfo2() {
      this.type = "react-native";
      this.name = "react-native";
      this.version = null;
      this.os = null;
    }
    return ReactNativeInfo2;
  }()
);
var SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;
var SEARCHBOT_OS_REGEX = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/;
var REQUIRED_VERSION_PARTS = 3;
var userAgentRules = [
  ["aol", /AOLShield\/([0-9\._]+)/],
  ["edge", /Edge\/([0-9\._]+)/],
  ["edge-ios", /EdgiOS\/([0-9\._]+)/],
  ["yandexbrowser", /YaBrowser\/([0-9\._]+)/],
  ["kakaotalk", /KAKAOTALK\s([0-9\.]+)/],
  ["samsung", /SamsungBrowser\/([0-9\.]+)/],
  ["silk", /\bSilk\/([0-9._-]+)\b/],
  ["miui", /MiuiBrowser\/([0-9\.]+)$/],
  ["beaker", /BeakerBrowser\/([0-9\.]+)/],
  ["edge-chromium", /EdgA?\/([0-9\.]+)/],
  [
    "chromium-webview",
    /(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/
  ],
  ["chrome", /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],
  ["phantomjs", /PhantomJS\/([0-9\.]+)(:?\s|$)/],
  ["crios", /CriOS\/([0-9\.]+)(:?\s|$)/],
  ["firefox", /Firefox\/([0-9\.]+)(?:\s|$)/],
  ["fxios", /FxiOS\/([0-9\.]+)/],
  ["opera-mini", /Opera Mini.*Version\/([0-9\.]+)/],
  ["opera", /Opera\/([0-9\.]+)(?:\s|$)/],
  ["opera", /OPR\/([0-9\.]+)(:?\s|$)/],
  ["pie", /^Microsoft Pocket Internet Explorer\/(\d+\.\d+)$/],
  ["pie", /^Mozilla\/\d\.\d+\s\(compatible;\s(?:MSP?IE|MSInternet Explorer) (\d+\.\d+);.*Windows CE.*\)$/],
  ["netfront", /^Mozilla\/\d\.\d+.*NetFront\/(\d.\d)/],
  ["ie", /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],
  ["ie", /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],
  ["ie", /MSIE\s(7\.0)/],
  ["bb10", /BB10;\sTouch.*Version\/([0-9\.]+)/],
  ["android", /Android\s([0-9\.]+)/],
  ["ios", /Version\/([0-9\._]+).*Mobile.*Safari.*/],
  ["safari", /Version\/([0-9\._]+).*Safari/],
  ["facebook", /FB[AS]V\/([0-9\.]+)/],
  ["instagram", /Instagram\s([0-9\.]+)/],
  ["ios-webview", /AppleWebKit\/([0-9\.]+).*Mobile/],
  ["ios-webview", /AppleWebKit\/([0-9\.]+).*Gecko\)$/],
  ["curl", /^curl\/([0-9\.]+)$/],
  ["searchbot", SEARCHBOX_UA_REGEX]
];
var operatingSystemRules = [
  ["iOS", /iP(hone|od|ad)/],
  ["Android OS", /Android/],
  ["BlackBerry OS", /BlackBerry|BB10/],
  ["Windows Mobile", /IEMobile/],
  ["Amazon OS", /Kindle/],
  ["Windows 3.11", /Win16/],
  ["Windows 95", /(Windows 95)|(Win95)|(Windows_95)/],
  ["Windows 98", /(Windows 98)|(Win98)/],
  ["Windows 2000", /(Windows NT 5.0)|(Windows 2000)/],
  ["Windows XP", /(Windows NT 5.1)|(Windows XP)/],
  ["Windows Server 2003", /(Windows NT 5.2)/],
  ["Windows Vista", /(Windows NT 6.0)/],
  ["Windows 7", /(Windows NT 6.1)/],
  ["Windows 8", /(Windows NT 6.2)/],
  ["Windows 8.1", /(Windows NT 6.3)/],
  ["Windows 10", /(Windows NT 10.0)/],
  ["Windows ME", /Windows ME/],
  ["Windows CE", /Windows CE|WinCE|Microsoft Pocket Internet Explorer/],
  ["Open BSD", /OpenBSD/],
  ["Sun OS", /SunOS/],
  ["Chrome OS", /CrOS/],
  ["Linux", /(Linux)|(X11)/],
  ["Mac OS", /(Mac_PowerPC)|(Macintosh)/],
  ["QNX", /QNX/],
  ["BeOS", /BeOS/],
  ["OS/2", /OS\/2/]
];
function detect(userAgent) {
  if (!!userAgent) {
    return parseUserAgent(userAgent);
  }
  if (typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative") {
    return new ReactNativeInfo();
  }
  if (typeof navigator !== "undefined") {
    return parseUserAgent(navigator.userAgent);
  }
  return getNodeVersion();
}
function matchUserAgent(ua2) {
  return ua2 !== "" && userAgentRules.reduce(function(matched, _a2) {
    var browser = _a2[0], regex = _a2[1];
    if (matched) {
      return matched;
    }
    var uaMatch = regex.exec(ua2);
    return !!uaMatch && [browser, uaMatch];
  }, false);
}
function parseUserAgent(ua2) {
  var matchedRule = matchUserAgent(ua2);
  if (!matchedRule) {
    return null;
  }
  var name2 = matchedRule[0], match = matchedRule[1];
  if (name2 === "searchbot") {
    return new BotInfo();
  }
  var versionParts = match[1] && match[1].split(".").join("_").split("_").slice(0, 3);
  if (versionParts) {
    if (versionParts.length < REQUIRED_VERSION_PARTS) {
      versionParts = __spreadArray(__spreadArray([], versionParts, true), createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length), true);
    }
  } else {
    versionParts = [];
  }
  var version2 = versionParts.join(".");
  var os2 = detectOS(ua2);
  var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua2);
  if (searchBotMatch && searchBotMatch[1]) {
    return new SearchBotDeviceInfo(name2, version2, os2, searchBotMatch[1]);
  }
  return new BrowserInfo(name2, version2, os2);
}
function detectOS(ua2) {
  for (var ii2 = 0, count = operatingSystemRules.length; ii2 < count; ii2++) {
    var _a2 = operatingSystemRules[ii2], os2 = _a2[0], regex = _a2[1];
    var match = regex.exec(ua2);
    if (match) {
      return os2;
    }
  }
  return null;
}
function getNodeVersion() {
  var isNode = typeof process !== "undefined" && process.version;
  return isNode ? new NodeInfo(process.version.slice(1)) : null;
}
function createVersionParts(count) {
  var output = [];
  for (var ii2 = 0; ii2 < count; ii2++) {
    output.push("0");
  }
  return output;
}

// node_modules/.pnpm/@walletconnect+utils@2.21.5/node_modules/@walletconnect/utils/dist/index.es.js
var import_time2 = __toESM(require_cjs());
var import_window_getters = __toESM(require_cjs2());
var import_window_metadata = __toESM(require_cjs3());

// node_modules/.pnpm/viem@2.31.0/node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js
function publicKeyToAddress(publicKey) {
  const address = keccak256(`0x${publicKey.substring(4)}`).substring(26);
  return checksumAddress(`0x${address}`);
}

// node_modules/.pnpm/viem@2.31.0/node_modules/viem/_esm/utils/signature/recoverPublicKey.js
async function recoverPublicKey({ hash, signature }) {
  const hashHex = isHex(hash) ? hash : toHex(hash);
  const { secp256k1: secp256k12 } = await import("./secp256k1-2JOFXNNL.js");
  const signature_ = (() => {
    if (typeof signature === "object" && "r" in signature && "s" in signature) {
      const { r, s, v, yParity } = signature;
      const yParityOrV2 = Number(yParity ?? v);
      const recoveryBit2 = toRecoveryBit(yParityOrV2);
      return new secp256k12.Signature(hexToBigInt(r), hexToBigInt(s)).addRecoveryBit(recoveryBit2);
    }
    const signatureHex = isHex(signature) ? signature : toHex(signature);
    if (size(signatureHex) !== 65)
      throw new Error("invalid signature length");
    const yParityOrV = hexToNumber(`0x${signatureHex.slice(130)}`);
    const recoveryBit = toRecoveryBit(yParityOrV);
    return secp256k12.Signature.fromCompact(signatureHex.substring(2, 130)).addRecoveryBit(recoveryBit);
  })();
  const publicKey = signature_.recoverPublicKey(hashHex.substring(2)).toHex(false);
  return `0x${publicKey}`;
}
function toRecoveryBit(yParityOrV) {
  if (yParityOrV === 0 || yParityOrV === 1)
    return yParityOrV;
  if (yParityOrV === 27)
    return 0;
  if (yParityOrV === 28)
    return 1;
  throw new Error("Invalid yParityOrV value");
}

// node_modules/.pnpm/viem@2.31.0/node_modules/viem/_esm/utils/signature/recoverAddress.js
async function recoverAddress({ hash, signature }) {
  return publicKeyToAddress(await recoverPublicKey({ hash, signature }));
}

// node_modules/.pnpm/viem@2.31.0/node_modules/viem/_esm/utils/formatters/transaction.js
var transactionType = {
  "0x0": "legacy",
  "0x1": "eip2930",
  "0x2": "eip1559",
  "0x3": "eip4844",
  "0x4": "eip7702"
};
function formatTransaction(transaction) {
  const transaction_ = {
    ...transaction,
    blockHash: transaction.blockHash ? transaction.blockHash : null,
    blockNumber: transaction.blockNumber ? BigInt(transaction.blockNumber) : null,
    chainId: transaction.chainId ? hexToNumber(transaction.chainId) : void 0,
    gas: transaction.gas ? BigInt(transaction.gas) : void 0,
    gasPrice: transaction.gasPrice ? BigInt(transaction.gasPrice) : void 0,
    maxFeePerBlobGas: transaction.maxFeePerBlobGas ? BigInt(transaction.maxFeePerBlobGas) : void 0,
    maxFeePerGas: transaction.maxFeePerGas ? BigInt(transaction.maxFeePerGas) : void 0,
    maxPriorityFeePerGas: transaction.maxPriorityFeePerGas ? BigInt(transaction.maxPriorityFeePerGas) : void 0,
    nonce: transaction.nonce ? hexToNumber(transaction.nonce) : void 0,
    to: transaction.to ? transaction.to : null,
    transactionIndex: transaction.transactionIndex ? Number(transaction.transactionIndex) : null,
    type: transaction.type ? transactionType[transaction.type] : void 0,
    typeHex: transaction.type ? transaction.type : void 0,
    value: transaction.value ? BigInt(transaction.value) : void 0,
    v: transaction.v ? BigInt(transaction.v) : void 0
  };
  if (transaction.authorizationList)
    transaction_.authorizationList = formatAuthorizationList(transaction.authorizationList);
  transaction_.yParity = (() => {
    if (transaction.yParity)
      return Number(transaction.yParity);
    if (typeof transaction_.v === "bigint") {
      if (transaction_.v === 0n || transaction_.v === 27n)
        return 0;
      if (transaction_.v === 1n || transaction_.v === 28n)
        return 1;
      if (transaction_.v >= 35n)
        return transaction_.v % 2n === 0n ? 1 : 0;
    }
    return void 0;
  })();
  if (transaction_.type === "legacy") {
    delete transaction_.accessList;
    delete transaction_.maxFeePerBlobGas;
    delete transaction_.maxFeePerGas;
    delete transaction_.maxPriorityFeePerGas;
    delete transaction_.yParity;
  }
  if (transaction_.type === "eip2930") {
    delete transaction_.maxFeePerBlobGas;
    delete transaction_.maxFeePerGas;
    delete transaction_.maxPriorityFeePerGas;
  }
  if (transaction_.type === "eip1559") {
    delete transaction_.maxFeePerBlobGas;
  }
  return transaction_;
}
var defineTransaction = defineFormatter("transaction", formatTransaction);
function formatAuthorizationList(authorizationList) {
  return authorizationList.map((authorization) => ({
    address: authorization.address,
    chainId: Number(authorization.chainId),
    nonce: Number(authorization.nonce),
    r: authorization.r,
    s: authorization.s,
    yParity: Number(authorization.yParity)
  }));
}

// node_modules/.pnpm/viem@2.31.0/node_modules/viem/_esm/utils/formatters/block.js
function formatBlock(block) {
  const transactions = (block.transactions ?? []).map((transaction) => {
    if (typeof transaction === "string")
      return transaction;
    return formatTransaction(transaction);
  });
  return {
    ...block,
    baseFeePerGas: block.baseFeePerGas ? BigInt(block.baseFeePerGas) : null,
    blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : void 0,
    difficulty: block.difficulty ? BigInt(block.difficulty) : void 0,
    excessBlobGas: block.excessBlobGas ? BigInt(block.excessBlobGas) : void 0,
    gasLimit: block.gasLimit ? BigInt(block.gasLimit) : void 0,
    gasUsed: block.gasUsed ? BigInt(block.gasUsed) : void 0,
    hash: block.hash ? block.hash : null,
    logsBloom: block.logsBloom ? block.logsBloom : null,
    nonce: block.nonce ? block.nonce : null,
    number: block.number ? BigInt(block.number) : null,
    size: block.size ? BigInt(block.size) : void 0,
    timestamp: block.timestamp ? BigInt(block.timestamp) : void 0,
    transactions,
    totalDifficulty: block.totalDifficulty ? BigInt(block.totalDifficulty) : null
  };
}
var defineBlock = defineFormatter("block", formatBlock);

// node_modules/.pnpm/viem@2.31.0/node_modules/viem/_esm/actions/public/getTransactionCount.js
async function getTransactionCount(client, { address, blockTag = "latest", blockNumber }) {
  const count = await client.request({
    method: "eth_getTransactionCount",
    params: [
      address,
      typeof blockNumber === "bigint" ? numberToHex(blockNumber) : blockTag
    ]
  }, {
    dedupe: Boolean(blockNumber)
  });
  return hexToNumber(count);
}

// node_modules/.pnpm/viem@2.31.0/node_modules/viem/_esm/constants/blob.js
var blobsPerTransaction = 6;
var bytesPerFieldElement = 32;
var fieldElementsPerBlob = 4096;
var bytesPerBlob = bytesPerFieldElement * fieldElementsPerBlob;
var maxBytesPerTransaction = bytesPerBlob * blobsPerTransaction - // terminator byte (0x80).
1 - // zero byte (0x00) appended to each field element.
1 * fieldElementsPerBlob * blobsPerTransaction;

// node_modules/.pnpm/viem@2.31.0/node_modules/viem/_esm/utils/formatters/log.js
function formatLog(log, { args, eventName } = {}) {
  return {
    ...log,
    blockHash: log.blockHash ? log.blockHash : null,
    blockNumber: log.blockNumber ? BigInt(log.blockNumber) : null,
    logIndex: log.logIndex ? Number(log.logIndex) : null,
    transactionHash: log.transactionHash ? log.transactionHash : null,
    transactionIndex: log.transactionIndex ? Number(log.transactionIndex) : null,
    ...eventName ? { args, eventName } : {}
  };
}

// node_modules/.pnpm/viem@2.31.0/node_modules/viem/_esm/actions/wallet/sendTransaction.js
var supportsWalletNamespace = new LruMap(128);

// node_modules/.pnpm/viem@2.31.0/node_modules/viem/_esm/utils/formatters/transactionReceipt.js
var receiptStatuses = {
  "0x0": "reverted",
  "0x1": "success"
};
function formatTransactionReceipt(transactionReceipt) {
  const receipt = {
    ...transactionReceipt,
    blockNumber: transactionReceipt.blockNumber ? BigInt(transactionReceipt.blockNumber) : null,
    contractAddress: transactionReceipt.contractAddress ? transactionReceipt.contractAddress : null,
    cumulativeGasUsed: transactionReceipt.cumulativeGasUsed ? BigInt(transactionReceipt.cumulativeGasUsed) : null,
    effectiveGasPrice: transactionReceipt.effectiveGasPrice ? BigInt(transactionReceipt.effectiveGasPrice) : null,
    gasUsed: transactionReceipt.gasUsed ? BigInt(transactionReceipt.gasUsed) : null,
    logs: transactionReceipt.logs ? transactionReceipt.logs.map((log) => formatLog(log)) : null,
    to: transactionReceipt.to ? transactionReceipt.to : null,
    transactionIndex: transactionReceipt.transactionIndex ? hexToNumber(transactionReceipt.transactionIndex) : null,
    status: transactionReceipt.status ? receiptStatuses[transactionReceipt.status] : null,
    type: transactionReceipt.type ? transactionType[transactionReceipt.type] || transactionReceipt.type : null
  };
  if (transactionReceipt.blobGasPrice)
    receipt.blobGasPrice = BigInt(transactionReceipt.blobGasPrice);
  if (transactionReceipt.blobGasUsed)
    receipt.blobGasUsed = BigInt(transactionReceipt.blobGasUsed);
  return receipt;
}
var defineTransactionReceipt = defineFormatter("transactionReceipt", formatTransactionReceipt);

// node_modules/.pnpm/viem@2.31.0/node_modules/viem/_esm/actions/wallet/sendCalls.js
var fallbackTransactionErrorMagicIdentifier = numberToHex(0, {
  size: 32
});

// node_modules/.pnpm/viem@2.31.0/node_modules/viem/_esm/utils/promise/withDedupe.js
var promiseCache = new LruMap(8192);

// node_modules/.pnpm/viem@2.31.0/node_modules/viem/_esm/utils/rpc/id.js
function createIdStore() {
  return {
    current: 0,
    take() {
      return this.current++;
    },
    reset() {
      this.current = 0;
    }
  };
}
var idCache = createIdStore();

// node_modules/.pnpm/@noble+hashes@1.8.0/node_modules/@noble/hashes/esm/legacy.js
var SHA1_IV = Uint32Array.from([
  1732584193,
  4023233417,
  2562383102,
  271733878,
  3285377520
]);
var SHA1_W = new Uint32Array(80);
var SHA1 = class extends HashMD {
  constructor() {
    super(64, 20, 8, false);
    this.A = SHA1_IV[0] | 0;
    this.B = SHA1_IV[1] | 0;
    this.C = SHA1_IV[2] | 0;
    this.D = SHA1_IV[3] | 0;
    this.E = SHA1_IV[4] | 0;
  }
  get() {
    const { A, B, C: C2, D: D2, E } = this;
    return [A, B, C2, D2, E];
  }
  set(A, B, C2, D2, E) {
    this.A = A | 0;
    this.B = B | 0;
    this.C = C2 | 0;
    this.D = D2 | 0;
    this.E = E | 0;
  }
  process(view, offset) {
    for (let i = 0; i < 16; i++, offset += 4)
      SHA1_W[i] = view.getUint32(offset, false);
    for (let i = 16; i < 80; i++)
      SHA1_W[i] = rotl(SHA1_W[i - 3] ^ SHA1_W[i - 8] ^ SHA1_W[i - 14] ^ SHA1_W[i - 16], 1);
    let { A, B, C: C2, D: D2, E } = this;
    for (let i = 0; i < 80; i++) {
      let F2, K3;
      if (i < 20) {
        F2 = Chi(B, C2, D2);
        K3 = 1518500249;
      } else if (i < 40) {
        F2 = B ^ C2 ^ D2;
        K3 = 1859775393;
      } else if (i < 60) {
        F2 = Maj(B, C2, D2);
        K3 = 2400959708;
      } else {
        F2 = B ^ C2 ^ D2;
        K3 = 3395469782;
      }
      const T = rotl(A, 5) + F2 + E + K3 + SHA1_W[i] | 0;
      E = D2;
      D2 = C2;
      C2 = rotl(B, 30);
      B = A;
      A = T;
    }
    A = A + this.A | 0;
    B = B + this.B | 0;
    C2 = C2 + this.C | 0;
    D2 = D2 + this.D | 0;
    E = E + this.E | 0;
    this.set(A, B, C2, D2, E);
  }
  roundClean() {
    clean(SHA1_W);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0);
    clean(this.buffer);
  }
};
var sha1 = createHasher(() => new SHA1());
var p32 = Math.pow(2, 32);
var K = Array.from({ length: 64 }, (_, i) => Math.floor(p32 * Math.abs(Math.sin(i + 1))));
var MD5_IV = SHA1_IV.slice(0, 4);
var MD5_W = new Uint32Array(16);
var MD5 = class extends HashMD {
  constructor() {
    super(64, 16, 8, true);
    this.A = MD5_IV[0] | 0;
    this.B = MD5_IV[1] | 0;
    this.C = MD5_IV[2] | 0;
    this.D = MD5_IV[3] | 0;
  }
  get() {
    const { A, B, C: C2, D: D2 } = this;
    return [A, B, C2, D2];
  }
  set(A, B, C2, D2) {
    this.A = A | 0;
    this.B = B | 0;
    this.C = C2 | 0;
    this.D = D2 | 0;
  }
  process(view, offset) {
    for (let i = 0; i < 16; i++, offset += 4)
      MD5_W[i] = view.getUint32(offset, true);
    let { A, B, C: C2, D: D2 } = this;
    for (let i = 0; i < 64; i++) {
      let F2, g, s;
      if (i < 16) {
        F2 = Chi(B, C2, D2);
        g = i;
        s = [7, 12, 17, 22];
      } else if (i < 32) {
        F2 = Chi(D2, B, C2);
        g = (5 * i + 1) % 16;
        s = [5, 9, 14, 20];
      } else if (i < 48) {
        F2 = B ^ C2 ^ D2;
        g = (3 * i + 5) % 16;
        s = [4, 11, 16, 23];
      } else {
        F2 = C2 ^ (B | ~D2);
        g = 7 * i % 16;
        s = [6, 10, 15, 21];
      }
      F2 = F2 + A + K[i] + MD5_W[g];
      A = D2;
      D2 = C2;
      C2 = B;
      B = B + rotl(F2, s[i % 4]);
    }
    A = A + this.A | 0;
    B = B + this.B | 0;
    C2 = C2 + this.C | 0;
    D2 = D2 + this.D | 0;
    this.set(A, B, C2, D2);
  }
  roundClean() {
    clean(MD5_W);
  }
  destroy() {
    this.set(0, 0, 0, 0);
    clean(this.buffer);
  }
};
var md5 = createHasher(() => new MD5());
var Rho160 = Uint8Array.from([
  7,
  4,
  13,
  1,
  10,
  6,
  15,
  3,
  12,
  0,
  9,
  5,
  2,
  14,
  11,
  8
]);
var Id160 = (() => Uint8Array.from(new Array(16).fill(0).map((_, i) => i)))();
var Pi160 = (() => Id160.map((i) => (9 * i + 5) % 16))();
var idxLR = (() => {
  const L = [Id160];
  const R = [Pi160];
  const res = [L, R];
  for (let i = 0; i < 4; i++)
    for (let j2 of res)
      j2.push(j2[i].map((k2) => Rho160[k2]));
  return res;
})();
var idxL = (() => idxLR[0])();
var idxR = (() => idxLR[1])();
var shifts160 = [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((i) => Uint8Array.from(i));
var shiftsL160 = idxL.map((idx, i) => idx.map((j2) => shifts160[i][j2]));
var shiftsR160 = idxR.map((idx, i) => idx.map((j2) => shifts160[i][j2]));
var Kl160 = Uint32Array.from([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]);
var Kr160 = Uint32Array.from([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]);
function ripemd_f(group, x2, y, z) {
  if (group === 0)
    return x2 ^ y ^ z;
  if (group === 1)
    return x2 & y | ~x2 & z;
  if (group === 2)
    return (x2 | ~y) ^ z;
  if (group === 3)
    return x2 & z | y & ~z;
  return x2 ^ (y | ~z);
}
var BUF_160 = new Uint32Array(16);
var RIPEMD160 = class extends HashMD {
  constructor() {
    super(64, 20, 8, true);
    this.h0 = 1732584193 | 0;
    this.h1 = 4023233417 | 0;
    this.h2 = 2562383102 | 0;
    this.h3 = 271733878 | 0;
    this.h4 = 3285377520 | 0;
  }
  get() {
    const { h0, h1, h2, h3, h4 } = this;
    return [h0, h1, h2, h3, h4];
  }
  set(h0, h1, h2, h3, h4) {
    this.h0 = h0 | 0;
    this.h1 = h1 | 0;
    this.h2 = h2 | 0;
    this.h3 = h3 | 0;
    this.h4 = h4 | 0;
  }
  process(view, offset) {
    for (let i = 0; i < 16; i++, offset += 4)
      BUF_160[i] = view.getUint32(offset, true);
    let al = this.h0 | 0, ar3 = al, bl = this.h1 | 0, br3 = bl, cl = this.h2 | 0, cr3 = cl, dl = this.h3 | 0, dr3 = dl, el = this.h4 | 0, er3 = el;
    for (let group = 0; group < 5; group++) {
      const rGroup = 4 - group;
      const hbl = Kl160[group], hbr = Kr160[group];
      const rl = idxL[group], rr3 = idxR[group];
      const sl = shiftsL160[group], sr3 = shiftsR160[group];
      for (let i = 0; i < 16; i++) {
        const tl = rotl(al + ripemd_f(group, bl, cl, dl) + BUF_160[rl[i]] + hbl, sl[i]) + el | 0;
        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl;
      }
      for (let i = 0; i < 16; i++) {
        const tr3 = rotl(ar3 + ripemd_f(rGroup, br3, cr3, dr3) + BUF_160[rr3[i]] + hbr, sr3[i]) + er3 | 0;
        ar3 = er3, er3 = dr3, dr3 = rotl(cr3, 10) | 0, cr3 = br3, br3 = tr3;
      }
    }
    this.set(this.h1 + cl + dr3 | 0, this.h2 + dl + er3 | 0, this.h3 + el + ar3 | 0, this.h4 + al + br3 | 0, this.h0 + bl + cr3 | 0);
  }
  roundClean() {
    clean(BUF_160);
  }
  destroy() {
    this.destroyed = true;
    clean(this.buffer);
    this.set(0, 0, 0, 0, 0);
  }
};
var ripemd160 = createHasher(() => new RIPEMD160());

// node_modules/.pnpm/viem@2.31.0/node_modules/viem/_esm/utils/nonceManager.js
function createNonceManager(parameters) {
  const { source } = parameters;
  const deltaMap = /* @__PURE__ */ new Map();
  const nonceMap = new LruMap(8192);
  const promiseMap = /* @__PURE__ */ new Map();
  const getKey = ({ address, chainId }) => `${address}.${chainId}`;
  return {
    async consume({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      const promise = this.get({ address, chainId, client });
      this.increment({ address, chainId });
      const nonce = await promise;
      await source.set({ address, chainId }, nonce);
      nonceMap.set(key, nonce);
      return nonce;
    },
    async increment({ address, chainId }) {
      const key = getKey({ address, chainId });
      const delta = deltaMap.get(key) ?? 0;
      deltaMap.set(key, delta + 1);
    },
    async get({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      let promise = promiseMap.get(key);
      if (!promise) {
        promise = (async () => {
          try {
            const nonce = await source.get({ address, chainId, client });
            const previousNonce = nonceMap.get(key) ?? 0;
            if (previousNonce > 0 && nonce <= previousNonce)
              return previousNonce + 1;
            nonceMap.delete(key);
            return nonce;
          } finally {
            this.reset({ address, chainId });
          }
        })();
        promiseMap.set(key, promise);
      }
      const delta = deltaMap.get(key) ?? 0;
      return delta + await promise;
    },
    reset({ address, chainId }) {
      const key = getKey({ address, chainId });
      deltaMap.delete(key);
      promiseMap.delete(key);
    }
  };
}
function jsonRpc() {
  return {
    async get(parameters) {
      const { address, client } = parameters;
      return getTransactionCount(client, {
        address,
        blockTag: "pending"
      });
    },
    set() {
    }
  };
}
var nonceManager = createNonceManager({
  source: jsonRpc()
});

// node_modules/.pnpm/ox@0.7.1/node_modules/ox/_esm/core/Hash.js
function keccak2562(value, options = {}) {
  const { as: as2 = typeof value === "string" ? "Hex" : "Bytes" } = options;
  const bytes = keccak_256(from(value));
  if (as2 === "Bytes")
    return bytes;
  return fromBytes(bytes);
}

// node_modules/.pnpm/ox@0.7.1/node_modules/ox/_esm/core/internal/lru.js
var LruMap2 = class extends Map {
  constructor(size4) {
    super();
    Object.defineProperty(this, "maxSize", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.maxSize = size4;
  }
  get(key) {
    const value = super.get(key);
    if (super.has(key) && value !== void 0) {
      this.delete(key);
      super.set(key, value);
    }
    return value;
  }
  set(key, value) {
    super.set(key, value);
    if (this.maxSize && this.size > this.maxSize) {
      const firstKey = this.keys().next().value;
      if (firstKey)
        this.delete(firstKey);
    }
    return this;
  }
};

// node_modules/.pnpm/ox@0.7.1/node_modules/ox/_esm/core/Caches.js
var caches = {
  checksum: new LruMap2(8192)
};
var checksum = caches.checksum;

// node_modules/.pnpm/ox@0.7.1/node_modules/ox/_esm/core/Address.js
var addressRegex = /^0x[a-fA-F0-9]{40}$/;
function assert(value, options = {}) {
  const { strict = true } = options;
  if (!addressRegex.test(value))
    throw new InvalidAddressError2({
      address: value,
      cause: new InvalidInputError()
    });
  if (strict) {
    if (value.toLowerCase() === value)
      return;
    if (checksum2(value) !== value)
      throw new InvalidAddressError2({
        address: value,
        cause: new InvalidChecksumError()
      });
  }
}
function checksum2(address) {
  if (checksum.has(address))
    return checksum.get(address);
  assert(address, { strict: false });
  const hexAddress = address.substring(2).toLowerCase();
  const hash = keccak2562(fromString(hexAddress), { as: "Bytes" });
  const characters = hexAddress.split("");
  for (let i = 0; i < 40; i += 2) {
    if (hash[i >> 1] >> 4 >= 8 && characters[i]) {
      characters[i] = characters[i].toUpperCase();
    }
    if ((hash[i >> 1] & 15) >= 8 && characters[i + 1]) {
      characters[i + 1] = characters[i + 1].toUpperCase();
    }
  }
  const result = `0x${characters.join("")}`;
  checksum.set(address, result);
  return result;
}
var InvalidAddressError2 = class extends BaseError {
  constructor({ address, cause }) {
    super(`Address "${address}" is invalid.`, {
      cause
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidAddressError"
    });
  }
};
var InvalidInputError = class extends BaseError {
  constructor() {
    super("Address is not a 20 byte (40 hexadecimal character) value.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidInputError"
    });
  }
};
var InvalidChecksumError = class extends BaseError {
  constructor() {
    super("Address does not match its checksum counterpart.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidChecksumError"
    });
  }
};

// node_modules/.pnpm/ox@0.7.1/node_modules/ox/_esm/core/Solidity.js
var arrayRegex2 = /^(.*)\[([0-9]*)\]$/;
var bytesRegex2 = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;
var integerRegex2 = /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
var maxInt8 = 2n ** (8n - 1n) - 1n;
var maxInt16 = 2n ** (16n - 1n) - 1n;
var maxInt24 = 2n ** (24n - 1n) - 1n;
var maxInt32 = 2n ** (32n - 1n) - 1n;
var maxInt40 = 2n ** (40n - 1n) - 1n;
var maxInt48 = 2n ** (48n - 1n) - 1n;
var maxInt56 = 2n ** (56n - 1n) - 1n;
var maxInt64 = 2n ** (64n - 1n) - 1n;
var maxInt72 = 2n ** (72n - 1n) - 1n;
var maxInt80 = 2n ** (80n - 1n) - 1n;
var maxInt88 = 2n ** (88n - 1n) - 1n;
var maxInt96 = 2n ** (96n - 1n) - 1n;
var maxInt104 = 2n ** (104n - 1n) - 1n;
var maxInt112 = 2n ** (112n - 1n) - 1n;
var maxInt120 = 2n ** (120n - 1n) - 1n;
var maxInt128 = 2n ** (128n - 1n) - 1n;
var maxInt136 = 2n ** (136n - 1n) - 1n;
var maxInt144 = 2n ** (144n - 1n) - 1n;
var maxInt152 = 2n ** (152n - 1n) - 1n;
var maxInt160 = 2n ** (160n - 1n) - 1n;
var maxInt168 = 2n ** (168n - 1n) - 1n;
var maxInt176 = 2n ** (176n - 1n) - 1n;
var maxInt184 = 2n ** (184n - 1n) - 1n;
var maxInt192 = 2n ** (192n - 1n) - 1n;
var maxInt200 = 2n ** (200n - 1n) - 1n;
var maxInt208 = 2n ** (208n - 1n) - 1n;
var maxInt216 = 2n ** (216n - 1n) - 1n;
var maxInt224 = 2n ** (224n - 1n) - 1n;
var maxInt232 = 2n ** (232n - 1n) - 1n;
var maxInt240 = 2n ** (240n - 1n) - 1n;
var maxInt248 = 2n ** (248n - 1n) - 1n;
var maxInt256 = 2n ** (256n - 1n) - 1n;
var minInt8 = -(2n ** (8n - 1n));
var minInt16 = -(2n ** (16n - 1n));
var minInt24 = -(2n ** (24n - 1n));
var minInt32 = -(2n ** (32n - 1n));
var minInt40 = -(2n ** (40n - 1n));
var minInt48 = -(2n ** (48n - 1n));
var minInt56 = -(2n ** (56n - 1n));
var minInt64 = -(2n ** (64n - 1n));
var minInt72 = -(2n ** (72n - 1n));
var minInt80 = -(2n ** (80n - 1n));
var minInt88 = -(2n ** (88n - 1n));
var minInt96 = -(2n ** (96n - 1n));
var minInt104 = -(2n ** (104n - 1n));
var minInt112 = -(2n ** (112n - 1n));
var minInt120 = -(2n ** (120n - 1n));
var minInt128 = -(2n ** (128n - 1n));
var minInt136 = -(2n ** (136n - 1n));
var minInt144 = -(2n ** (144n - 1n));
var minInt152 = -(2n ** (152n - 1n));
var minInt160 = -(2n ** (160n - 1n));
var minInt168 = -(2n ** (168n - 1n));
var minInt176 = -(2n ** (176n - 1n));
var minInt184 = -(2n ** (184n - 1n));
var minInt192 = -(2n ** (192n - 1n));
var minInt200 = -(2n ** (200n - 1n));
var minInt208 = -(2n ** (208n - 1n));
var minInt216 = -(2n ** (216n - 1n));
var minInt224 = -(2n ** (224n - 1n));
var minInt232 = -(2n ** (232n - 1n));
var minInt240 = -(2n ** (240n - 1n));
var minInt248 = -(2n ** (248n - 1n));
var minInt256 = -(2n ** (256n - 1n));
var maxUint8 = 2n ** 8n - 1n;
var maxUint16 = 2n ** 16n - 1n;
var maxUint24 = 2n ** 24n - 1n;
var maxUint32 = 2n ** 32n - 1n;
var maxUint40 = 2n ** 40n - 1n;
var maxUint48 = 2n ** 48n - 1n;
var maxUint56 = 2n ** 56n - 1n;
var maxUint64 = 2n ** 64n - 1n;
var maxUint72 = 2n ** 72n - 1n;
var maxUint80 = 2n ** 80n - 1n;
var maxUint88 = 2n ** 88n - 1n;
var maxUint96 = 2n ** 96n - 1n;
var maxUint104 = 2n ** 104n - 1n;
var maxUint112 = 2n ** 112n - 1n;
var maxUint120 = 2n ** 120n - 1n;
var maxUint128 = 2n ** 128n - 1n;
var maxUint136 = 2n ** 136n - 1n;
var maxUint144 = 2n ** 144n - 1n;
var maxUint152 = 2n ** 152n - 1n;
var maxUint160 = 2n ** 160n - 1n;
var maxUint168 = 2n ** 168n - 1n;
var maxUint176 = 2n ** 176n - 1n;
var maxUint184 = 2n ** 184n - 1n;
var maxUint192 = 2n ** 192n - 1n;
var maxUint200 = 2n ** 200n - 1n;
var maxUint208 = 2n ** 208n - 1n;
var maxUint216 = 2n ** 216n - 1n;
var maxUint224 = 2n ** 224n - 1n;
var maxUint232 = 2n ** 232n - 1n;
var maxUint240 = 2n ** 240n - 1n;
var maxUint248 = 2n ** 248n - 1n;
var maxUint2562 = 2n ** 256n - 1n;

// node_modules/.pnpm/ox@0.7.1/node_modules/ox/_esm/core/internal/cursor.js
var staticCursor = {
  bytes: new Uint8Array(),
  dataView: new DataView(new ArrayBuffer(0)),
  position: 0,
  positionReadCount: /* @__PURE__ */ new Map(),
  recursiveReadCount: 0,
  recursiveReadLimit: Number.POSITIVE_INFINITY,
  assertReadLimit() {
    if (this.recursiveReadCount >= this.recursiveReadLimit)
      throw new RecursiveReadLimitExceededError({
        count: this.recursiveReadCount + 1,
        limit: this.recursiveReadLimit
      });
  },
  assertPosition(position) {
    if (position < 0 || position > this.bytes.length - 1)
      throw new PositionOutOfBoundsError2({
        length: this.bytes.length,
        position
      });
  },
  decrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError({ offset });
    const position = this.position - offset;
    this.assertPosition(position);
    this.position = position;
  },
  getReadCount(position) {
    return this.positionReadCount.get(position || this.position) || 0;
  },
  incrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError({ offset });
    const position = this.position + offset;
    this.assertPosition(position);
    this.position = position;
  },
  inspectByte(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectBytes(length2, position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + length2 - 1);
    return this.bytes.subarray(position, position + length2);
  },
  inspectUint8(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectUint16(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 1);
    return this.dataView.getUint16(position);
  },
  inspectUint24(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 2);
    return (this.dataView.getUint16(position) << 8) + this.dataView.getUint8(position + 2);
  },
  inspectUint32(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 3);
    return this.dataView.getUint32(position);
  },
  pushByte(byte) {
    this.assertPosition(this.position);
    this.bytes[this.position] = byte;
    this.position++;
  },
  pushBytes(bytes) {
    this.assertPosition(this.position + bytes.length - 1);
    this.bytes.set(bytes, this.position);
    this.position += bytes.length;
  },
  pushUint8(value) {
    this.assertPosition(this.position);
    this.bytes[this.position] = value;
    this.position++;
  },
  pushUint16(value) {
    this.assertPosition(this.position + 1);
    this.dataView.setUint16(this.position, value);
    this.position += 2;
  },
  pushUint24(value) {
    this.assertPosition(this.position + 2);
    this.dataView.setUint16(this.position, value >> 8);
    this.dataView.setUint8(this.position + 2, value & ~4294967040);
    this.position += 3;
  },
  pushUint32(value) {
    this.assertPosition(this.position + 3);
    this.dataView.setUint32(this.position, value);
    this.position += 4;
  },
  readByte() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectByte();
    this.position++;
    return value;
  },
  readBytes(length2, size4) {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectBytes(length2);
    this.position += size4 ?? length2;
    return value;
  },
  readUint8() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint8();
    this.position += 1;
    return value;
  },
  readUint16() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint16();
    this.position += 2;
    return value;
  },
  readUint24() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint24();
    this.position += 3;
    return value;
  },
  readUint32() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint32();
    this.position += 4;
    return value;
  },
  get remaining() {
    return this.bytes.length - this.position;
  },
  setPosition(position) {
    const oldPosition = this.position;
    this.assertPosition(position);
    this.position = position;
    return () => this.position = oldPosition;
  },
  _touch() {
    if (this.recursiveReadLimit === Number.POSITIVE_INFINITY)
      return;
    const count = this.getReadCount();
    this.positionReadCount.set(this.position, count + 1);
    if (count > 0)
      this.recursiveReadCount++;
  }
};
var NegativeOffsetError = class extends BaseError {
  constructor({ offset }) {
    super(`Offset \`${offset}\` cannot be negative.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.NegativeOffsetError"
    });
  }
};
var PositionOutOfBoundsError2 = class extends BaseError {
  constructor({ length: length2, position }) {
    super(`Position \`${position}\` is out of bounds (\`0 < position < ${length2}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.PositionOutOfBoundsError"
    });
  }
};
var RecursiveReadLimitExceededError = class extends BaseError {
  constructor({ count, limit }) {
    super(`Recursive read limit of \`${limit}\` exceeded (recursive read count: \`${count}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.RecursiveReadLimitExceededError"
    });
  }
};

// node_modules/.pnpm/ox@0.7.1/node_modules/ox/_esm/core/AbiParameters.js
function encodePacked2(types, values) {
  if (types.length !== values.length)
    throw new LengthMismatchError({
      expectedLength: types.length,
      givenLength: values.length
    });
  const data = [];
  for (let i = 0; i < types.length; i++) {
    const type = types[i];
    const value = values[i];
    data.push(encodePacked2.encode(type, value));
  }
  return concat(...data);
}
(function(encodePacked3) {
  function encode9(type, value, isArray = false) {
    if (type === "address") {
      const address = value;
      assert(address);
      return padLeft(address.toLowerCase(), isArray ? 32 : 0);
    }
    if (type === "string")
      return fromString2(value);
    if (type === "bytes")
      return value;
    if (type === "bool")
      return padLeft(fromBoolean(value), isArray ? 32 : 1);
    const intMatch = type.match(integerRegex2);
    if (intMatch) {
      const [_type, baseType, bits = "256"] = intMatch;
      const size4 = Number.parseInt(bits) / 8;
      return fromNumber(value, {
        size: isArray ? 32 : size4,
        signed: baseType === "int"
      });
    }
    const bytesMatch = type.match(bytesRegex2);
    if (bytesMatch) {
      const [_type, size4] = bytesMatch;
      if (Number.parseInt(size4) !== (value.length - 2) / 2)
        throw new BytesSizeMismatchError2({
          expectedSize: Number.parseInt(size4),
          value
        });
      return padRight(value, isArray ? 32 : 0);
    }
    const arrayMatch = type.match(arrayRegex2);
    if (arrayMatch && Array.isArray(value)) {
      const [_type, childType] = arrayMatch;
      const data = [];
      for (let i = 0; i < value.length; i++) {
        data.push(encode9(childType, value[i], true));
      }
      if (data.length === 0)
        return "0x";
      return concat(...data);
    }
    throw new InvalidTypeError(type);
  }
  encodePacked3.encode = encode9;
})(encodePacked2 || (encodePacked2 = {}));
var BytesSizeMismatchError2 = class extends BaseError {
  constructor({ expectedSize, value }) {
    super(`Size of bytes "${value}" (bytes${size2(value)}) does not match expected size (bytes${expectedSize}).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.BytesSizeMismatchError"
    });
  }
};
var LengthMismatchError = class extends BaseError {
  constructor({ expectedLength, givenLength }) {
    super([
      "ABI encoding parameters/values length mismatch.",
      `Expected length (parameters): ${expectedLength}`,
      `Given length (values): ${givenLength}`
    ].join("\n"));
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.LengthMismatchError"
    });
  }
};
var InvalidTypeError = class extends BaseError {
  constructor(type) {
    super(`Type \`${type}\` is not a valid ABI Type.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.InvalidTypeError"
    });
  }
};

// node_modules/.pnpm/base-x@5.0.1/node_modules/base-x/src/esm/index.js
function base(ALPHABET2) {
  if (ALPHABET2.length >= 255) {
    throw new TypeError("Alphabet too long");
  }
  const BASE_MAP = new Uint8Array(256);
  for (let j2 = 0; j2 < BASE_MAP.length; j2++) {
    BASE_MAP[j2] = 255;
  }
  for (let i = 0; i < ALPHABET2.length; i++) {
    const x2 = ALPHABET2.charAt(i);
    const xc2 = x2.charCodeAt(0);
    if (BASE_MAP[xc2] !== 255) {
      throw new TypeError(x2 + " is ambiguous");
    }
    BASE_MAP[xc2] = i;
  }
  const BASE = ALPHABET2.length;
  const LEADER = ALPHABET2.charAt(0);
  const FACTOR = Math.log(BASE) / Math.log(256);
  const iFACTOR = Math.log(256) / Math.log(BASE);
  function encode9(source) {
    if (source instanceof Uint8Array) {
    } else if (ArrayBuffer.isView(source)) {
      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
    } else if (Array.isArray(source)) {
      source = Uint8Array.from(source);
    }
    if (!(source instanceof Uint8Array)) {
      throw new TypeError("Expected Uint8Array");
    }
    if (source.length === 0) {
      return "";
    }
    let zeroes = 0;
    let length2 = 0;
    let pbegin = 0;
    const pend = source.length;
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    }
    const size4 = (pend - pbegin) * iFACTOR + 1 >>> 0;
    const b58 = new Uint8Array(size4);
    while (pbegin !== pend) {
      let carry = source[pbegin];
      let i = 0;
      for (let it1 = size4 - 1; (carry !== 0 || i < length2) && it1 !== -1; it1--, i++) {
        carry += 256 * b58[it1] >>> 0;
        b58[it1] = carry % BASE >>> 0;
        carry = carry / BASE >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i;
      pbegin++;
    }
    let it22 = size4 - length2;
    while (it22 !== size4 && b58[it22] === 0) {
      it22++;
    }
    let str = LEADER.repeat(zeroes);
    for (; it22 < size4; ++it22) {
      str += ALPHABET2.charAt(b58[it22]);
    }
    return str;
  }
  function decodeUnsafe(source) {
    if (typeof source !== "string") {
      throw new TypeError("Expected String");
    }
    if (source.length === 0) {
      return new Uint8Array();
    }
    let psz = 0;
    let zeroes = 0;
    let length2 = 0;
    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    }
    const size4 = (source.length - psz) * FACTOR + 1 >>> 0;
    const b256 = new Uint8Array(size4);
    while (psz < source.length) {
      const charCode = source.charCodeAt(psz);
      if (charCode > 255) {
        return;
      }
      let carry = BASE_MAP[charCode];
      if (carry === 255) {
        return;
      }
      let i = 0;
      for (let it3 = size4 - 1; (carry !== 0 || i < length2) && it3 !== -1; it3--, i++) {
        carry += BASE * b256[it3] >>> 0;
        b256[it3] = carry % 256 >>> 0;
        carry = carry / 256 >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i;
      psz++;
    }
    let it4 = size4 - length2;
    while (it4 !== size4 && b256[it4] === 0) {
      it4++;
    }
    const vch = new Uint8Array(zeroes + (size4 - it4));
    let j2 = zeroes;
    while (it4 !== size4) {
      vch[j2++] = b256[it4++];
    }
    return vch;
  }
  function decode8(string2) {
    const buffer = decodeUnsafe(string2);
    if (buffer) {
      return buffer;
    }
    throw new Error("Non-base" + BASE + " character");
  }
  return {
    encode: encode9,
    decodeUnsafe,
    decode: decode8
  };
}
var esm_default = base;

// node_modules/.pnpm/bs58@6.0.0/node_modules/bs58/src/esm/index.js
var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
var esm_default2 = esm_default(ALPHABET);

// node_modules/.pnpm/@msgpack+msgpack@3.1.2/node_modules/@msgpack/msgpack/dist.esm/utils/utf8.mjs
function utf8Count(str) {
  const strLength = str.length;
  let byteLength = 0;
  let pos = 0;
  while (pos < strLength) {
    let value = str.charCodeAt(pos++);
    if ((value & 4294967168) === 0) {
      byteLength++;
      continue;
    } else if ((value & 4294965248) === 0) {
      byteLength += 2;
    } else {
      if (value >= 55296 && value <= 56319) {
        if (pos < strLength) {
          const extra = str.charCodeAt(pos);
          if ((extra & 64512) === 56320) {
            ++pos;
            value = ((value & 1023) << 10) + (extra & 1023) + 65536;
          }
        }
      }
      if ((value & 4294901760) === 0) {
        byteLength += 3;
      } else {
        byteLength += 4;
      }
    }
  }
  return byteLength;
}
function utf8EncodeJs(str, output, outputOffset) {
  const strLength = str.length;
  let offset = outputOffset;
  let pos = 0;
  while (pos < strLength) {
    let value = str.charCodeAt(pos++);
    if ((value & 4294967168) === 0) {
      output[offset++] = value;
      continue;
    } else if ((value & 4294965248) === 0) {
      output[offset++] = value >> 6 & 31 | 192;
    } else {
      if (value >= 55296 && value <= 56319) {
        if (pos < strLength) {
          const extra = str.charCodeAt(pos);
          if ((extra & 64512) === 56320) {
            ++pos;
            value = ((value & 1023) << 10) + (extra & 1023) + 65536;
          }
        }
      }
      if ((value & 4294901760) === 0) {
        output[offset++] = value >> 12 & 15 | 224;
        output[offset++] = value >> 6 & 63 | 128;
      } else {
        output[offset++] = value >> 18 & 7 | 240;
        output[offset++] = value >> 12 & 63 | 128;
        output[offset++] = value >> 6 & 63 | 128;
      }
    }
    output[offset++] = value & 63 | 128;
  }
}
var sharedTextEncoder = new TextEncoder();
var TEXT_ENCODER_THRESHOLD = 50;
function utf8EncodeTE(str, output, outputOffset) {
  sharedTextEncoder.encodeInto(str, output.subarray(outputOffset));
}
function utf8Encode(str, output, outputOffset) {
  if (str.length > TEXT_ENCODER_THRESHOLD) {
    utf8EncodeTE(str, output, outputOffset);
  } else {
    utf8EncodeJs(str, output, outputOffset);
  }
}
var CHUNK_SIZE = 4096;
function utf8DecodeJs(bytes, inputOffset, byteLength) {
  let offset = inputOffset;
  const end = offset + byteLength;
  const units = [];
  let result = "";
  while (offset < end) {
    const byte1 = bytes[offset++];
    if ((byte1 & 128) === 0) {
      units.push(byte1);
    } else if ((byte1 & 224) === 192) {
      const byte2 = bytes[offset++] & 63;
      units.push((byte1 & 31) << 6 | byte2);
    } else if ((byte1 & 240) === 224) {
      const byte2 = bytes[offset++] & 63;
      const byte3 = bytes[offset++] & 63;
      units.push((byte1 & 31) << 12 | byte2 << 6 | byte3);
    } else if ((byte1 & 248) === 240) {
      const byte2 = bytes[offset++] & 63;
      const byte3 = bytes[offset++] & 63;
      const byte4 = bytes[offset++] & 63;
      let unit = (byte1 & 7) << 18 | byte2 << 12 | byte3 << 6 | byte4;
      if (unit > 65535) {
        unit -= 65536;
        units.push(unit >>> 10 & 1023 | 55296);
        unit = 56320 | unit & 1023;
      }
      units.push(unit);
    } else {
      units.push(byte1);
    }
    if (units.length >= CHUNK_SIZE) {
      result += String.fromCharCode(...units);
      units.length = 0;
    }
  }
  if (units.length > 0) {
    result += String.fromCharCode(...units);
  }
  return result;
}
var sharedTextDecoder = new TextDecoder();
var TEXT_DECODER_THRESHOLD = 200;
function utf8DecodeTD(bytes, inputOffset, byteLength) {
  const stringBytes = bytes.subarray(inputOffset, inputOffset + byteLength);
  return sharedTextDecoder.decode(stringBytes);
}
function utf8Decode(bytes, inputOffset, byteLength) {
  if (byteLength > TEXT_DECODER_THRESHOLD) {
    return utf8DecodeTD(bytes, inputOffset, byteLength);
  } else {
    return utf8DecodeJs(bytes, inputOffset, byteLength);
  }
}

// node_modules/.pnpm/@msgpack+msgpack@3.1.2/node_modules/@msgpack/msgpack/dist.esm/ExtData.mjs
var ExtData = class {
  constructor(type, data) {
    this.type = type;
    this.data = data;
  }
};

// node_modules/.pnpm/@msgpack+msgpack@3.1.2/node_modules/@msgpack/msgpack/dist.esm/DecodeError.mjs
var DecodeError = class _DecodeError extends Error {
  constructor(message) {
    super(message);
    const proto = Object.create(_DecodeError.prototype);
    Object.setPrototypeOf(this, proto);
    Object.defineProperty(this, "name", {
      configurable: true,
      enumerable: false,
      value: _DecodeError.name
    });
  }
};

// node_modules/.pnpm/@msgpack+msgpack@3.1.2/node_modules/@msgpack/msgpack/dist.esm/utils/int.mjs
var UINT32_MAX = 4294967295;
function setUint64(view, offset, value) {
  const high = value / 4294967296;
  const low = value;
  view.setUint32(offset, high);
  view.setUint32(offset + 4, low);
}
function setInt64(view, offset, value) {
  const high = Math.floor(value / 4294967296);
  const low = value;
  view.setUint32(offset, high);
  view.setUint32(offset + 4, low);
}
function getInt64(view, offset) {
  const high = view.getInt32(offset);
  const low = view.getUint32(offset + 4);
  return high * 4294967296 + low;
}
function getUint64(view, offset) {
  const high = view.getUint32(offset);
  const low = view.getUint32(offset + 4);
  return high * 4294967296 + low;
}

// node_modules/.pnpm/@msgpack+msgpack@3.1.2/node_modules/@msgpack/msgpack/dist.esm/timestamp.mjs
var EXT_TIMESTAMP = -1;
var TIMESTAMP32_MAX_SEC = 4294967296 - 1;
var TIMESTAMP64_MAX_SEC = 17179869184 - 1;
function encodeTimeSpecToTimestamp({ sec, nsec }) {
  if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {
    if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {
      const rv = new Uint8Array(4);
      const view = new DataView(rv.buffer);
      view.setUint32(0, sec);
      return rv;
    } else {
      const secHigh = sec / 4294967296;
      const secLow = sec & 4294967295;
      const rv = new Uint8Array(8);
      const view = new DataView(rv.buffer);
      view.setUint32(0, nsec << 2 | secHigh & 3);
      view.setUint32(4, secLow);
      return rv;
    }
  } else {
    const rv = new Uint8Array(12);
    const view = new DataView(rv.buffer);
    view.setUint32(0, nsec);
    setInt64(view, 4, sec);
    return rv;
  }
}
function encodeDateToTimeSpec(date) {
  const msec = date.getTime();
  const sec = Math.floor(msec / 1e3);
  const nsec = (msec - sec * 1e3) * 1e6;
  const nsecInSec = Math.floor(nsec / 1e9);
  return {
    sec: sec + nsecInSec,
    nsec: nsec - nsecInSec * 1e9
  };
}
function encodeTimestampExtension(object) {
  if (object instanceof Date) {
    const timeSpec = encodeDateToTimeSpec(object);
    return encodeTimeSpecToTimestamp(timeSpec);
  } else {
    return null;
  }
}
function decodeTimestampToTimeSpec(data) {
  const view = new DataView(data.buffer, data.byteOffset, data.byteLength);
  switch (data.byteLength) {
    case 4: {
      const sec = view.getUint32(0);
      const nsec = 0;
      return { sec, nsec };
    }
    case 8: {
      const nsec30AndSecHigh2 = view.getUint32(0);
      const secLow32 = view.getUint32(4);
      const sec = (nsec30AndSecHigh2 & 3) * 4294967296 + secLow32;
      const nsec = nsec30AndSecHigh2 >>> 2;
      return { sec, nsec };
    }
    case 12: {
      const sec = getInt64(view, 4);
      const nsec = view.getUint32(0);
      return { sec, nsec };
    }
    default:
      throw new DecodeError(`Unrecognized data size for timestamp (expected 4, 8, or 12): ${data.length}`);
  }
}
function decodeTimestampExtension(data) {
  const timeSpec = decodeTimestampToTimeSpec(data);
  return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);
}
var timestampExtension = {
  type: EXT_TIMESTAMP,
  encode: encodeTimestampExtension,
  decode: decodeTimestampExtension
};

// node_modules/.pnpm/@msgpack+msgpack@3.1.2/node_modules/@msgpack/msgpack/dist.esm/ExtensionCodec.mjs
var ExtensionCodec = class {
  constructor() {
    this.builtInEncoders = [];
    this.builtInDecoders = [];
    this.encoders = [];
    this.decoders = [];
    this.register(timestampExtension);
  }
  register({ type, encode: encode9, decode: decode8 }) {
    if (type >= 0) {
      this.encoders[type] = encode9;
      this.decoders[type] = decode8;
    } else {
      const index = -1 - type;
      this.builtInEncoders[index] = encode9;
      this.builtInDecoders[index] = decode8;
    }
  }
  tryToEncode(object, context) {
    for (let i = 0; i < this.builtInEncoders.length; i++) {
      const encodeExt = this.builtInEncoders[i];
      if (encodeExt != null) {
        const data = encodeExt(object, context);
        if (data != null) {
          const type = -1 - i;
          return new ExtData(type, data);
        }
      }
    }
    for (let i = 0; i < this.encoders.length; i++) {
      const encodeExt = this.encoders[i];
      if (encodeExt != null) {
        const data = encodeExt(object, context);
        if (data != null) {
          const type = i;
          return new ExtData(type, data);
        }
      }
    }
    if (object instanceof ExtData) {
      return object;
    }
    return null;
  }
  decode(data, type, context) {
    const decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];
    if (decodeExt) {
      return decodeExt(data, type, context);
    } else {
      return new ExtData(type, data);
    }
  }
};
ExtensionCodec.defaultCodec = new ExtensionCodec();

// node_modules/.pnpm/@msgpack+msgpack@3.1.2/node_modules/@msgpack/msgpack/dist.esm/utils/typedArrays.mjs
function isArrayBufferLike(buffer) {
  return buffer instanceof ArrayBuffer || typeof SharedArrayBuffer !== "undefined" && buffer instanceof SharedArrayBuffer;
}
function ensureUint8Array(buffer) {
  if (buffer instanceof Uint8Array) {
    return buffer;
  } else if (ArrayBuffer.isView(buffer)) {
    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
  } else if (isArrayBufferLike(buffer)) {
    return new Uint8Array(buffer);
  } else {
    return Uint8Array.from(buffer);
  }
}

// node_modules/.pnpm/@msgpack+msgpack@3.1.2/node_modules/@msgpack/msgpack/dist.esm/Encoder.mjs
var DEFAULT_MAX_DEPTH = 100;
var DEFAULT_INITIAL_BUFFER_SIZE = 2048;
var Encoder = class _Encoder {
  constructor(options) {
    this.entered = false;
    this.extensionCodec = (options == null ? void 0 : options.extensionCodec) ?? ExtensionCodec.defaultCodec;
    this.context = options == null ? void 0 : options.context;
    this.useBigInt64 = (options == null ? void 0 : options.useBigInt64) ?? false;
    this.maxDepth = (options == null ? void 0 : options.maxDepth) ?? DEFAULT_MAX_DEPTH;
    this.initialBufferSize = (options == null ? void 0 : options.initialBufferSize) ?? DEFAULT_INITIAL_BUFFER_SIZE;
    this.sortKeys = (options == null ? void 0 : options.sortKeys) ?? false;
    this.forceFloat32 = (options == null ? void 0 : options.forceFloat32) ?? false;
    this.ignoreUndefined = (options == null ? void 0 : options.ignoreUndefined) ?? false;
    this.forceIntegerToFloat = (options == null ? void 0 : options.forceIntegerToFloat) ?? false;
    this.pos = 0;
    this.view = new DataView(new ArrayBuffer(this.initialBufferSize));
    this.bytes = new Uint8Array(this.view.buffer);
  }
  clone() {
    return new _Encoder({
      extensionCodec: this.extensionCodec,
      context: this.context,
      useBigInt64: this.useBigInt64,
      maxDepth: this.maxDepth,
      initialBufferSize: this.initialBufferSize,
      sortKeys: this.sortKeys,
      forceFloat32: this.forceFloat32,
      ignoreUndefined: this.ignoreUndefined,
      forceIntegerToFloat: this.forceIntegerToFloat
    });
  }
  reinitializeState() {
    this.pos = 0;
  }
  /**
   * This is almost equivalent to {@link Encoder#encode}, but it returns an reference of the encoder's internal buffer and thus much faster than {@link Encoder#encode}.
   *
   * @returns Encodes the object and returns a shared reference the encoder's internal buffer.
   */
  encodeSharedRef(object) {
    if (this.entered) {
      const instance = this.clone();
      return instance.encodeSharedRef(object);
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.doEncode(object, 1);
      return this.bytes.subarray(0, this.pos);
    } finally {
      this.entered = false;
    }
  }
  /**
   * @returns Encodes the object and returns a copy of the encoder's internal buffer.
   */
  encode(object) {
    if (this.entered) {
      const instance = this.clone();
      return instance.encode(object);
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.doEncode(object, 1);
      return this.bytes.slice(0, this.pos);
    } finally {
      this.entered = false;
    }
  }
  doEncode(object, depth) {
    if (depth > this.maxDepth) {
      throw new Error(`Too deep objects in depth ${depth}`);
    }
    if (object == null) {
      this.encodeNil();
    } else if (typeof object === "boolean") {
      this.encodeBoolean(object);
    } else if (typeof object === "number") {
      if (!this.forceIntegerToFloat) {
        this.encodeNumber(object);
      } else {
        this.encodeNumberAsFloat(object);
      }
    } else if (typeof object === "string") {
      this.encodeString(object);
    } else if (this.useBigInt64 && typeof object === "bigint") {
      this.encodeBigInt64(object);
    } else {
      this.encodeObject(object, depth);
    }
  }
  ensureBufferSizeToWrite(sizeToWrite) {
    const requiredSize = this.pos + sizeToWrite;
    if (this.view.byteLength < requiredSize) {
      this.resizeBuffer(requiredSize * 2);
    }
  }
  resizeBuffer(newSize) {
    const newBuffer = new ArrayBuffer(newSize);
    const newBytes = new Uint8Array(newBuffer);
    const newView = new DataView(newBuffer);
    newBytes.set(this.bytes);
    this.view = newView;
    this.bytes = newBytes;
  }
  encodeNil() {
    this.writeU8(192);
  }
  encodeBoolean(object) {
    if (object === false) {
      this.writeU8(194);
    } else {
      this.writeU8(195);
    }
  }
  encodeNumber(object) {
    if (!this.forceIntegerToFloat && Number.isSafeInteger(object)) {
      if (object >= 0) {
        if (object < 128) {
          this.writeU8(object);
        } else if (object < 256) {
          this.writeU8(204);
          this.writeU8(object);
        } else if (object < 65536) {
          this.writeU8(205);
          this.writeU16(object);
        } else if (object < 4294967296) {
          this.writeU8(206);
          this.writeU32(object);
        } else if (!this.useBigInt64) {
          this.writeU8(207);
          this.writeU64(object);
        } else {
          this.encodeNumberAsFloat(object);
        }
      } else {
        if (object >= -32) {
          this.writeU8(224 | object + 32);
        } else if (object >= -128) {
          this.writeU8(208);
          this.writeI8(object);
        } else if (object >= -32768) {
          this.writeU8(209);
          this.writeI16(object);
        } else if (object >= -2147483648) {
          this.writeU8(210);
          this.writeI32(object);
        } else if (!this.useBigInt64) {
          this.writeU8(211);
          this.writeI64(object);
        } else {
          this.encodeNumberAsFloat(object);
        }
      }
    } else {
      this.encodeNumberAsFloat(object);
    }
  }
  encodeNumberAsFloat(object) {
    if (this.forceFloat32) {
      this.writeU8(202);
      this.writeF32(object);
    } else {
      this.writeU8(203);
      this.writeF64(object);
    }
  }
  encodeBigInt64(object) {
    if (object >= BigInt(0)) {
      this.writeU8(207);
      this.writeBigUint64(object);
    } else {
      this.writeU8(211);
      this.writeBigInt64(object);
    }
  }
  writeStringHeader(byteLength) {
    if (byteLength < 32) {
      this.writeU8(160 + byteLength);
    } else if (byteLength < 256) {
      this.writeU8(217);
      this.writeU8(byteLength);
    } else if (byteLength < 65536) {
      this.writeU8(218);
      this.writeU16(byteLength);
    } else if (byteLength < 4294967296) {
      this.writeU8(219);
      this.writeU32(byteLength);
    } else {
      throw new Error(`Too long string: ${byteLength} bytes in UTF-8`);
    }
  }
  encodeString(object) {
    const maxHeaderSize = 1 + 4;
    const byteLength = utf8Count(object);
    this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);
    this.writeStringHeader(byteLength);
    utf8Encode(object, this.bytes, this.pos);
    this.pos += byteLength;
  }
  encodeObject(object, depth) {
    const ext = this.extensionCodec.tryToEncode(object, this.context);
    if (ext != null) {
      this.encodeExtension(ext);
    } else if (Array.isArray(object)) {
      this.encodeArray(object, depth);
    } else if (ArrayBuffer.isView(object)) {
      this.encodeBinary(object);
    } else if (typeof object === "object") {
      this.encodeMap(object, depth);
    } else {
      throw new Error(`Unrecognized object: ${Object.prototype.toString.apply(object)}`);
    }
  }
  encodeBinary(object) {
    const size4 = object.byteLength;
    if (size4 < 256) {
      this.writeU8(196);
      this.writeU8(size4);
    } else if (size4 < 65536) {
      this.writeU8(197);
      this.writeU16(size4);
    } else if (size4 < 4294967296) {
      this.writeU8(198);
      this.writeU32(size4);
    } else {
      throw new Error(`Too large binary: ${size4}`);
    }
    const bytes = ensureUint8Array(object);
    this.writeU8a(bytes);
  }
  encodeArray(object, depth) {
    const size4 = object.length;
    if (size4 < 16) {
      this.writeU8(144 + size4);
    } else if (size4 < 65536) {
      this.writeU8(220);
      this.writeU16(size4);
    } else if (size4 < 4294967296) {
      this.writeU8(221);
      this.writeU32(size4);
    } else {
      throw new Error(`Too large array: ${size4}`);
    }
    for (const item of object) {
      this.doEncode(item, depth + 1);
    }
  }
  countWithoutUndefined(object, keys) {
    let count = 0;
    for (const key of keys) {
      if (object[key] !== void 0) {
        count++;
      }
    }
    return count;
  }
  encodeMap(object, depth) {
    const keys = Object.keys(object);
    if (this.sortKeys) {
      keys.sort();
    }
    const size4 = this.ignoreUndefined ? this.countWithoutUndefined(object, keys) : keys.length;
    if (size4 < 16) {
      this.writeU8(128 + size4);
    } else if (size4 < 65536) {
      this.writeU8(222);
      this.writeU16(size4);
    } else if (size4 < 4294967296) {
      this.writeU8(223);
      this.writeU32(size4);
    } else {
      throw new Error(`Too large map object: ${size4}`);
    }
    for (const key of keys) {
      const value = object[key];
      if (!(this.ignoreUndefined && value === void 0)) {
        this.encodeString(key);
        this.doEncode(value, depth + 1);
      }
    }
  }
  encodeExtension(ext) {
    if (typeof ext.data === "function") {
      const data = ext.data(this.pos + 6);
      const size5 = data.length;
      if (size5 >= 4294967296) {
        throw new Error(`Too large extension object: ${size5}`);
      }
      this.writeU8(201);
      this.writeU32(size5);
      this.writeI8(ext.type);
      this.writeU8a(data);
      return;
    }
    const size4 = ext.data.length;
    if (size4 === 1) {
      this.writeU8(212);
    } else if (size4 === 2) {
      this.writeU8(213);
    } else if (size4 === 4) {
      this.writeU8(214);
    } else if (size4 === 8) {
      this.writeU8(215);
    } else if (size4 === 16) {
      this.writeU8(216);
    } else if (size4 < 256) {
      this.writeU8(199);
      this.writeU8(size4);
    } else if (size4 < 65536) {
      this.writeU8(200);
      this.writeU16(size4);
    } else if (size4 < 4294967296) {
      this.writeU8(201);
      this.writeU32(size4);
    } else {
      throw new Error(`Too large extension object: ${size4}`);
    }
    this.writeI8(ext.type);
    this.writeU8a(ext.data);
  }
  writeU8(value) {
    this.ensureBufferSizeToWrite(1);
    this.view.setUint8(this.pos, value);
    this.pos++;
  }
  writeU8a(values) {
    const size4 = values.length;
    this.ensureBufferSizeToWrite(size4);
    this.bytes.set(values, this.pos);
    this.pos += size4;
  }
  writeI8(value) {
    this.ensureBufferSizeToWrite(1);
    this.view.setInt8(this.pos, value);
    this.pos++;
  }
  writeU16(value) {
    this.ensureBufferSizeToWrite(2);
    this.view.setUint16(this.pos, value);
    this.pos += 2;
  }
  writeI16(value) {
    this.ensureBufferSizeToWrite(2);
    this.view.setInt16(this.pos, value);
    this.pos += 2;
  }
  writeU32(value) {
    this.ensureBufferSizeToWrite(4);
    this.view.setUint32(this.pos, value);
    this.pos += 4;
  }
  writeI32(value) {
    this.ensureBufferSizeToWrite(4);
    this.view.setInt32(this.pos, value);
    this.pos += 4;
  }
  writeF32(value) {
    this.ensureBufferSizeToWrite(4);
    this.view.setFloat32(this.pos, value);
    this.pos += 4;
  }
  writeF64(value) {
    this.ensureBufferSizeToWrite(8);
    this.view.setFloat64(this.pos, value);
    this.pos += 8;
  }
  writeU64(value) {
    this.ensureBufferSizeToWrite(8);
    setUint64(this.view, this.pos, value);
    this.pos += 8;
  }
  writeI64(value) {
    this.ensureBufferSizeToWrite(8);
    setInt64(this.view, this.pos, value);
    this.pos += 8;
  }
  writeBigUint64(value) {
    this.ensureBufferSizeToWrite(8);
    this.view.setBigUint64(this.pos, value);
    this.pos += 8;
  }
  writeBigInt64(value) {
    this.ensureBufferSizeToWrite(8);
    this.view.setBigInt64(this.pos, value);
    this.pos += 8;
  }
};

// node_modules/.pnpm/@msgpack+msgpack@3.1.2/node_modules/@msgpack/msgpack/dist.esm/encode.mjs
function encode4(value, options) {
  const encoder = new Encoder(options);
  return encoder.encodeSharedRef(value);
}

// node_modules/.pnpm/@msgpack+msgpack@3.1.2/node_modules/@msgpack/msgpack/dist.esm/utils/prettyByte.mjs
function prettyByte(byte) {
  return `${byte < 0 ? "-" : ""}0x${Math.abs(byte).toString(16).padStart(2, "0")}`;
}

// node_modules/.pnpm/@msgpack+msgpack@3.1.2/node_modules/@msgpack/msgpack/dist.esm/CachedKeyDecoder.mjs
var DEFAULT_MAX_KEY_LENGTH = 16;
var DEFAULT_MAX_LENGTH_PER_KEY = 16;
var CachedKeyDecoder = class {
  constructor(maxKeyLength = DEFAULT_MAX_KEY_LENGTH, maxLengthPerKey = DEFAULT_MAX_LENGTH_PER_KEY) {
    this.hit = 0;
    this.miss = 0;
    this.maxKeyLength = maxKeyLength;
    this.maxLengthPerKey = maxLengthPerKey;
    this.caches = [];
    for (let i = 0; i < this.maxKeyLength; i++) {
      this.caches.push([]);
    }
  }
  canBeCached(byteLength) {
    return byteLength > 0 && byteLength <= this.maxKeyLength;
  }
  find(bytes, inputOffset, byteLength) {
    const records = this.caches[byteLength - 1];
    FIND_CHUNK:
      for (const record of records) {
        const recordBytes = record.bytes;
        for (let j2 = 0; j2 < byteLength; j2++) {
          if (recordBytes[j2] !== bytes[inputOffset + j2]) {
            continue FIND_CHUNK;
          }
        }
        return record.str;
      }
    return null;
  }
  store(bytes, value) {
    const records = this.caches[bytes.length - 1];
    const record = { bytes, str: value };
    if (records.length >= this.maxLengthPerKey) {
      records[Math.random() * records.length | 0] = record;
    } else {
      records.push(record);
    }
  }
  decode(bytes, inputOffset, byteLength) {
    const cachedValue = this.find(bytes, inputOffset, byteLength);
    if (cachedValue != null) {
      this.hit++;
      return cachedValue;
    }
    this.miss++;
    const str = utf8DecodeJs(bytes, inputOffset, byteLength);
    const slicedCopyOfBytes = Uint8Array.prototype.slice.call(bytes, inputOffset, inputOffset + byteLength);
    this.store(slicedCopyOfBytes, str);
    return str;
  }
};

// node_modules/.pnpm/@msgpack+msgpack@3.1.2/node_modules/@msgpack/msgpack/dist.esm/Decoder.mjs
var STATE_ARRAY = "array";
var STATE_MAP_KEY = "map_key";
var STATE_MAP_VALUE = "map_value";
var mapKeyConverter = (key) => {
  if (typeof key === "string" || typeof key === "number") {
    return key;
  }
  throw new DecodeError("The type of key must be string or number but " + typeof key);
};
var StackPool = class {
  constructor() {
    this.stack = [];
    this.stackHeadPosition = -1;
  }
  get length() {
    return this.stackHeadPosition + 1;
  }
  top() {
    return this.stack[this.stackHeadPosition];
  }
  pushArrayState(size4) {
    const state = this.getUninitializedStateFromPool();
    state.type = STATE_ARRAY;
    state.position = 0;
    state.size = size4;
    state.array = new Array(size4);
  }
  pushMapState(size4) {
    const state = this.getUninitializedStateFromPool();
    state.type = STATE_MAP_KEY;
    state.readCount = 0;
    state.size = size4;
    state.map = {};
  }
  getUninitializedStateFromPool() {
    this.stackHeadPosition++;
    if (this.stackHeadPosition === this.stack.length) {
      const partialState = {
        type: void 0,
        size: 0,
        array: void 0,
        position: 0,
        readCount: 0,
        map: void 0,
        key: null
      };
      this.stack.push(partialState);
    }
    return this.stack[this.stackHeadPosition];
  }
  release(state) {
    const topStackState = this.stack[this.stackHeadPosition];
    if (topStackState !== state) {
      throw new Error("Invalid stack state. Released state is not on top of the stack.");
    }
    if (state.type === STATE_ARRAY) {
      const partialState = state;
      partialState.size = 0;
      partialState.array = void 0;
      partialState.position = 0;
      partialState.type = void 0;
    }
    if (state.type === STATE_MAP_KEY || state.type === STATE_MAP_VALUE) {
      const partialState = state;
      partialState.size = 0;
      partialState.map = void 0;
      partialState.readCount = 0;
      partialState.type = void 0;
    }
    this.stackHeadPosition--;
  }
  reset() {
    this.stack.length = 0;
    this.stackHeadPosition = -1;
  }
};
var HEAD_BYTE_REQUIRED = -1;
var EMPTY_VIEW = new DataView(new ArrayBuffer(0));
var EMPTY_BYTES = new Uint8Array(EMPTY_VIEW.buffer);
try {
  EMPTY_VIEW.getInt8(0);
} catch (e) {
  if (!(e instanceof RangeError)) {
    throw new Error("This module is not supported in the current JavaScript engine because DataView does not throw RangeError on out-of-bounds access");
  }
}
var MORE_DATA = new RangeError("Insufficient data");
var sharedCachedKeyDecoder = new CachedKeyDecoder();
var Decoder = class _Decoder {
  constructor(options) {
    this.totalPos = 0;
    this.pos = 0;
    this.view = EMPTY_VIEW;
    this.bytes = EMPTY_BYTES;
    this.headByte = HEAD_BYTE_REQUIRED;
    this.stack = new StackPool();
    this.entered = false;
    this.extensionCodec = (options == null ? void 0 : options.extensionCodec) ?? ExtensionCodec.defaultCodec;
    this.context = options == null ? void 0 : options.context;
    this.useBigInt64 = (options == null ? void 0 : options.useBigInt64) ?? false;
    this.rawStrings = (options == null ? void 0 : options.rawStrings) ?? false;
    this.maxStrLength = (options == null ? void 0 : options.maxStrLength) ?? UINT32_MAX;
    this.maxBinLength = (options == null ? void 0 : options.maxBinLength) ?? UINT32_MAX;
    this.maxArrayLength = (options == null ? void 0 : options.maxArrayLength) ?? UINT32_MAX;
    this.maxMapLength = (options == null ? void 0 : options.maxMapLength) ?? UINT32_MAX;
    this.maxExtLength = (options == null ? void 0 : options.maxExtLength) ?? UINT32_MAX;
    this.keyDecoder = (options == null ? void 0 : options.keyDecoder) !== void 0 ? options.keyDecoder : sharedCachedKeyDecoder;
    this.mapKeyConverter = (options == null ? void 0 : options.mapKeyConverter) ?? mapKeyConverter;
  }
  clone() {
    return new _Decoder({
      extensionCodec: this.extensionCodec,
      context: this.context,
      useBigInt64: this.useBigInt64,
      rawStrings: this.rawStrings,
      maxStrLength: this.maxStrLength,
      maxBinLength: this.maxBinLength,
      maxArrayLength: this.maxArrayLength,
      maxMapLength: this.maxMapLength,
      maxExtLength: this.maxExtLength,
      keyDecoder: this.keyDecoder
    });
  }
  reinitializeState() {
    this.totalPos = 0;
    this.headByte = HEAD_BYTE_REQUIRED;
    this.stack.reset();
  }
  setBuffer(buffer) {
    const bytes = ensureUint8Array(buffer);
    this.bytes = bytes;
    this.view = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
    this.pos = 0;
  }
  appendBuffer(buffer) {
    if (this.headByte === HEAD_BYTE_REQUIRED && !this.hasRemaining(1)) {
      this.setBuffer(buffer);
    } else {
      const remainingData = this.bytes.subarray(this.pos);
      const newData = ensureUint8Array(buffer);
      const newBuffer = new Uint8Array(remainingData.length + newData.length);
      newBuffer.set(remainingData);
      newBuffer.set(newData, remainingData.length);
      this.setBuffer(newBuffer);
    }
  }
  hasRemaining(size4) {
    return this.view.byteLength - this.pos >= size4;
  }
  createExtraByteError(posToShow) {
    const { view, pos } = this;
    return new RangeError(`Extra ${view.byteLength - pos} of ${view.byteLength} byte(s) found at buffer[${posToShow}]`);
  }
  /**
   * @throws {@link DecodeError}
   * @throws {@link RangeError}
   */
  decode(buffer) {
    if (this.entered) {
      const instance = this.clone();
      return instance.decode(buffer);
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.setBuffer(buffer);
      const object = this.doDecodeSync();
      if (this.hasRemaining(1)) {
        throw this.createExtraByteError(this.pos);
      }
      return object;
    } finally {
      this.entered = false;
    }
  }
  *decodeMulti(buffer) {
    if (this.entered) {
      const instance = this.clone();
      yield* instance.decodeMulti(buffer);
      return;
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.setBuffer(buffer);
      while (this.hasRemaining(1)) {
        yield this.doDecodeSync();
      }
    } finally {
      this.entered = false;
    }
  }
  async decodeAsync(stream) {
    if (this.entered) {
      const instance = this.clone();
      return instance.decodeAsync(stream);
    }
    try {
      this.entered = true;
      let decoded = false;
      let object;
      for await (const buffer of stream) {
        if (decoded) {
          this.entered = false;
          throw this.createExtraByteError(this.totalPos);
        }
        this.appendBuffer(buffer);
        try {
          object = this.doDecodeSync();
          decoded = true;
        } catch (e) {
          if (!(e instanceof RangeError)) {
            throw e;
          }
        }
        this.totalPos += this.pos;
      }
      if (decoded) {
        if (this.hasRemaining(1)) {
          throw this.createExtraByteError(this.totalPos);
        }
        return object;
      }
      const { headByte, pos, totalPos } = this;
      throw new RangeError(`Insufficient data in parsing ${prettyByte(headByte)} at ${totalPos} (${pos} in the current buffer)`);
    } finally {
      this.entered = false;
    }
  }
  decodeArrayStream(stream) {
    return this.decodeMultiAsync(stream, true);
  }
  decodeStream(stream) {
    return this.decodeMultiAsync(stream, false);
  }
  async *decodeMultiAsync(stream, isArray) {
    if (this.entered) {
      const instance = this.clone();
      yield* instance.decodeMultiAsync(stream, isArray);
      return;
    }
    try {
      this.entered = true;
      let isArrayHeaderRequired = isArray;
      let arrayItemsLeft = -1;
      for await (const buffer of stream) {
        if (isArray && arrayItemsLeft === 0) {
          throw this.createExtraByteError(this.totalPos);
        }
        this.appendBuffer(buffer);
        if (isArrayHeaderRequired) {
          arrayItemsLeft = this.readArraySize();
          isArrayHeaderRequired = false;
          this.complete();
        }
        try {
          while (true) {
            yield this.doDecodeSync();
            if (--arrayItemsLeft === 0) {
              break;
            }
          }
        } catch (e) {
          if (!(e instanceof RangeError)) {
            throw e;
          }
        }
        this.totalPos += this.pos;
      }
    } finally {
      this.entered = false;
    }
  }
  doDecodeSync() {
    DECODE:
      while (true) {
        const headByte = this.readHeadByte();
        let object;
        if (headByte >= 224) {
          object = headByte - 256;
        } else if (headByte < 192) {
          if (headByte < 128) {
            object = headByte;
          } else if (headByte < 144) {
            const size4 = headByte - 128;
            if (size4 !== 0) {
              this.pushMapState(size4);
              this.complete();
              continue DECODE;
            } else {
              object = {};
            }
          } else if (headByte < 160) {
            const size4 = headByte - 144;
            if (size4 !== 0) {
              this.pushArrayState(size4);
              this.complete();
              continue DECODE;
            } else {
              object = [];
            }
          } else {
            const byteLength = headByte - 160;
            object = this.decodeString(byteLength, 0);
          }
        } else if (headByte === 192) {
          object = null;
        } else if (headByte === 194) {
          object = false;
        } else if (headByte === 195) {
          object = true;
        } else if (headByte === 202) {
          object = this.readF32();
        } else if (headByte === 203) {
          object = this.readF64();
        } else if (headByte === 204) {
          object = this.readU8();
        } else if (headByte === 205) {
          object = this.readU16();
        } else if (headByte === 206) {
          object = this.readU32();
        } else if (headByte === 207) {
          if (this.useBigInt64) {
            object = this.readU64AsBigInt();
          } else {
            object = this.readU64();
          }
        } else if (headByte === 208) {
          object = this.readI8();
        } else if (headByte === 209) {
          object = this.readI16();
        } else if (headByte === 210) {
          object = this.readI32();
        } else if (headByte === 211) {
          if (this.useBigInt64) {
            object = this.readI64AsBigInt();
          } else {
            object = this.readI64();
          }
        } else if (headByte === 217) {
          const byteLength = this.lookU8();
          object = this.decodeString(byteLength, 1);
        } else if (headByte === 218) {
          const byteLength = this.lookU16();
          object = this.decodeString(byteLength, 2);
        } else if (headByte === 219) {
          const byteLength = this.lookU32();
          object = this.decodeString(byteLength, 4);
        } else if (headByte === 220) {
          const size4 = this.readU16();
          if (size4 !== 0) {
            this.pushArrayState(size4);
            this.complete();
            continue DECODE;
          } else {
            object = [];
          }
        } else if (headByte === 221) {
          const size4 = this.readU32();
          if (size4 !== 0) {
            this.pushArrayState(size4);
            this.complete();
            continue DECODE;
          } else {
            object = [];
          }
        } else if (headByte === 222) {
          const size4 = this.readU16();
          if (size4 !== 0) {
            this.pushMapState(size4);
            this.complete();
            continue DECODE;
          } else {
            object = {};
          }
        } else if (headByte === 223) {
          const size4 = this.readU32();
          if (size4 !== 0) {
            this.pushMapState(size4);
            this.complete();
            continue DECODE;
          } else {
            object = {};
          }
        } else if (headByte === 196) {
          const size4 = this.lookU8();
          object = this.decodeBinary(size4, 1);
        } else if (headByte === 197) {
          const size4 = this.lookU16();
          object = this.decodeBinary(size4, 2);
        } else if (headByte === 198) {
          const size4 = this.lookU32();
          object = this.decodeBinary(size4, 4);
        } else if (headByte === 212) {
          object = this.decodeExtension(1, 0);
        } else if (headByte === 213) {
          object = this.decodeExtension(2, 0);
        } else if (headByte === 214) {
          object = this.decodeExtension(4, 0);
        } else if (headByte === 215) {
          object = this.decodeExtension(8, 0);
        } else if (headByte === 216) {
          object = this.decodeExtension(16, 0);
        } else if (headByte === 199) {
          const size4 = this.lookU8();
          object = this.decodeExtension(size4, 1);
        } else if (headByte === 200) {
          const size4 = this.lookU16();
          object = this.decodeExtension(size4, 2);
        } else if (headByte === 201) {
          const size4 = this.lookU32();
          object = this.decodeExtension(size4, 4);
        } else {
          throw new DecodeError(`Unrecognized type byte: ${prettyByte(headByte)}`);
        }
        this.complete();
        const stack = this.stack;
        while (stack.length > 0) {
          const state = stack.top();
          if (state.type === STATE_ARRAY) {
            state.array[state.position] = object;
            state.position++;
            if (state.position === state.size) {
              object = state.array;
              stack.release(state);
            } else {
              continue DECODE;
            }
          } else if (state.type === STATE_MAP_KEY) {
            if (object === "__proto__") {
              throw new DecodeError("The key __proto__ is not allowed");
            }
            state.key = this.mapKeyConverter(object);
            state.type = STATE_MAP_VALUE;
            continue DECODE;
          } else {
            state.map[state.key] = object;
            state.readCount++;
            if (state.readCount === state.size) {
              object = state.map;
              stack.release(state);
            } else {
              state.key = null;
              state.type = STATE_MAP_KEY;
              continue DECODE;
            }
          }
        }
        return object;
      }
  }
  readHeadByte() {
    if (this.headByte === HEAD_BYTE_REQUIRED) {
      this.headByte = this.readU8();
    }
    return this.headByte;
  }
  complete() {
    this.headByte = HEAD_BYTE_REQUIRED;
  }
  readArraySize() {
    const headByte = this.readHeadByte();
    switch (headByte) {
      case 220:
        return this.readU16();
      case 221:
        return this.readU32();
      default: {
        if (headByte < 160) {
          return headByte - 144;
        } else {
          throw new DecodeError(`Unrecognized array type byte: ${prettyByte(headByte)}`);
        }
      }
    }
  }
  pushMapState(size4) {
    if (size4 > this.maxMapLength) {
      throw new DecodeError(`Max length exceeded: map length (${size4}) > maxMapLengthLength (${this.maxMapLength})`);
    }
    this.stack.pushMapState(size4);
  }
  pushArrayState(size4) {
    if (size4 > this.maxArrayLength) {
      throw new DecodeError(`Max length exceeded: array length (${size4}) > maxArrayLength (${this.maxArrayLength})`);
    }
    this.stack.pushArrayState(size4);
  }
  decodeString(byteLength, headerOffset) {
    if (!this.rawStrings || this.stateIsMapKey()) {
      return this.decodeUtf8String(byteLength, headerOffset);
    }
    return this.decodeBinary(byteLength, headerOffset);
  }
  /**
   * @throws {@link RangeError}
   */
  decodeUtf8String(byteLength, headerOffset) {
    var _a2;
    if (byteLength > this.maxStrLength) {
      throw new DecodeError(`Max length exceeded: UTF-8 byte length (${byteLength}) > maxStrLength (${this.maxStrLength})`);
    }
    if (this.bytes.byteLength < this.pos + headerOffset + byteLength) {
      throw MORE_DATA;
    }
    const offset = this.pos + headerOffset;
    let object;
    if (this.stateIsMapKey() && ((_a2 = this.keyDecoder) == null ? void 0 : _a2.canBeCached(byteLength))) {
      object = this.keyDecoder.decode(this.bytes, offset, byteLength);
    } else {
      object = utf8Decode(this.bytes, offset, byteLength);
    }
    this.pos += headerOffset + byteLength;
    return object;
  }
  stateIsMapKey() {
    if (this.stack.length > 0) {
      const state = this.stack.top();
      return state.type === STATE_MAP_KEY;
    }
    return false;
  }
  /**
   * @throws {@link RangeError}
   */
  decodeBinary(byteLength, headOffset) {
    if (byteLength > this.maxBinLength) {
      throw new DecodeError(`Max length exceeded: bin length (${byteLength}) > maxBinLength (${this.maxBinLength})`);
    }
    if (!this.hasRemaining(byteLength + headOffset)) {
      throw MORE_DATA;
    }
    const offset = this.pos + headOffset;
    const object = this.bytes.subarray(offset, offset + byteLength);
    this.pos += headOffset + byteLength;
    return object;
  }
  decodeExtension(size4, headOffset) {
    if (size4 > this.maxExtLength) {
      throw new DecodeError(`Max length exceeded: ext length (${size4}) > maxExtLength (${this.maxExtLength})`);
    }
    const extType = this.view.getInt8(this.pos + headOffset);
    const data = this.decodeBinary(
      size4,
      headOffset + 1
      /* extType */
    );
    return this.extensionCodec.decode(data, extType, this.context);
  }
  lookU8() {
    return this.view.getUint8(this.pos);
  }
  lookU16() {
    return this.view.getUint16(this.pos);
  }
  lookU32() {
    return this.view.getUint32(this.pos);
  }
  readU8() {
    const value = this.view.getUint8(this.pos);
    this.pos++;
    return value;
  }
  readI8() {
    const value = this.view.getInt8(this.pos);
    this.pos++;
    return value;
  }
  readU16() {
    const value = this.view.getUint16(this.pos);
    this.pos += 2;
    return value;
  }
  readI16() {
    const value = this.view.getInt16(this.pos);
    this.pos += 2;
    return value;
  }
  readU32() {
    const value = this.view.getUint32(this.pos);
    this.pos += 4;
    return value;
  }
  readI32() {
    const value = this.view.getInt32(this.pos);
    this.pos += 4;
    return value;
  }
  readU64() {
    const value = getUint64(this.view, this.pos);
    this.pos += 8;
    return value;
  }
  readI64() {
    const value = getInt64(this.view, this.pos);
    this.pos += 8;
    return value;
  }
  readU64AsBigInt() {
    const value = this.view.getBigUint64(this.pos);
    this.pos += 8;
    return value;
  }
  readI64AsBigInt() {
    const value = this.view.getBigInt64(this.pos);
    this.pos += 8;
    return value;
  }
  readF32() {
    const value = this.view.getFloat32(this.pos);
    this.pos += 4;
    return value;
  }
  readF64() {
    const value = this.view.getFloat64(this.pos);
    this.pos += 8;
    return value;
  }
};

// node_modules/.pnpm/@msgpack+msgpack@3.1.2/node_modules/@msgpack/msgpack/dist.esm/decode.mjs
function decode2(buffer, options) {
  const decoder = new Decoder(options);
  return decoder.decode(buffer);
}

// node_modules/.pnpm/@scure+base@1.2.6/node_modules/@scure/base/lib/esm/index.js
function isBytes2(a) {
  return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === "Uint8Array";
}
function abytes(b, ...lengths) {
  if (!isBytes2(b))
    throw new Error("Uint8Array expected");
  if (lengths.length > 0 && !lengths.includes(b.length))
    throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b.length);
}
function isArrayOf(isString, arr) {
  if (!Array.isArray(arr))
    return false;
  if (arr.length === 0)
    return true;
  if (isString) {
    return arr.every((item) => typeof item === "string");
  } else {
    return arr.every((item) => Number.isSafeInteger(item));
  }
}
function afn(input) {
  if (typeof input !== "function")
    throw new Error("function expected");
  return true;
}
function astr(label, input) {
  if (typeof input !== "string")
    throw new Error(`${label}: string expected`);
  return true;
}
function anumber(n) {
  if (!Number.isSafeInteger(n))
    throw new Error(`invalid integer: ${n}`);
}
function aArr(input) {
  if (!Array.isArray(input))
    throw new Error("array expected");
}
function astrArr(label, input) {
  if (!isArrayOf(true, input))
    throw new Error(`${label}: array of strings expected`);
}
function anumArr(label, input) {
  if (!isArrayOf(false, input))
    throw new Error(`${label}: array of numbers expected`);
}
function chain(...args) {
  const id = (a) => a;
  const wrap = (a, b) => (c) => a(b(c));
  const encode9 = args.map((x2) => x2.encode).reduceRight(wrap, id);
  const decode8 = args.map((x2) => x2.decode).reduce(wrap, id);
  return { encode: encode9, decode: decode8 };
}
function alphabet(letters) {
  const lettersA = typeof letters === "string" ? letters.split("") : letters;
  const len = lettersA.length;
  astrArr("alphabet", lettersA);
  const indexes = new Map(lettersA.map((l, i) => [l, i]));
  return {
    encode: (digits) => {
      aArr(digits);
      return digits.map((i) => {
        if (!Number.isSafeInteger(i) || i < 0 || i >= len)
          throw new Error(`alphabet.encode: digit index outside alphabet "${i}". Allowed: ${letters}`);
        return lettersA[i];
      });
    },
    decode: (input) => {
      aArr(input);
      return input.map((letter) => {
        astr("alphabet.decode", letter);
        const i = indexes.get(letter);
        if (i === void 0)
          throw new Error(`Unknown letter: "${letter}". Allowed: ${letters}`);
        return i;
      });
    }
  };
}
function join(separator = "") {
  astr("join", separator);
  return {
    encode: (from8) => {
      astrArr("join.decode", from8);
      return from8.join(separator);
    },
    decode: (to3) => {
      astr("join.decode", to3);
      return to3.split(separator);
    }
  };
}
function padding(bits, chr = "=") {
  anumber(bits);
  astr("padding", chr);
  return {
    encode(data) {
      astrArr("padding.encode", data);
      while (data.length * bits % 8)
        data.push(chr);
      return data;
    },
    decode(input) {
      astrArr("padding.decode", input);
      let end = input.length;
      if (end * bits % 8)
        throw new Error("padding: invalid, string should have whole number of bytes");
      for (; end > 0 && input[end - 1] === chr; end--) {
        const last = end - 1;
        const byte = last * bits;
        if (byte % 8 === 0)
          throw new Error("padding: invalid, string has too much padding");
      }
      return input.slice(0, end);
    }
  };
}
function normalize(fn2) {
  afn(fn2);
  return { encode: (from8) => from8, decode: (to3) => fn2(to3) };
}
function convertRadix(data, from8, to3) {
  if (from8 < 2)
    throw new Error(`convertRadix: invalid from=${from8}, base cannot be less than 2`);
  if (to3 < 2)
    throw new Error(`convertRadix: invalid to=${to3}, base cannot be less than 2`);
  aArr(data);
  if (!data.length)
    return [];
  let pos = 0;
  const res = [];
  const digits = Array.from(data, (d) => {
    anumber(d);
    if (d < 0 || d >= from8)
      throw new Error(`invalid integer: ${d}`);
    return d;
  });
  const dlen = digits.length;
  while (true) {
    let carry = 0;
    let done = true;
    for (let i = pos; i < dlen; i++) {
      const digit = digits[i];
      const fromCarry = from8 * carry;
      const digitBase = fromCarry + digit;
      if (!Number.isSafeInteger(digitBase) || fromCarry / from8 !== carry || digitBase - digit !== fromCarry) {
        throw new Error("convertRadix: carry overflow");
      }
      const div = digitBase / to3;
      carry = digitBase % to3;
      const rounded = Math.floor(div);
      digits[i] = rounded;
      if (!Number.isSafeInteger(rounded) || rounded * to3 + carry !== digitBase)
        throw new Error("convertRadix: carry overflow");
      if (!done)
        continue;
      else if (!rounded)
        pos = i;
      else
        done = false;
    }
    res.push(carry);
    if (done)
      break;
  }
  for (let i = 0; i < data.length - 1 && data[i] === 0; i++)
    res.push(0);
  return res.reverse();
}
var gcd = (a, b) => b === 0 ? a : gcd(b, a % b);
var radix2carry = (from8, to3) => from8 + (to3 - gcd(from8, to3));
var powers = (() => {
  let res = [];
  for (let i = 0; i < 40; i++)
    res.push(2 ** i);
  return res;
})();
function convertRadix2(data, from8, to3, padding2) {
  aArr(data);
  if (from8 <= 0 || from8 > 32)
    throw new Error(`convertRadix2: wrong from=${from8}`);
  if (to3 <= 0 || to3 > 32)
    throw new Error(`convertRadix2: wrong to=${to3}`);
  if (radix2carry(from8, to3) > 32) {
    throw new Error(`convertRadix2: carry overflow from=${from8} to=${to3} carryBits=${radix2carry(from8, to3)}`);
  }
  let carry = 0;
  let pos = 0;
  const max = powers[from8];
  const mask = powers[to3] - 1;
  const res = [];
  for (const n of data) {
    anumber(n);
    if (n >= max)
      throw new Error(`convertRadix2: invalid data word=${n} from=${from8}`);
    carry = carry << from8 | n;
    if (pos + from8 > 32)
      throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from8}`);
    pos += from8;
    for (; pos >= to3; pos -= to3)
      res.push((carry >> pos - to3 & mask) >>> 0);
    const pow = powers[pos];
    if (pow === void 0)
      throw new Error("invalid carry");
    carry &= pow - 1;
  }
  carry = carry << to3 - pos & mask;
  if (!padding2 && pos >= from8)
    throw new Error("Excess padding");
  if (!padding2 && carry > 0)
    throw new Error(`Non-zero padding: ${carry}`);
  if (padding2 && pos > 0)
    res.push(carry >>> 0);
  return res;
}
function radix(num) {
  anumber(num);
  const _256 = 2 ** 8;
  return {
    encode: (bytes) => {
      if (!isBytes2(bytes))
        throw new Error("radix.encode input should be Uint8Array");
      return convertRadix(Array.from(bytes), _256, num);
    },
    decode: (digits) => {
      anumArr("radix.decode", digits);
      return Uint8Array.from(convertRadix(digits, num, _256));
    }
  };
}
function radix2(bits, revPadding = false) {
  anumber(bits);
  if (bits <= 0 || bits > 32)
    throw new Error("radix2: bits should be in (0..32]");
  if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)
    throw new Error("radix2: carry overflow");
  return {
    encode: (bytes) => {
      if (!isBytes2(bytes))
        throw new Error("radix2.encode input should be Uint8Array");
      return convertRadix2(Array.from(bytes), 8, bits, !revPadding);
    },
    decode: (digits) => {
      anumArr("radix2.decode", digits);
      return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));
    }
  };
}
function unsafeWrapper(fn2) {
  afn(fn2);
  return function(...args) {
    try {
      return fn2.apply(null, args);
    } catch (e) {
    }
  };
}
var base16 = chain(radix2(4), alphabet("0123456789ABCDEF"), join(""));
var base32 = chain(radix2(5), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), padding(5), join(""));
var base32nopad = chain(radix2(5), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), join(""));
var base32hex = chain(radix2(5), alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), padding(5), join(""));
var base32hexnopad = chain(radix2(5), alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), join(""));
var base32crockford = chain(radix2(5), alphabet("0123456789ABCDEFGHJKMNPQRSTVWXYZ"), join(""), normalize((s) => s.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1")));
var hasBase64Builtin = (() => typeof Uint8Array.from([]).toBase64 === "function" && typeof Uint8Array.fromBase64 === "function")();
var decodeBase64Builtin = (s, isUrl) => {
  astr("base64", s);
  const re = isUrl ? /^[A-Za-z0-9=_-]+$/ : /^[A-Za-z0-9=+/]+$/;
  const alphabet3 = isUrl ? "base64url" : "base64";
  if (s.length > 0 && !re.test(s))
    throw new Error("invalid base64");
  return Uint8Array.fromBase64(s, { alphabet: alphabet3, lastChunkHandling: "strict" });
};
var base64 = hasBase64Builtin ? {
  encode(b) {
    abytes(b);
    return b.toBase64();
  },
  decode(s) {
    return decodeBase64Builtin(s, false);
  }
} : chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), padding(6), join(""));
var base64nopad = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), join(""));
var base64url = hasBase64Builtin ? {
  encode(b) {
    abytes(b);
    return b.toBase64({ alphabet: "base64url" });
  },
  decode(s) {
    return decodeBase64Builtin(s, true);
  }
} : chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), padding(6), join(""));
var base64urlnopad = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), join(""));
var genBase58 = (abc) => chain(radix(58), alphabet(abc), join(""));
var base58 = genBase58("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
var base58flickr = genBase58("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ");
var base58xrp = genBase58("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");
var BECH_ALPHABET = chain(alphabet("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), join(""));
var POLYMOD_GENERATORS = [996825010, 642813549, 513874426, 1027748829, 705979059];
function bech32Polymod(pre) {
  const b = pre >> 25;
  let chk = (pre & 33554431) << 5;
  for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {
    if ((b >> i & 1) === 1)
      chk ^= POLYMOD_GENERATORS[i];
  }
  return chk;
}
function bechChecksum(prefix, words, encodingConst = 1) {
  const len = prefix.length;
  let chk = 1;
  for (let i = 0; i < len; i++) {
    const c = prefix.charCodeAt(i);
    if (c < 33 || c > 126)
      throw new Error(`Invalid prefix (${prefix})`);
    chk = bech32Polymod(chk) ^ c >> 5;
  }
  chk = bech32Polymod(chk);
  for (let i = 0; i < len; i++)
    chk = bech32Polymod(chk) ^ prefix.charCodeAt(i) & 31;
  for (let v of words)
    chk = bech32Polymod(chk) ^ v;
  for (let i = 0; i < 6; i++)
    chk = bech32Polymod(chk);
  chk ^= encodingConst;
  return BECH_ALPHABET.encode(convertRadix2([chk % powers[30]], 30, 5, false));
}
function genBech32(encoding) {
  const ENCODING_CONST = encoding === "bech32" ? 1 : 734539939;
  const _words = radix2(5);
  const fromWords = _words.decode;
  const toWords = _words.encode;
  const fromWordsUnsafe = unsafeWrapper(fromWords);
  function encode9(prefix, words, limit = 90) {
    astr("bech32.encode prefix", prefix);
    if (isBytes2(words))
      words = Array.from(words);
    anumArr("bech32.encode", words);
    const plen = prefix.length;
    if (plen === 0)
      throw new TypeError(`Invalid prefix length ${plen}`);
    const actualLength = plen + 7 + words.length;
    if (limit !== false && actualLength > limit)
      throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);
    const lowered = prefix.toLowerCase();
    const sum = bechChecksum(lowered, words, ENCODING_CONST);
    return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;
  }
  function decode8(str, limit = 90) {
    astr("bech32.decode input", str);
    const slen = str.length;
    if (slen < 8 || limit !== false && slen > limit)
      throw new TypeError(`invalid string length: ${slen} (${str}). Expected (8..${limit})`);
    const lowered = str.toLowerCase();
    if (str !== lowered && str !== str.toUpperCase())
      throw new Error(`String must be lowercase or uppercase`);
    const sepIndex = lowered.lastIndexOf("1");
    if (sepIndex === 0 || sepIndex === -1)
      throw new Error(`Letter "1" must be present between prefix and data only`);
    const prefix = lowered.slice(0, sepIndex);
    const data = lowered.slice(sepIndex + 1);
    if (data.length < 6)
      throw new Error("Data must be at least 6 characters long");
    const words = BECH_ALPHABET.decode(data).slice(0, -6);
    const sum = bechChecksum(prefix, words, ENCODING_CONST);
    if (!data.endsWith(sum))
      throw new Error(`Invalid checksum in ${str}: expected "${sum}"`);
    return { prefix, words };
  }
  const decodeUnsafe = unsafeWrapper(decode8);
  function decodeToBytes(str) {
    const { prefix, words } = decode8(str, false);
    return { prefix, words, bytes: fromWords(words) };
  }
  function encodeFromBytes(prefix, bytes) {
    return encode9(prefix, toWords(bytes));
  }
  return {
    encode: encode9,
    decode: decode8,
    encodeFromBytes,
    decodeToBytes,
    decodeUnsafe,
    fromWords,
    fromWordsUnsafe,
    toWords
  };
}
var bech32 = genBech32("bech32");
var bech32m = genBech32("bech32m");
var hasHexBuiltin = (() => typeof Uint8Array.from([]).toHex === "function" && typeof Uint8Array.fromHex === "function")();
var hexBuiltin = {
  encode(data) {
    abytes(data);
    return data.toHex();
  },
  decode(s) {
    astr("hex", s);
    return Uint8Array.fromHex(s);
  }
};
var hex = hasHexBuiltin ? hexBuiltin : chain(radix2(4), alphabet("0123456789abcdef"), join(""), normalize((s) => {
  if (typeof s !== "string" || s.length % 2 !== 0)
    throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);
  return s.toLowerCase();
}));

// node_modules/.pnpm/@walletconnect+relay-auth@1.1.0/node_modules/@walletconnect/relay-auth/dist/index.es.js
var import_time = __toESM(require_cjs());

// node_modules/.pnpm/@walletconnect+safe-json@1.0.2/node_modules/@walletconnect/safe-json/dist/esm/index.js
var JSONStringify = (data) => JSON.stringify(data, (_, value) => typeof value === "bigint" ? value.toString() + "n" : value);
var JSONParse = (json) => {
  const numbersBiggerThanMaxInt = /([\[:])?(\d{17,}|(?:[9](?:[1-9]07199254740991|0[1-9]7199254740991|00[8-9]199254740991|007[2-9]99254740991|007199[3-9]54740991|0071992[6-9]4740991|00719925[5-9]740991|007199254[8-9]40991|0071992547[5-9]0991|00719925474[1-9]991|00719925474099[2-9])))([,\}\]])/g;
  const serializedData = json.replace(numbersBiggerThanMaxInt, '$1"$2n"$3');
  return JSON.parse(serializedData, (_, value) => {
    const isCustomFormatBigInt = typeof value === "string" && value.match(/^\d+n$/);
    if (isCustomFormatBigInt)
      return BigInt(value.substring(0, value.length - 1));
    return value;
  });
};
function safeJsonParse(value) {
  if (typeof value !== "string") {
    throw new Error(`Cannot safe json parse value of type ${typeof value}`);
  }
  try {
    return JSONParse(value);
  } catch (_a2) {
    return value;
  }
}
function safeJsonStringify(value) {
  return typeof value === "string" ? value : JSONStringify(value) || "";
}

// node_modules/.pnpm/@walletconnect+relay-auth@1.1.0/node_modules/@walletconnect/relay-auth/dist/index.es.js
function En(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function fe(t, ...e) {
  if (!En(t))
    throw new Error("Uint8Array expected");
  if (e.length > 0 && !e.includes(t.length))
    throw new Error("Uint8Array expected of length " + e + ", got length=" + t.length);
}
function De(t, e = true) {
  if (t.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (e && t.finished)
    throw new Error("Hash#digest() has already been called");
}
function gn(t, e) {
  fe(t);
  const n = e.outputLen;
  if (t.length < n)
    throw new Error("digestInto() expects output buffer of length at least " + n);
}
var it = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
var _t = (t) => new DataView(t.buffer, t.byteOffset, t.byteLength);
function yn(t) {
  if (typeof t != "string")
    throw new Error("utf8ToBytes expected string, got " + typeof t);
  return new Uint8Array(new TextEncoder().encode(t));
}
function de(t) {
  return typeof t == "string" && (t = yn(t)), fe(t), t;
}
var xn = class {
  clone() {
    return this._cloneInto();
  }
};
function Bn(t) {
  const e = (r) => t().update(de(r)).digest(), n = t();
  return e.outputLen = n.outputLen, e.blockLen = n.blockLen, e.create = () => t(), e;
}
function he(t = 32) {
  if (it && typeof it.getRandomValues == "function")
    return it.getRandomValues(new Uint8Array(t));
  if (it && typeof it.randomBytes == "function")
    return it.randomBytes(t);
  throw new Error("crypto.getRandomValues must be defined");
}
function Cn(t, e, n, r) {
  if (typeof t.setBigUint64 == "function")
    return t.setBigUint64(e, n, r);
  const o = BigInt(32), s = BigInt(4294967295), a = Number(n >> o & s), u = Number(n & s), i = r ? 4 : 0, D2 = r ? 0 : 4;
  t.setUint32(e + i, a, r), t.setUint32(e + D2, u, r);
}
var An = class extends xn {
  constructor(e, n, r, o) {
    super(), this.blockLen = e, this.outputLen = n, this.padOffset = r, this.isLE = o, this.finished = false, this.length = 0, this.pos = 0, this.destroyed = false, this.buffer = new Uint8Array(e), this.view = _t(this.buffer);
  }
  update(e) {
    De(this);
    const { view: n, buffer: r, blockLen: o } = this;
    e = de(e);
    const s = e.length;
    for (let a = 0; a < s; ) {
      const u = Math.min(o - this.pos, s - a);
      if (u === o) {
        const i = _t(e);
        for (; o <= s - a; a += o)
          this.process(i, a);
        continue;
      }
      r.set(e.subarray(a, a + u), this.pos), this.pos += u, a += u, this.pos === o && (this.process(n, 0), this.pos = 0);
    }
    return this.length += e.length, this.roundClean(), this;
  }
  digestInto(e) {
    De(this), gn(e, this), this.finished = true;
    const { buffer: n, view: r, blockLen: o, isLE: s } = this;
    let { pos: a } = this;
    n[a++] = 128, this.buffer.subarray(a).fill(0), this.padOffset > o - a && (this.process(r, 0), a = 0);
    for (let l = a; l < o; l++)
      n[l] = 0;
    Cn(r, o - 8, BigInt(this.length * 8), s), this.process(r, 0);
    const u = _t(e), i = this.outputLen;
    if (i % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const D2 = i / 4, c = this.get();
    if (D2 > c.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let l = 0; l < D2; l++)
      u.setUint32(4 * l, c[l], s);
  }
  digest() {
    const { buffer: e, outputLen: n } = this;
    this.digestInto(e);
    const r = e.slice(0, n);
    return this.destroy(), r;
  }
  _cloneInto(e) {
    e || (e = new this.constructor()), e.set(...this.get());
    const { blockLen: n, buffer: r, length: o, finished: s, destroyed: a, pos: u } = this;
    return e.length = o, e.pos = u, e.finished = s, e.destroyed = a, o % n && e.buffer.set(r), e;
  }
};
var wt = BigInt(2 ** 32 - 1);
var St = BigInt(32);
function le(t, e = false) {
  return e ? { h: Number(t & wt), l: Number(t >> St & wt) } : { h: Number(t >> St & wt) | 0, l: Number(t & wt) | 0 };
}
function mn(t, e = false) {
  let n = new Uint32Array(t.length), r = new Uint32Array(t.length);
  for (let o = 0; o < t.length; o++) {
    const { h: s, l: a } = le(t[o], e);
    [n[o], r[o]] = [s, a];
  }
  return [n, r];
}
var _n = (t, e) => BigInt(t >>> 0) << St | BigInt(e >>> 0);
var Sn = (t, e, n) => t >>> n;
var vn = (t, e, n) => t << 32 - n | e >>> n;
var In = (t, e, n) => t >>> n | e << 32 - n;
var Un = (t, e, n) => t << 32 - n | e >>> n;
var Tn = (t, e, n) => t << 64 - n | e >>> n - 32;
var Fn = (t, e, n) => t >>> n - 32 | e << 64 - n;
var Nn = (t, e) => e;
var Ln = (t, e) => t;
var On = (t, e, n) => t << n | e >>> 32 - n;
var Hn = (t, e, n) => e << n | t >>> 32 - n;
var zn = (t, e, n) => e << n - 32 | t >>> 64 - n;
var Mn = (t, e, n) => t << n - 32 | e >>> 64 - n;
function qn(t, e, n, r) {
  const o = (e >>> 0) + (r >>> 0);
  return { h: t + n + (o / 2 ** 32 | 0) | 0, l: o | 0 };
}
var $n = (t, e, n) => (t >>> 0) + (e >>> 0) + (n >>> 0);
var kn = (t, e, n, r) => e + n + r + (t / 2 ** 32 | 0) | 0;
var Rn = (t, e, n, r) => (t >>> 0) + (e >>> 0) + (n >>> 0) + (r >>> 0);
var jn = (t, e, n, r, o) => e + n + r + o + (t / 2 ** 32 | 0) | 0;
var Zn = (t, e, n, r, o) => (t >>> 0) + (e >>> 0) + (n >>> 0) + (r >>> 0) + (o >>> 0);
var Gn = (t, e, n, r, o, s) => e + n + r + o + s + (t / 2 ** 32 | 0) | 0;
var x = { fromBig: le, split: mn, toBig: _n, shrSH: Sn, shrSL: vn, rotrSH: In, rotrSL: Un, rotrBH: Tn, rotrBL: Fn, rotr32H: Nn, rotr32L: Ln, rotlSH: On, rotlSL: Hn, rotlBH: zn, rotlBL: Mn, add: qn, add3L: $n, add3H: kn, add4L: Rn, add4H: jn, add5H: Gn, add5L: Zn };
var [Vn, Yn] = (() => x.split(["0x428a2f98d728ae22", "0x7137449123ef65cd", "0xb5c0fbcfec4d3b2f", "0xe9b5dba58189dbbc", "0x3956c25bf348b538", "0x59f111f1b605d019", "0x923f82a4af194f9b", "0xab1c5ed5da6d8118", "0xd807aa98a3030242", "0x12835b0145706fbe", "0x243185be4ee4b28c", "0x550c7dc3d5ffb4e2", "0x72be5d74f27b896f", "0x80deb1fe3b1696b1", "0x9bdc06a725c71235", "0xc19bf174cf692694", "0xe49b69c19ef14ad2", "0xefbe4786384f25e3", "0x0fc19dc68b8cd5b5", "0x240ca1cc77ac9c65", "0x2de92c6f592b0275", "0x4a7484aa6ea6e483", "0x5cb0a9dcbd41fbd4", "0x76f988da831153b5", "0x983e5152ee66dfab", "0xa831c66d2db43210", "0xb00327c898fb213f", "0xbf597fc7beef0ee4", "0xc6e00bf33da88fc2", "0xd5a79147930aa725", "0x06ca6351e003826f", "0x142929670a0e6e70", "0x27b70a8546d22ffc", "0x2e1b21385c26c926", "0x4d2c6dfc5ac42aed", "0x53380d139d95b3df", "0x650a73548baf63de", "0x766a0abb3c77b2a8", "0x81c2c92e47edaee6", "0x92722c851482353b", "0xa2bfe8a14cf10364", "0xa81a664bbc423001", "0xc24b8b70d0f89791", "0xc76c51a30654be30", "0xd192e819d6ef5218", "0xd69906245565a910", "0xf40e35855771202a", "0x106aa07032bbd1b8", "0x19a4c116b8d2d0c8", "0x1e376c085141ab53", "0x2748774cdf8eeb99", "0x34b0bcb5e19b48a8", "0x391c0cb3c5c95a63", "0x4ed8aa4ae3418acb", "0x5b9cca4f7763e373", "0x682e6ff3d6b2b8a3", "0x748f82ee5defb2fc", "0x78a5636f43172f60", "0x84c87814a1f0ab72", "0x8cc702081a6439ec", "0x90befffa23631e28", "0xa4506cebde82bde9", "0xbef9a3f7b2c67915", "0xc67178f2e372532b", "0xca273eceea26619c", "0xd186b8c721c0c207", "0xeada7dd6cde0eb1e", "0xf57d4f7fee6ed178", "0x06f067aa72176fba", "0x0a637dc5a2c898a6", "0x113f9804bef90dae", "0x1b710b35131c471b", "0x28db77f523047d84", "0x32caab7b40c72493", "0x3c9ebe0a15c9bebc", "0x431d67c49c100d4c", "0x4cc5d4becb3e42b6", "0x597f299cfc657e2a", "0x5fcb6fab3ad6faec", "0x6c44198c4a475817"].map((t) => BigInt(t))))();
var P = new Uint32Array(80);
var Q = new Uint32Array(80);
var Jn = class extends An {
  constructor() {
    super(128, 64, 16, false), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;
  }
  get() {
    const { Ah: e, Al: n, Bh: r, Bl: o, Ch: s, Cl: a, Dh: u, Dl: i, Eh: D2, El: c, Fh: l, Fl: p, Gh: w, Gl: h, Hh: g, Hl: S } = this;
    return [e, n, r, o, s, a, u, i, D2, c, l, p, w, h, g, S];
  }
  set(e, n, r, o, s, a, u, i, D2, c, l, p, w, h, g, S) {
    this.Ah = e | 0, this.Al = n | 0, this.Bh = r | 0, this.Bl = o | 0, this.Ch = s | 0, this.Cl = a | 0, this.Dh = u | 0, this.Dl = i | 0, this.Eh = D2 | 0, this.El = c | 0, this.Fh = l | 0, this.Fl = p | 0, this.Gh = w | 0, this.Gl = h | 0, this.Hh = g | 0, this.Hl = S | 0;
  }
  process(e, n) {
    for (let d = 0; d < 16; d++, n += 4)
      P[d] = e.getUint32(n), Q[d] = e.getUint32(n += 4);
    for (let d = 16; d < 80; d++) {
      const m = P[d - 15] | 0, F2 = Q[d - 15] | 0, q = x.rotrSH(m, F2, 1) ^ x.rotrSH(m, F2, 8) ^ x.shrSH(m, F2, 7), z = x.rotrSL(m, F2, 1) ^ x.rotrSL(m, F2, 8) ^ x.shrSL(m, F2, 7), I = P[d - 2] | 0, O = Q[d - 2] | 0, ot2 = x.rotrSH(I, O, 19) ^ x.rotrBH(I, O, 61) ^ x.shrSH(I, O, 6), tt2 = x.rotrSL(I, O, 19) ^ x.rotrBL(I, O, 61) ^ x.shrSL(I, O, 6), st = x.add4L(z, tt2, Q[d - 7], Q[d - 16]), at2 = x.add4H(st, q, ot2, P[d - 7], P[d - 16]);
      P[d] = at2 | 0, Q[d] = st | 0;
    }
    let { Ah: r, Al: o, Bh: s, Bl: a, Ch: u, Cl: i, Dh: D2, Dl: c, Eh: l, El: p, Fh: w, Fl: h, Gh: g, Gl: S, Hh: v, Hl: L } = this;
    for (let d = 0; d < 80; d++) {
      const m = x.rotrSH(l, p, 14) ^ x.rotrSH(l, p, 18) ^ x.rotrBH(l, p, 41), F2 = x.rotrSL(l, p, 14) ^ x.rotrSL(l, p, 18) ^ x.rotrBL(l, p, 41), q = l & w ^ ~l & g, z = p & h ^ ~p & S, I = x.add5L(L, F2, z, Yn[d], Q[d]), O = x.add5H(I, v, m, q, Vn[d], P[d]), ot2 = I | 0, tt2 = x.rotrSH(r, o, 28) ^ x.rotrBH(r, o, 34) ^ x.rotrBH(r, o, 39), st = x.rotrSL(r, o, 28) ^ x.rotrBL(r, o, 34) ^ x.rotrBL(r, o, 39), at2 = r & s ^ r & u ^ s & u, Ct2 = o & a ^ o & i ^ a & i;
      v = g | 0, L = S | 0, g = w | 0, S = h | 0, w = l | 0, h = p | 0, { h: l, l: p } = x.add(D2 | 0, c | 0, O | 0, ot2 | 0), D2 = u | 0, c = i | 0, u = s | 0, i = a | 0, s = r | 0, a = o | 0;
      const At2 = x.add3L(ot2, st, Ct2);
      r = x.add3H(At2, O, tt2, at2), o = At2 | 0;
    }
    ({ h: r, l: o } = x.add(this.Ah | 0, this.Al | 0, r | 0, o | 0)), { h: s, l: a } = x.add(this.Bh | 0, this.Bl | 0, s | 0, a | 0), { h: u, l: i } = x.add(this.Ch | 0, this.Cl | 0, u | 0, i | 0), { h: D2, l: c } = x.add(this.Dh | 0, this.Dl | 0, D2 | 0, c | 0), { h: l, l: p } = x.add(this.Eh | 0, this.El | 0, l | 0, p | 0), { h: w, l: h } = x.add(this.Fh | 0, this.Fl | 0, w | 0, h | 0), { h: g, l: S } = x.add(this.Gh | 0, this.Gl | 0, g | 0, S | 0), { h: v, l: L } = x.add(this.Hh | 0, this.Hl | 0, v | 0, L | 0), this.set(r, o, s, a, u, i, D2, c, l, p, w, h, g, S, v, L);
  }
  roundClean() {
    P.fill(0), Q.fill(0);
  }
  destroy() {
    this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var Kn = Bn(() => new Jn());
var vt = BigInt(0);
var be = BigInt(1);
var Wn = BigInt(2);
function It(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function Ut(t) {
  if (!It(t))
    throw new Error("Uint8Array expected");
}
function Tt(t, e) {
  if (typeof e != "boolean")
    throw new Error(t + " boolean expected, got " + e);
}
var Xn = Array.from({ length: 256 }, (t, e) => e.toString(16).padStart(2, "0"));
function Ft(t) {
  Ut(t);
  let e = "";
  for (let n = 0; n < t.length; n++)
    e += Xn[t[n]];
  return e;
}
function pe(t) {
  if (typeof t != "string")
    throw new Error("hex string expected, got " + typeof t);
  return t === "" ? vt : BigInt("0x" + t);
}
var K2 = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function we(t) {
  if (t >= K2._0 && t <= K2._9)
    return t - K2._0;
  if (t >= K2.A && t <= K2.F)
    return t - (K2.A - 10);
  if (t >= K2.a && t <= K2.f)
    return t - (K2.a - 10);
}
function Ee(t) {
  if (typeof t != "string")
    throw new Error("hex string expected, got " + typeof t);
  const e = t.length, n = e / 2;
  if (e % 2)
    throw new Error("hex string expected, got unpadded hex of length " + e);
  const r = new Uint8Array(n);
  for (let o = 0, s = 0; o < n; o++, s += 2) {
    const a = we(t.charCodeAt(s)), u = we(t.charCodeAt(s + 1));
    if (a === void 0 || u === void 0) {
      const i = t[s] + t[s + 1];
      throw new Error('hex string expected, got non-hex character "' + i + '" at index ' + s);
    }
    r[o] = a * 16 + u;
  }
  return r;
}
function Pn(t) {
  return pe(Ft(t));
}
function Et(t) {
  return Ut(t), pe(Ft(Uint8Array.from(t).reverse()));
}
function ge(t, e) {
  return Ee(t.toString(16).padStart(e * 2, "0"));
}
function Nt(t, e) {
  return ge(t, e).reverse();
}
function W(t, e, n) {
  let r;
  if (typeof e == "string")
    try {
      r = Ee(e);
    } catch (s) {
      throw new Error(t + " must be hex string or Uint8Array, cause: " + s);
    }
  else if (It(e))
    r = Uint8Array.from(e);
  else
    throw new Error(t + " must be hex string or Uint8Array");
  const o = r.length;
  if (typeof n == "number" && o !== n)
    throw new Error(t + " of length " + n + " expected, got " + o);
  return r;
}
function ye(...t) {
  let e = 0;
  for (let r = 0; r < t.length; r++) {
    const o = t[r];
    Ut(o), e += o.length;
  }
  const n = new Uint8Array(e);
  for (let r = 0, o = 0; r < t.length; r++) {
    const s = t[r];
    n.set(s, o), o += s.length;
  }
  return n;
}
var Lt = (t) => typeof t == "bigint" && vt <= t;
function Qn(t, e, n) {
  return Lt(t) && Lt(e) && Lt(n) && e <= t && t < n;
}
function ft(t, e, n, r) {
  if (!Qn(e, n, r))
    throw new Error("expected valid " + t + ": " + n + " <= n < " + r + ", got " + e);
}
function tr(t) {
  let e;
  for (e = 0; t > vt; t >>= be, e += 1)
    ;
  return e;
}
var er = (t) => (Wn << BigInt(t - 1)) - be;
var nr = { bigint: (t) => typeof t == "bigint", function: (t) => typeof t == "function", boolean: (t) => typeof t == "boolean", string: (t) => typeof t == "string", stringOrUint8Array: (t) => typeof t == "string" || It(t), isSafeInteger: (t) => Number.isSafeInteger(t), array: (t) => Array.isArray(t), field: (t, e) => e.Fp.isValid(t), hash: (t) => typeof t == "function" && Number.isSafeInteger(t.outputLen) };
function Ot(t, e, n = {}) {
  const r = (o, s, a) => {
    const u = nr[s];
    if (typeof u != "function")
      throw new Error("invalid validator function");
    const i = t[o];
    if (!(a && i === void 0) && !u(i, t))
      throw new Error("param " + String(o) + " is invalid. Expected " + s + ", got " + i);
  };
  for (const [o, s] of Object.entries(e))
    r(o, s, false);
  for (const [o, s] of Object.entries(n))
    r(o, s, true);
  return t;
}
function xe(t) {
  const e = /* @__PURE__ */ new WeakMap();
  return (n, ...r) => {
    const o = e.get(n);
    if (o !== void 0)
      return o;
    const s = t(n, ...r);
    return e.set(n, s), s;
  };
}
var M = BigInt(0);
var N = BigInt(1);
var nt = BigInt(2);
var rr = BigInt(3);
var Ht = BigInt(4);
var Be = BigInt(5);
var Ce = BigInt(8);
function H(t, e) {
  const n = t % e;
  return n >= M ? n : e + n;
}
function or(t, e, n) {
  if (e < M)
    throw new Error("invalid exponent, negatives unsupported");
  if (n <= M)
    throw new Error("invalid modulus");
  if (n === N)
    return M;
  let r = N;
  for (; e > M; )
    e & N && (r = r * t % n), t = t * t % n, e >>= N;
  return r;
}
function J(t, e, n) {
  let r = t;
  for (; e-- > M; )
    r *= r, r %= n;
  return r;
}
function Ae(t, e) {
  if (t === M)
    throw new Error("invert: expected non-zero number");
  if (e <= M)
    throw new Error("invert: expected positive modulus, got " + e);
  let n = H(t, e), r = e, o = M, s = N;
  for (; n !== M; ) {
    const u = r / n, i = r % n, D2 = o - s * u;
    r = n, n = i, o = s, s = D2;
  }
  if (r !== N)
    throw new Error("invert: does not exist");
  return H(o, e);
}
function sr(t) {
  const e = (t - N) / nt;
  let n, r, o;
  for (n = t - N, r = 0; n % nt === M; n /= nt, r++)
    ;
  for (o = nt; o < t && or(o, e, t) !== t - N; o++)
    if (o > 1e3)
      throw new Error("Cannot find square root: likely non-prime P");
  if (r === 1) {
    const a = (t + N) / Ht;
    return function(i, D2) {
      const c = i.pow(D2, a);
      if (!i.eql(i.sqr(c), D2))
        throw new Error("Cannot find square root");
      return c;
    };
  }
  const s = (n + N) / nt;
  return function(u, i) {
    if (u.pow(i, e) === u.neg(u.ONE))
      throw new Error("Cannot find square root");
    let D2 = r, c = u.pow(u.mul(u.ONE, o), n), l = u.pow(i, s), p = u.pow(i, n);
    for (; !u.eql(p, u.ONE); ) {
      if (u.eql(p, u.ZERO))
        return u.ZERO;
      let w = 1;
      for (let g = u.sqr(p); w < D2 && !u.eql(g, u.ONE); w++)
        g = u.sqr(g);
      const h = u.pow(c, N << BigInt(D2 - w - 1));
      c = u.sqr(h), l = u.mul(l, h), p = u.mul(p, c), D2 = w;
    }
    return l;
  };
}
function ir(t) {
  if (t % Ht === rr) {
    const e = (t + N) / Ht;
    return function(r, o) {
      const s = r.pow(o, e);
      if (!r.eql(r.sqr(s), o))
        throw new Error("Cannot find square root");
      return s;
    };
  }
  if (t % Ce === Be) {
    const e = (t - Be) / Ce;
    return function(r, o) {
      const s = r.mul(o, nt), a = r.pow(s, e), u = r.mul(o, a), i = r.mul(r.mul(u, nt), a), D2 = r.mul(u, r.sub(i, r.ONE));
      if (!r.eql(r.sqr(D2), o))
        throw new Error("Cannot find square root");
      return D2;
    };
  }
  return sr(t);
}
var ur = (t, e) => (H(t, e) & N) === N;
var cr = ["create", "isValid", "is0", "neg", "inv", "sqrt", "sqr", "eql", "add", "sub", "mul", "pow", "div", "addN", "subN", "mulN", "sqrN"];
function ar(t) {
  const e = { ORDER: "bigint", MASK: "bigint", BYTES: "isSafeInteger", BITS: "isSafeInteger" }, n = cr.reduce((r, o) => (r[o] = "function", r), e);
  return Ot(t, n);
}
function fr(t, e, n) {
  if (n < M)
    throw new Error("invalid exponent, negatives unsupported");
  if (n === M)
    return t.ONE;
  if (n === N)
    return e;
  let r = t.ONE, o = e;
  for (; n > M; )
    n & N && (r = t.mul(r, o)), o = t.sqr(o), n >>= N;
  return r;
}
function Dr(t, e) {
  const n = new Array(e.length), r = e.reduce((s, a, u) => t.is0(a) ? s : (n[u] = s, t.mul(s, a)), t.ONE), o = t.inv(r);
  return e.reduceRight((s, a, u) => t.is0(a) ? s : (n[u] = t.mul(s, n[u]), t.mul(s, a)), o), n;
}
function me(t, e) {
  const n = e !== void 0 ? e : t.toString(2).length, r = Math.ceil(n / 8);
  return { nBitLength: n, nByteLength: r };
}
function _e(t, e, n = false, r = {}) {
  if (t <= M)
    throw new Error("invalid field: expected ORDER > 0, got " + t);
  const { nBitLength: o, nByteLength: s } = me(t, e);
  if (s > 2048)
    throw new Error("invalid field: expected ORDER of <= 2048 bytes");
  let a;
  const u = Object.freeze({ ORDER: t, isLE: n, BITS: o, BYTES: s, MASK: er(o), ZERO: M, ONE: N, create: (i) => H(i, t), isValid: (i) => {
    if (typeof i != "bigint")
      throw new Error("invalid field element: expected bigint, got " + typeof i);
    return M <= i && i < t;
  }, is0: (i) => i === M, isOdd: (i) => (i & N) === N, neg: (i) => H(-i, t), eql: (i, D2) => i === D2, sqr: (i) => H(i * i, t), add: (i, D2) => H(i + D2, t), sub: (i, D2) => H(i - D2, t), mul: (i, D2) => H(i * D2, t), pow: (i, D2) => fr(u, i, D2), div: (i, D2) => H(i * Ae(D2, t), t), sqrN: (i) => i * i, addN: (i, D2) => i + D2, subN: (i, D2) => i - D2, mulN: (i, D2) => i * D2, inv: (i) => Ae(i, t), sqrt: r.sqrt || ((i) => (a || (a = ir(t)), a(u, i))), invertBatch: (i) => Dr(u, i), cmov: (i, D2, c) => c ? D2 : i, toBytes: (i) => n ? Nt(i, s) : ge(i, s), fromBytes: (i) => {
    if (i.length !== s)
      throw new Error("Field.fromBytes: expected " + s + " bytes, got " + i.length);
    return n ? Et(i) : Pn(i);
  } });
  return Object.freeze(u);
}
var Se = BigInt(0);
var gt = BigInt(1);
function zt(t, e) {
  const n = e.negate();
  return t ? n : e;
}
function ve(t, e) {
  if (!Number.isSafeInteger(t) || t <= 0 || t > e)
    throw new Error("invalid window size, expected [1.." + e + "], got W=" + t);
}
function Mt(t, e) {
  ve(t, e);
  const n = Math.ceil(e / t) + 1, r = 2 ** (t - 1);
  return { windows: n, windowSize: r };
}
function dr(t, e) {
  if (!Array.isArray(t))
    throw new Error("array expected");
  t.forEach((n, r) => {
    if (!(n instanceof e))
      throw new Error("invalid point at index " + r);
  });
}
function hr(t, e) {
  if (!Array.isArray(t))
    throw new Error("array of scalars expected");
  t.forEach((n, r) => {
    if (!e.isValid(n))
      throw new Error("invalid scalar at index " + r);
  });
}
var qt = /* @__PURE__ */ new WeakMap();
var Ie = /* @__PURE__ */ new WeakMap();
function $t(t) {
  return Ie.get(t) || 1;
}
function lr(t, e) {
  return { constTimeNegate: zt, hasPrecomputes(n) {
    return $t(n) !== 1;
  }, unsafeLadder(n, r, o = t.ZERO) {
    let s = n;
    for (; r > Se; )
      r & gt && (o = o.add(s)), s = s.double(), r >>= gt;
    return o;
  }, precomputeWindow(n, r) {
    const { windows: o, windowSize: s } = Mt(r, e), a = [];
    let u = n, i = u;
    for (let D2 = 0; D2 < o; D2++) {
      i = u, a.push(i);
      for (let c = 1; c < s; c++)
        i = i.add(u), a.push(i);
      u = i.double();
    }
    return a;
  }, wNAF(n, r, o) {
    const { windows: s, windowSize: a } = Mt(n, e);
    let u = t.ZERO, i = t.BASE;
    const D2 = BigInt(2 ** n - 1), c = 2 ** n, l = BigInt(n);
    for (let p = 0; p < s; p++) {
      const w = p * a;
      let h = Number(o & D2);
      o >>= l, h > a && (h -= c, o += gt);
      const g = w, S = w + Math.abs(h) - 1, v = p % 2 !== 0, L = h < 0;
      h === 0 ? i = i.add(zt(v, r[g])) : u = u.add(zt(L, r[S]));
    }
    return { p: u, f: i };
  }, wNAFUnsafe(n, r, o, s = t.ZERO) {
    const { windows: a, windowSize: u } = Mt(n, e), i = BigInt(2 ** n - 1), D2 = 2 ** n, c = BigInt(n);
    for (let l = 0; l < a; l++) {
      const p = l * u;
      if (o === Se)
        break;
      let w = Number(o & i);
      if (o >>= c, w > u && (w -= D2, o += gt), w === 0)
        continue;
      let h = r[p + Math.abs(w) - 1];
      w < 0 && (h = h.negate()), s = s.add(h);
    }
    return s;
  }, getPrecomputes(n, r, o) {
    let s = qt.get(r);
    return s || (s = this.precomputeWindow(r, n), n !== 1 && qt.set(r, o(s))), s;
  }, wNAFCached(n, r, o) {
    const s = $t(n);
    return this.wNAF(s, this.getPrecomputes(s, n, o), r);
  }, wNAFCachedUnsafe(n, r, o, s) {
    const a = $t(n);
    return a === 1 ? this.unsafeLadder(n, r, s) : this.wNAFUnsafe(a, this.getPrecomputes(a, n, o), r, s);
  }, setWindowSize(n, r) {
    ve(r, e), Ie.set(n, r), qt.delete(n);
  } };
}
function br(t, e, n, r) {
  if (dr(n, t), hr(r, e), n.length !== r.length)
    throw new Error("arrays of points and scalars must have equal length");
  const o = t.ZERO, s = tr(BigInt(n.length)), a = s > 12 ? s - 3 : s > 4 ? s - 2 : s ? 2 : 1, u = (1 << a) - 1, i = new Array(u + 1).fill(o), D2 = Math.floor((e.BITS - 1) / a) * a;
  let c = o;
  for (let l = D2; l >= 0; l -= a) {
    i.fill(o);
    for (let w = 0; w < r.length; w++) {
      const h = r[w], g = Number(h >> BigInt(l) & BigInt(u));
      i[g] = i[g].add(n[w]);
    }
    let p = o;
    for (let w = i.length - 1, h = o; w > 0; w--)
      h = h.add(i[w]), p = p.add(h);
    if (c = c.add(p), l !== 0)
      for (let w = 0; w < a; w++)
        c = c.double();
  }
  return c;
}
function pr(t) {
  return ar(t.Fp), Ot(t, { n: "bigint", h: "bigint", Gx: "field", Gy: "field" }, { nBitLength: "isSafeInteger", nByteLength: "isSafeInteger" }), Object.freeze({ ...me(t.n, t.nBitLength), ...t, p: t.Fp.ORDER });
}
var G = BigInt(0);
var j = BigInt(1);
var yt = BigInt(2);
var wr = BigInt(8);
var Er = { zip215: true };
function gr(t) {
  const e = pr(t);
  return Ot(t, { hash: "function", a: "bigint", d: "bigint", randomBytes: "function" }, { adjustScalarBytes: "function", domain: "function", uvRatio: "function", mapToCurve: "function" }), Object.freeze({ ...e });
}
function yr(t) {
  const e = gr(t), { Fp: n, n: r, prehash: o, hash: s, randomBytes: a, nByteLength: u, h: i } = e, D2 = yt << BigInt(u * 8) - j, c = n.create, l = _e(e.n, e.nBitLength), p = e.uvRatio || ((y, f) => {
    try {
      return { isValid: true, value: n.sqrt(y * n.inv(f)) };
    } catch {
      return { isValid: false, value: G };
    }
  }), w = e.adjustScalarBytes || ((y) => y), h = e.domain || ((y, f, b) => {
    if (Tt("phflag", b), f.length || b)
      throw new Error("Contexts/pre-hash are not supported");
    return y;
  });
  function g(y, f) {
    ft("coordinate " + y, f, G, D2);
  }
  function S(y) {
    if (!(y instanceof d))
      throw new Error("ExtendedPoint expected");
  }
  const v = xe((y, f) => {
    const { ex: b, ey: E, ez: B } = y, C2 = y.is0();
    f == null && (f = C2 ? wr : n.inv(B));
    const A = c(b * f), U = c(E * f), _ = c(B * f);
    if (C2)
      return { x: G, y: j };
    if (_ !== j)
      throw new Error("invZ was invalid");
    return { x: A, y: U };
  }), L = xe((y) => {
    const { a: f, d: b } = e;
    if (y.is0())
      throw new Error("bad point: ZERO");
    const { ex: E, ey: B, ez: C2, et: A } = y, U = c(E * E), _ = c(B * B), T = c(C2 * C2), $ = c(T * T), R = c(U * f), V = c(T * c(R + _)), Y2 = c($ + c(b * c(U * _)));
    if (V !== Y2)
      throw new Error("bad point: equation left != right (1)");
    const Z = c(E * B), X2 = c(C2 * A);
    if (Z !== X2)
      throw new Error("bad point: equation left != right (2)");
    return true;
  });
  class d {
    constructor(f, b, E, B) {
      this.ex = f, this.ey = b, this.ez = E, this.et = B, g("x", f), g("y", b), g("z", E), g("t", B), Object.freeze(this);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    static fromAffine(f) {
      if (f instanceof d)
        throw new Error("extended point not allowed");
      const { x: b, y: E } = f || {};
      return g("x", b), g("y", E), new d(b, E, j, c(b * E));
    }
    static normalizeZ(f) {
      const b = n.invertBatch(f.map((E) => E.ez));
      return f.map((E, B) => E.toAffine(b[B])).map(d.fromAffine);
    }
    static msm(f, b) {
      return br(d, l, f, b);
    }
    _setWindowSize(f) {
      q.setWindowSize(this, f);
    }
    assertValidity() {
      L(this);
    }
    equals(f) {
      S(f);
      const { ex: b, ey: E, ez: B } = this, { ex: C2, ey: A, ez: U } = f, _ = c(b * U), T = c(C2 * B), $ = c(E * U), R = c(A * B);
      return _ === T && $ === R;
    }
    is0() {
      return this.equals(d.ZERO);
    }
    negate() {
      return new d(c(-this.ex), this.ey, this.ez, c(-this.et));
    }
    double() {
      const { a: f } = e, { ex: b, ey: E, ez: B } = this, C2 = c(b * b), A = c(E * E), U = c(yt * c(B * B)), _ = c(f * C2), T = b + E, $ = c(c(T * T) - C2 - A), R = _ + A, V = R - U, Y2 = _ - A, Z = c($ * V), X2 = c(R * Y2), et = c($ * Y2), pt2 = c(V * R);
      return new d(Z, X2, pt2, et);
    }
    add(f) {
      S(f);
      const { a: b, d: E } = e, { ex: B, ey: C2, ez: A, et: U } = this, { ex: _, ey: T, ez: $, et: R } = f;
      if (b === BigInt(-1)) {
        const re = c((C2 - B) * (T + _)), oe = c((C2 + B) * (T - _)), mt2 = c(oe - re);
        if (mt2 === G)
          return this.double();
        const se2 = c(A * yt * R), ie2 = c(U * yt * $), ue2 = ie2 + se2, ce2 = oe + re, ae2 = ie2 - se2, Dn2 = c(ue2 * mt2), dn2 = c(ce2 * ae2), hn2 = c(ue2 * ae2), ln2 = c(mt2 * ce2);
        return new d(Dn2, dn2, ln2, hn2);
      }
      const V = c(B * _), Y2 = c(C2 * T), Z = c(U * E * R), X2 = c(A * $), et = c((B + C2) * (_ + T) - V - Y2), pt2 = X2 - Z, ee2 = X2 + Z, ne2 = c(Y2 - b * V), un2 = c(et * pt2), cn2 = c(ee2 * ne2), an2 = c(et * ne2), fn2 = c(pt2 * ee2);
      return new d(un2, cn2, fn2, an2);
    }
    subtract(f) {
      return this.add(f.negate());
    }
    wNAF(f) {
      return q.wNAFCached(this, f, d.normalizeZ);
    }
    multiply(f) {
      const b = f;
      ft("scalar", b, j, r);
      const { p: E, f: B } = this.wNAF(b);
      return d.normalizeZ([E, B])[0];
    }
    multiplyUnsafe(f, b = d.ZERO) {
      const E = f;
      return ft("scalar", E, G, r), E === G ? F2 : this.is0() || E === j ? this : q.wNAFCachedUnsafe(this, E, d.normalizeZ, b);
    }
    isSmallOrder() {
      return this.multiplyUnsafe(i).is0();
    }
    isTorsionFree() {
      return q.unsafeLadder(this, r).is0();
    }
    toAffine(f) {
      return v(this, f);
    }
    clearCofactor() {
      const { h: f } = e;
      return f === j ? this : this.multiplyUnsafe(f);
    }
    static fromHex(f, b = false) {
      const { d: E, a: B } = e, C2 = n.BYTES;
      f = W("pointHex", f, C2), Tt("zip215", b);
      const A = f.slice(), U = f[C2 - 1];
      A[C2 - 1] = U & -129;
      const _ = Et(A), T = b ? D2 : n.ORDER;
      ft("pointHex.y", _, G, T);
      const $ = c(_ * _), R = c($ - j), V = c(E * $ - B);
      let { isValid: Y2, value: Z } = p(R, V);
      if (!Y2)
        throw new Error("Point.fromHex: invalid y coordinate");
      const X2 = (Z & j) === j, et = (U & 128) !== 0;
      if (!b && Z === G && et)
        throw new Error("Point.fromHex: x=0 and x_0=1");
      return et !== X2 && (Z = c(-Z)), d.fromAffine({ x: Z, y: _ });
    }
    static fromPrivateKey(f) {
      return O(f).point;
    }
    toRawBytes() {
      const { x: f, y: b } = this.toAffine(), E = Nt(b, n.BYTES);
      return E[E.length - 1] |= f & j ? 128 : 0, E;
    }
    toHex() {
      return Ft(this.toRawBytes());
    }
  }
  d.BASE = new d(e.Gx, e.Gy, j, c(e.Gx * e.Gy)), d.ZERO = new d(G, j, j, G);
  const { BASE: m, ZERO: F2 } = d, q = lr(d, u * 8);
  function z(y) {
    return H(y, r);
  }
  function I(y) {
    return z(Et(y));
  }
  function O(y) {
    const f = n.BYTES;
    y = W("private key", y, f);
    const b = W("hashed private key", s(y), 2 * f), E = w(b.slice(0, f)), B = b.slice(f, 2 * f), C2 = I(E), A = m.multiply(C2), U = A.toRawBytes();
    return { head: E, prefix: B, scalar: C2, point: A, pointBytes: U };
  }
  function ot2(y) {
    return O(y).pointBytes;
  }
  function tt2(y = new Uint8Array(), ...f) {
    const b = ye(...f);
    return I(s(h(b, W("context", y), !!o)));
  }
  function st(y, f, b = {}) {
    y = W("message", y), o && (y = o(y));
    const { prefix: E, scalar: B, pointBytes: C2 } = O(f), A = tt2(b.context, E, y), U = m.multiply(A).toRawBytes(), _ = tt2(b.context, U, C2, y), T = z(A + _ * B);
    ft("signature.s", T, G, r);
    const $ = ye(U, Nt(T, n.BYTES));
    return W("result", $, n.BYTES * 2);
  }
  const at2 = Er;
  function Ct2(y, f, b, E = at2) {
    const { context: B, zip215: C2 } = E, A = n.BYTES;
    y = W("signature", y, 2 * A), f = W("message", f), b = W("publicKey", b, A), C2 !== void 0 && Tt("zip215", C2), o && (f = o(f));
    const U = Et(y.slice(A, 2 * A));
    let _, T, $;
    try {
      _ = d.fromHex(b, C2), T = d.fromHex(y.slice(0, A), C2), $ = m.multiplyUnsafe(U);
    } catch {
      return false;
    }
    if (!C2 && _.isSmallOrder())
      return false;
    const R = tt2(B, T.toRawBytes(), _.toRawBytes(), f);
    return T.add(_.multiplyUnsafe(R)).subtract($).clearCofactor().equals(d.ZERO);
  }
  return m._setWindowSize(8), { CURVE: e, getPublicKey: ot2, sign: st, verify: Ct2, ExtendedPoint: d, utils: { getExtendedPublicKey: O, randomPrivateKey: () => a(n.BYTES), precompute(y = 8, f = d.BASE) {
    return f._setWindowSize(y), f.multiply(BigInt(3)), f;
  } } };
}
BigInt(0), BigInt(1);
var kt = BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949");
var Ue = BigInt("19681161376707505956807079304988542015446066515923890162744021073123829784752");
BigInt(0);
var xr = BigInt(1);
var Te = BigInt(2);
BigInt(3);
var Br = BigInt(5);
var Cr = BigInt(8);
function Ar(t) {
  const e = BigInt(10), n = BigInt(20), r = BigInt(40), o = BigInt(80), s = kt, u = t * t % s * t % s, i = J(u, Te, s) * u % s, D2 = J(i, xr, s) * t % s, c = J(D2, Br, s) * D2 % s, l = J(c, e, s) * c % s, p = J(l, n, s) * l % s, w = J(p, r, s) * p % s, h = J(w, o, s) * w % s, g = J(h, o, s) * w % s, S = J(g, e, s) * c % s;
  return { pow_p_5_8: J(S, Te, s) * t % s, b2: u };
}
function mr(t) {
  return t[0] &= 248, t[31] &= 127, t[31] |= 64, t;
}
function _r(t, e) {
  const n = kt, r = H(e * e * e, n), o = H(r * r * e, n), s = Ar(t * o).pow_p_5_8;
  let a = H(t * r * s, n);
  const u = H(e * a * a, n), i = a, D2 = H(a * Ue, n), c = u === t, l = u === H(-t, n), p = u === H(-t * Ue, n);
  return c && (a = i), (l || p) && (a = D2), ur(a, n) && (a = H(-a, n)), { isValid: c || l, value: a };
}
var Sr = (() => _e(kt, void 0, true))();
var vr = (() => ({ a: BigInt(-1), d: BigInt("37095705934669439343138083508754565189542113879843219016388785533085940283555"), Fp: Sr, n: BigInt("7237005577332262213973186563042994240857116359379907606001950938285454250989"), h: Cr, Gx: BigInt("15112221349535400772501151409588531511454012693041857206046113283949847762202"), Gy: BigInt("46316835694926478169428394003475163141307993866256225615783033603165251855960"), hash: Kn, randomBytes: he, adjustScalarBytes: mr, uvRatio: _r }))();
var Rt = (() => yr(vr))();
var jt = "EdDSA";
var Zt = "JWT";
var ut = ".";
var Dt = "base64url";
var Gt = "utf8";
var xt = "utf8";
var Vt = ":";
var Yt = "did";
var Jt = "key";
var dt = "base58btc";
var Kt = "z";
var Wt = "K36";
var Ne = 32;
function Xt(t) {
  return globalThis.Buffer != null ? new Uint8Array(t.buffer, t.byteOffset, t.byteLength) : t;
}
function Le(t = 0) {
  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? Xt(globalThis.Buffer.allocUnsafe(t)) : new Uint8Array(t);
}
function Oe(t, e) {
  e || (e = t.reduce((o, s) => o + s.length, 0));
  const n = Le(e);
  let r = 0;
  for (const o of t)
    n.set(o, r), r += o.length;
  return Xt(n);
}
function Ir(t, e) {
  if (t.length >= 255)
    throw new TypeError("Alphabet too long");
  for (var n = new Uint8Array(256), r = 0; r < n.length; r++)
    n[r] = 255;
  for (var o = 0; o < t.length; o++) {
    var s = t.charAt(o), a = s.charCodeAt(0);
    if (n[a] !== 255)
      throw new TypeError(s + " is ambiguous");
    n[a] = o;
  }
  var u = t.length, i = t.charAt(0), D2 = Math.log(u) / Math.log(256), c = Math.log(256) / Math.log(u);
  function l(h) {
    if (h instanceof Uint8Array || (ArrayBuffer.isView(h) ? h = new Uint8Array(h.buffer, h.byteOffset, h.byteLength) : Array.isArray(h) && (h = Uint8Array.from(h))), !(h instanceof Uint8Array))
      throw new TypeError("Expected Uint8Array");
    if (h.length === 0)
      return "";
    for (var g = 0, S = 0, v = 0, L = h.length; v !== L && h[v] === 0; )
      v++, g++;
    for (var d = (L - v) * c + 1 >>> 0, m = new Uint8Array(d); v !== L; ) {
      for (var F2 = h[v], q = 0, z = d - 1; (F2 !== 0 || q < S) && z !== -1; z--, q++)
        F2 += 256 * m[z] >>> 0, m[z] = F2 % u >>> 0, F2 = F2 / u >>> 0;
      if (F2 !== 0)
        throw new Error("Non-zero carry");
      S = q, v++;
    }
    for (var I = d - S; I !== d && m[I] === 0; )
      I++;
    for (var O = i.repeat(g); I < d; ++I)
      O += t.charAt(m[I]);
    return O;
  }
  function p(h) {
    if (typeof h != "string")
      throw new TypeError("Expected String");
    if (h.length === 0)
      return new Uint8Array();
    var g = 0;
    if (h[g] !== " ") {
      for (var S = 0, v = 0; h[g] === i; )
        S++, g++;
      for (var L = (h.length - g) * D2 + 1 >>> 0, d = new Uint8Array(L); h[g]; ) {
        var m = n[h.charCodeAt(g)];
        if (m === 255)
          return;
        for (var F2 = 0, q = L - 1; (m !== 0 || F2 < v) && q !== -1; q--, F2++)
          m += u * d[q] >>> 0, d[q] = m % 256 >>> 0, m = m / 256 >>> 0;
        if (m !== 0)
          throw new Error("Non-zero carry");
        v = F2, g++;
      }
      if (h[g] !== " ") {
        for (var z = L - v; z !== L && d[z] === 0; )
          z++;
        for (var I = new Uint8Array(S + (L - z)), O = S; z !== L; )
          I[O++] = d[z++];
        return I;
      }
    }
  }
  function w(h) {
    var g = p(h);
    if (g)
      return g;
    throw new Error(`Non-${e} character`);
  }
  return { encode: l, decodeUnsafe: p, decode: w };
}
var Ur = Ir;
var Tr = Ur;
var He = (t) => {
  if (t instanceof Uint8Array && t.constructor.name === "Uint8Array")
    return t;
  if (t instanceof ArrayBuffer)
    return new Uint8Array(t);
  if (ArrayBuffer.isView(t))
    return new Uint8Array(t.buffer, t.byteOffset, t.byteLength);
  throw new Error("Unknown type, must be binary type");
};
var Fr = (t) => new TextEncoder().encode(t);
var Nr = (t) => new TextDecoder().decode(t);
var Lr = class {
  constructor(e, n, r) {
    this.name = e, this.prefix = n, this.baseEncode = r;
  }
  encode(e) {
    if (e instanceof Uint8Array)
      return `${this.prefix}${this.baseEncode(e)}`;
    throw Error("Unknown type, must be binary type");
  }
};
var Or = class {
  constructor(e, n, r) {
    if (this.name = e, this.prefix = n, n.codePointAt(0) === void 0)
      throw new Error("Invalid prefix character");
    this.prefixCodePoint = n.codePointAt(0), this.baseDecode = r;
  }
  decode(e) {
    if (typeof e == "string") {
      if (e.codePointAt(0) !== this.prefixCodePoint)
        throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(e.slice(this.prefix.length));
    } else
      throw Error("Can only multibase decode strings");
  }
  or(e) {
    return ze(this, e);
  }
};
var Hr = class {
  constructor(e) {
    this.decoders = e;
  }
  or(e) {
    return ze(this, e);
  }
  decode(e) {
    const n = e[0], r = this.decoders[n];
    if (r)
      return r.decode(e);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
};
var ze = (t, e) => new Hr({ ...t.decoders || { [t.prefix]: t }, ...e.decoders || { [e.prefix]: e } });
var zr = class {
  constructor(e, n, r, o) {
    this.name = e, this.prefix = n, this.baseEncode = r, this.baseDecode = o, this.encoder = new Lr(e, n, r), this.decoder = new Or(e, n, o);
  }
  encode(e) {
    return this.encoder.encode(e);
  }
  decode(e) {
    return this.decoder.decode(e);
  }
};
var Bt = ({ name: t, prefix: e, encode: n, decode: r }) => new zr(t, e, n, r);
var ht = ({ prefix: t, name: e, alphabet: n }) => {
  const { encode: r, decode: o } = Tr(n, e);
  return Bt({ prefix: t, name: e, encode: r, decode: (s) => He(o(s)) });
};
var Mr = (t, e, n, r) => {
  const o = {};
  for (let c = 0; c < e.length; ++c)
    o[e[c]] = c;
  let s = t.length;
  for (; t[s - 1] === "="; )
    --s;
  const a = new Uint8Array(s * n / 8 | 0);
  let u = 0, i = 0, D2 = 0;
  for (let c = 0; c < s; ++c) {
    const l = o[t[c]];
    if (l === void 0)
      throw new SyntaxError(`Non-${r} character`);
    i = i << n | l, u += n, u >= 8 && (u -= 8, a[D2++] = 255 & i >> u);
  }
  if (u >= n || 255 & i << 8 - u)
    throw new SyntaxError("Unexpected end of data");
  return a;
};
var qr = (t, e, n) => {
  const r = e[e.length - 1] === "=", o = (1 << n) - 1;
  let s = "", a = 0, u = 0;
  for (let i = 0; i < t.length; ++i)
    for (u = u << 8 | t[i], a += 8; a > n; )
      a -= n, s += e[o & u >> a];
  if (a && (s += e[o & u << n - a]), r)
    for (; s.length * n & 7; )
      s += "=";
  return s;
};
var k = ({ name: t, prefix: e, bitsPerChar: n, alphabet: r }) => Bt({ prefix: e, name: t, encode(o) {
  return qr(o, r, n);
}, decode(o) {
  return Mr(o, r, n, t);
} });
var $r = Bt({ prefix: "\0", name: "identity", encode: (t) => Nr(t), decode: (t) => Fr(t) });
var kr = Object.freeze({ __proto__: null, identity: $r });
var Rr = k({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
var jr = Object.freeze({ __proto__: null, base2: Rr });
var Zr = k({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
var Gr = Object.freeze({ __proto__: null, base8: Zr });
var Vr = ht({ prefix: "9", name: "base10", alphabet: "0123456789" });
var Yr = Object.freeze({ __proto__: null, base10: Vr });
var Jr = k({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 });
var Kr = k({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
var Wr = Object.freeze({ __proto__: null, base16: Jr, base16upper: Kr });
var Xr = k({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 });
var Pr = k({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 });
var Qr = k({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 });
var to = k({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 });
var eo = k({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 });
var no = k({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 });
var ro = k({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 });
var oo = k({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 });
var so = k({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
var io = Object.freeze({ __proto__: null, base32: Xr, base32upper: Pr, base32pad: Qr, base32padupper: to, base32hex: eo, base32hexupper: no, base32hexpad: ro, base32hexpadupper: oo, base32z: so });
var uo = ht({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" });
var co = ht({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
var ao = Object.freeze({ __proto__: null, base36: uo, base36upper: co });
var fo = ht({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" });
var Do = ht({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
var ho = Object.freeze({ __proto__: null, base58btc: fo, base58flickr: Do });
var lo = k({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 });
var bo = k({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 });
var po = k({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 });
var wo = k({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
var Eo = Object.freeze({ __proto__: null, base64: lo, base64pad: bo, base64url: po, base64urlpad: wo });
var Me = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var go = Me.reduce((t, e, n) => (t[n] = e, t), []);
var yo = Me.reduce((t, e, n) => (t[e.codePointAt(0)] = n, t), []);
function xo(t) {
  return t.reduce((e, n) => (e += go[n], e), "");
}
function Bo(t) {
  const e = [];
  for (const n of t) {
    const r = yo[n.codePointAt(0)];
    if (r === void 0)
      throw new Error(`Non-base256emoji character: ${n}`);
    e.push(r);
  }
  return new Uint8Array(e);
}
var Co = Bt({ prefix: "🚀", name: "base256emoji", encode: xo, decode: Bo });
var Ao = Object.freeze({ __proto__: null, base256emoji: Co });
var mo = $e;
var qe = 128;
var _o = 127;
var So = ~_o;
var vo = Math.pow(2, 31);
function $e(t, e, n) {
  e = e || [], n = n || 0;
  for (var r = n; t >= vo; )
    e[n++] = t & 255 | qe, t /= 128;
  for (; t & So; )
    e[n++] = t & 255 | qe, t >>>= 7;
  return e[n] = t | 0, $e.bytes = n - r + 1, e;
}
var Io = Pt;
var Uo = 128;
var ke = 127;
function Pt(t, r) {
  var n = 0, r = r || 0, o = 0, s = r, a, u = t.length;
  do {
    if (s >= u)
      throw Pt.bytes = 0, new RangeError("Could not decode varint");
    a = t[s++], n += o < 28 ? (a & ke) << o : (a & ke) * Math.pow(2, o), o += 7;
  } while (a >= Uo);
  return Pt.bytes = s - r, n;
}
var To = Math.pow(2, 7);
var Fo = Math.pow(2, 14);
var No = Math.pow(2, 21);
var Lo = Math.pow(2, 28);
var Oo = Math.pow(2, 35);
var Ho = Math.pow(2, 42);
var zo = Math.pow(2, 49);
var Mo = Math.pow(2, 56);
var qo = Math.pow(2, 63);
var $o = function(t) {
  return t < To ? 1 : t < Fo ? 2 : t < No ? 3 : t < Lo ? 4 : t < Oo ? 5 : t < Ho ? 6 : t < zo ? 7 : t < Mo ? 8 : t < qo ? 9 : 10;
};
var ko = { encode: mo, decode: Io, encodingLength: $o };
var Re = ko;
var je = (t, e, n = 0) => (Re.encode(t, e, n), e);
var Ze = (t) => Re.encodingLength(t);
var Qt = (t, e) => {
  const n = e.byteLength, r = Ze(t), o = r + Ze(n), s = new Uint8Array(o + n);
  return je(t, s, 0), je(n, s, r), s.set(e, o), new Ro(t, n, e, s);
};
var Ro = class {
  constructor(e, n, r, o) {
    this.code = e, this.size = n, this.digest = r, this.bytes = o;
  }
};
var Ge = ({ name: t, code: e, encode: n }) => new jo(t, e, n);
var jo = class {
  constructor(e, n, r) {
    this.name = e, this.code = n, this.encode = r;
  }
  digest(e) {
    if (e instanceof Uint8Array) {
      const n = this.encode(e);
      return n instanceof Uint8Array ? Qt(this.code, n) : n.then((r) => Qt(this.code, r));
    } else
      throw Error("Unknown type, must be binary type");
  }
};
var Ve = (t) => async (e) => new Uint8Array(await crypto.subtle.digest(t, e));
var Zo = Ge({ name: "sha2-256", code: 18, encode: Ve("SHA-256") });
var Go = Ge({ name: "sha2-512", code: 19, encode: Ve("SHA-512") });
var Vo = Object.freeze({ __proto__: null, sha256: Zo, sha512: Go });
var Ye = 0;
var Yo = "identity";
var Je = He;
var Jo = (t) => Qt(Ye, Je(t));
var Ko = { code: Ye, name: Yo, encode: Je, digest: Jo };
var Wo = Object.freeze({ __proto__: null, identity: Ko });
new TextEncoder(), new TextDecoder();
var Ke = { ...kr, ...jr, ...Gr, ...Yr, ...Wr, ...io, ...ao, ...ho, ...Eo, ...Ao };
({ ...Vo, ...Wo });
function We(t, e, n, r) {
  return { name: t, prefix: e, encoder: { name: t, prefix: e, encode: n }, decoder: { decode: r } };
}
var Xe = We("utf8", "u", (t) => "u" + new TextDecoder("utf8").decode(t), (t) => new TextEncoder().encode(t.substring(1)));
var te = We("ascii", "a", (t) => {
  let e = "a";
  for (let n = 0; n < t.length; n++)
    e += String.fromCharCode(t[n]);
  return e;
}, (t) => {
  t = t.substring(1);
  const e = Le(t.length);
  for (let n = 0; n < t.length; n++)
    e[n] = t.charCodeAt(n);
  return e;
});
var Pe = { utf8: Xe, "utf-8": Xe, hex: Ke.base16, latin1: te, ascii: te, binary: te, ...Ke };
function ct(t, e = "utf8") {
  const n = Pe[e];
  if (!n)
    throw new Error(`Unsupported encoding "${e}"`);
  return (e === "utf8" || e === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(t.buffer, t.byteOffset, t.byteLength).toString("utf8") : n.encoder.encode(t).substring(1);
}
function rt(t, e = "utf8") {
  const n = Pe[e];
  if (!n)
    throw new Error(`Unsupported encoding "${e}"`);
  return (e === "utf8" || e === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? Xt(globalThis.Buffer.from(t, "utf-8")) : n.decoder.decode(`${n.prefix}${t}`);
}
function lt(t) {
  return safeJsonParse(ct(rt(t, Dt), Gt));
}
function bt(t) {
  return ct(rt(safeJsonStringify(t), Gt), Dt);
}
function Qe(t) {
  const e = rt(Wt, dt), n = Kt + ct(Oe([e, t]), dt);
  return [Yt, Jt, n].join(Vt);
}
function en(t) {
  return ct(t, Dt);
}
function nn(t) {
  return rt(t, Dt);
}
function rn(t) {
  return rt([bt(t.header), bt(t.payload)].join(ut), xt);
}
function on(t) {
  return [bt(t.header), bt(t.payload), en(t.signature)].join(ut);
}
function sn(t) {
  const e = t.split(ut), n = lt(e[0]), r = lt(e[1]), o = nn(e[2]), s = rt(e.slice(0, 2).join(ut), xt);
  return { header: n, payload: r, signature: o, data: s };
}
function Po(t = he(Ne)) {
  const e = Rt.getPublicKey(t);
  return { secretKey: Oe([t, e]), publicKey: e };
}
async function Qo(t, e, n, r, o = (0, import_time.fromMiliseconds)(Date.now())) {
  const s = { alg: jt, typ: Zt }, a = Qe(r.publicKey), u = o + n, i = { iss: a, sub: t, aud: e, iat: o, exp: u }, D2 = rn({ header: s, payload: i }), c = Rt.sign(D2, r.secretKey.slice(0, 32));
  return on({ header: s, payload: i, signature: c });
}

// node_modules/.pnpm/uint8arrays@3.1.1/node_modules/uint8arrays/esm/src/util/as-uint8array.js
function asUint8Array(buf) {
  if (globalThis.Buffer != null) {
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }
  return buf;
}

// node_modules/.pnpm/uint8arrays@3.1.1/node_modules/uint8arrays/esm/src/alloc.js
function allocUnsafe(size4 = 0) {
  if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {
    return asUint8Array(globalThis.Buffer.allocUnsafe(size4));
  }
  return new Uint8Array(size4);
}

// node_modules/.pnpm/uint8arrays@3.1.1/node_modules/uint8arrays/esm/src/concat.js
function concat3(arrays, length2) {
  if (!length2) {
    length2 = arrays.reduce((acc, curr) => acc + curr.length, 0);
  }
  const output = allocUnsafe(length2);
  let offset = 0;
  for (const arr of arrays) {
    output.set(arr, offset);
    offset += arr.length;
  }
  return asUint8Array(output);
}

// node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/identity.js
var identity_exports = {};
__export(identity_exports, {
  identity: () => identity
});

// node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/vendor/base-x.js
function base2(ALPHABET2, name2) {
  if (ALPHABET2.length >= 255) {
    throw new TypeError("Alphabet too long");
  }
  var BASE_MAP = new Uint8Array(256);
  for (var j2 = 0; j2 < BASE_MAP.length; j2++) {
    BASE_MAP[j2] = 255;
  }
  for (var i = 0; i < ALPHABET2.length; i++) {
    var x2 = ALPHABET2.charAt(i);
    var xc2 = x2.charCodeAt(0);
    if (BASE_MAP[xc2] !== 255) {
      throw new TypeError(x2 + " is ambiguous");
    }
    BASE_MAP[xc2] = i;
  }
  var BASE = ALPHABET2.length;
  var LEADER = ALPHABET2.charAt(0);
  var FACTOR = Math.log(BASE) / Math.log(256);
  var iFACTOR = Math.log(256) / Math.log(BASE);
  function encode9(source) {
    if (source instanceof Uint8Array)
      ;
    else if (ArrayBuffer.isView(source)) {
      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
    } else if (Array.isArray(source)) {
      source = Uint8Array.from(source);
    }
    if (!(source instanceof Uint8Array)) {
      throw new TypeError("Expected Uint8Array");
    }
    if (source.length === 0) {
      return "";
    }
    var zeroes = 0;
    var length2 = 0;
    var pbegin = 0;
    var pend = source.length;
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    }
    var size4 = (pend - pbegin) * iFACTOR + 1 >>> 0;
    var b58 = new Uint8Array(size4);
    while (pbegin !== pend) {
      var carry = source[pbegin];
      var i2 = 0;
      for (var it1 = size4 - 1; (carry !== 0 || i2 < length2) && it1 !== -1; it1--, i2++) {
        carry += 256 * b58[it1] >>> 0;
        b58[it1] = carry % BASE >>> 0;
        carry = carry / BASE >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i2;
      pbegin++;
    }
    var it22 = size4 - length2;
    while (it22 !== size4 && b58[it22] === 0) {
      it22++;
    }
    var str = LEADER.repeat(zeroes);
    for (; it22 < size4; ++it22) {
      str += ALPHABET2.charAt(b58[it22]);
    }
    return str;
  }
  function decodeUnsafe(source) {
    if (typeof source !== "string") {
      throw new TypeError("Expected String");
    }
    if (source.length === 0) {
      return new Uint8Array();
    }
    var psz = 0;
    if (source[psz] === " ") {
      return;
    }
    var zeroes = 0;
    var length2 = 0;
    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    }
    var size4 = (source.length - psz) * FACTOR + 1 >>> 0;
    var b256 = new Uint8Array(size4);
    while (source[psz]) {
      var carry = BASE_MAP[source.charCodeAt(psz)];
      if (carry === 255) {
        return;
      }
      var i2 = 0;
      for (var it3 = size4 - 1; (carry !== 0 || i2 < length2) && it3 !== -1; it3--, i2++) {
        carry += BASE * b256[it3] >>> 0;
        b256[it3] = carry % 256 >>> 0;
        carry = carry / 256 >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i2;
      psz++;
    }
    if (source[psz] === " ") {
      return;
    }
    var it4 = size4 - length2;
    while (it4 !== size4 && b256[it4] === 0) {
      it4++;
    }
    var vch = new Uint8Array(zeroes + (size4 - it4));
    var j3 = zeroes;
    while (it4 !== size4) {
      vch[j3++] = b256[it4++];
    }
    return vch;
  }
  function decode8(string2) {
    var buffer = decodeUnsafe(string2);
    if (buffer) {
      return buffer;
    }
    throw new Error(`Non-${name2} character`);
  }
  return {
    encode: encode9,
    decodeUnsafe,
    decode: decode8
  };
}
var src = base2;
var _brrp__multiformats_scope_baseX = src;
var base_x_default = _brrp__multiformats_scope_baseX;

// node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bytes.js
var empty = new Uint8Array(0);
var equals = (aa2, bb) => {
  if (aa2 === bb)
    return true;
  if (aa2.byteLength !== bb.byteLength) {
    return false;
  }
  for (let ii2 = 0; ii2 < aa2.byteLength; ii2++) {
    if (aa2[ii2] !== bb[ii2]) {
      return false;
    }
  }
  return true;
};
var coerce = (o) => {
  if (o instanceof Uint8Array && o.constructor.name === "Uint8Array")
    return o;
  if (o instanceof ArrayBuffer)
    return new Uint8Array(o);
  if (ArrayBuffer.isView(o)) {
    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
  }
  throw new Error("Unknown type, must be binary type");
};
var fromString3 = (str) => new TextEncoder().encode(str);
var toString2 = (b) => new TextDecoder().decode(b);

// node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base.js
var Encoder2 = class {
  constructor(name2, prefix, baseEncode) {
    this.name = name2;
    this.prefix = prefix;
    this.baseEncode = baseEncode;
  }
  encode(bytes) {
    if (bytes instanceof Uint8Array) {
      return `${this.prefix}${this.baseEncode(bytes)}`;
    } else {
      throw Error("Unknown type, must be binary type");
    }
  }
};
var Decoder2 = class {
  constructor(name2, prefix, baseDecode) {
    this.name = name2;
    this.prefix = prefix;
    if (prefix.codePointAt(0) === void 0) {
      throw new Error("Invalid prefix character");
    }
    this.prefixCodePoint = prefix.codePointAt(0);
    this.baseDecode = baseDecode;
  }
  decode(text) {
    if (typeof text === "string") {
      if (text.codePointAt(0) !== this.prefixCodePoint) {
        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      }
      return this.baseDecode(text.slice(this.prefix.length));
    } else {
      throw Error("Can only multibase decode strings");
    }
  }
  or(decoder) {
    return or2(this, decoder);
  }
};
var ComposedDecoder = class {
  constructor(decoders) {
    this.decoders = decoders;
  }
  or(decoder) {
    return or2(this, decoder);
  }
  decode(input) {
    const prefix = input[0];
    const decoder = this.decoders[prefix];
    if (decoder) {
      return decoder.decode(input);
    } else {
      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
    }
  }
};
var or2 = (left, right) => new ComposedDecoder({
  ...left.decoders || { [left.prefix]: left },
  ...right.decoders || { [right.prefix]: right }
});
var Codec = class {
  constructor(name2, prefix, baseEncode, baseDecode) {
    this.name = name2;
    this.prefix = prefix;
    this.baseEncode = baseEncode;
    this.baseDecode = baseDecode;
    this.encoder = new Encoder2(name2, prefix, baseEncode);
    this.decoder = new Decoder2(name2, prefix, baseDecode);
  }
  encode(input) {
    return this.encoder.encode(input);
  }
  decode(input) {
    return this.decoder.decode(input);
  }
};
var from6 = ({ name: name2, prefix, encode: encode9, decode: decode8 }) => new Codec(name2, prefix, encode9, decode8);
var baseX = ({ prefix, name: name2, alphabet: alphabet3 }) => {
  const { encode: encode9, decode: decode8 } = base_x_default(alphabet3, name2);
  return from6({
    prefix,
    name: name2,
    encode: encode9,
    decode: (text) => coerce(decode8(text))
  });
};
var decode3 = (string2, alphabet3, bitsPerChar, name2) => {
  const codes = {};
  for (let i = 0; i < alphabet3.length; ++i) {
    codes[alphabet3[i]] = i;
  }
  let end = string2.length;
  while (string2[end - 1] === "=") {
    --end;
  }
  const out = new Uint8Array(end * bitsPerChar / 8 | 0);
  let bits = 0;
  let buffer = 0;
  let written = 0;
  for (let i = 0; i < end; ++i) {
    const value = codes[string2[i]];
    if (value === void 0) {
      throw new SyntaxError(`Non-${name2} character`);
    }
    buffer = buffer << bitsPerChar | value;
    bits += bitsPerChar;
    if (bits >= 8) {
      bits -= 8;
      out[written++] = 255 & buffer >> bits;
    }
  }
  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {
    throw new SyntaxError("Unexpected end of data");
  }
  return out;
};
var encode5 = (data, alphabet3, bitsPerChar) => {
  const pad2 = alphabet3[alphabet3.length - 1] === "=";
  const mask = (1 << bitsPerChar) - 1;
  let out = "";
  let bits = 0;
  let buffer = 0;
  for (let i = 0; i < data.length; ++i) {
    buffer = buffer << 8 | data[i];
    bits += 8;
    while (bits > bitsPerChar) {
      bits -= bitsPerChar;
      out += alphabet3[mask & buffer >> bits];
    }
  }
  if (bits) {
    out += alphabet3[mask & buffer << bitsPerChar - bits];
  }
  if (pad2) {
    while (out.length * bitsPerChar & 7) {
      out += "=";
    }
  }
  return out;
};
var rfc4648 = ({ name: name2, prefix, bitsPerChar, alphabet: alphabet3 }) => {
  return from6({
    prefix,
    name: name2,
    encode(input) {
      return encode5(input, alphabet3, bitsPerChar);
    },
    decode(input) {
      return decode3(input, alphabet3, bitsPerChar, name2);
    }
  });
};

// node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/identity.js
var identity = from6({
  prefix: "\0",
  name: "identity",
  encode: (buf) => toString2(buf),
  decode: (str) => fromString3(str)
});

// node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base2.js
var base2_exports = {};
__export(base2_exports, {
  base2: () => base22
});
var base22 = rfc4648({
  prefix: "0",
  name: "base2",
  alphabet: "01",
  bitsPerChar: 1
});

// node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base8.js
var base8_exports = {};
__export(base8_exports, {
  base8: () => base8
});
var base8 = rfc4648({
  prefix: "7",
  name: "base8",
  alphabet: "01234567",
  bitsPerChar: 3
});

// node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base10.js
var base10_exports = {};
__export(base10_exports, {
  base10: () => base10
});
var base10 = baseX({
  prefix: "9",
  name: "base10",
  alphabet: "0123456789"
});

// node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base16.js
var base16_exports = {};
__export(base16_exports, {
  base16: () => base162,
  base16upper: () => base16upper
});
var base162 = rfc4648({
  prefix: "f",
  name: "base16",
  alphabet: "0123456789abcdef",
  bitsPerChar: 4
});
var base16upper = rfc4648({
  prefix: "F",
  name: "base16upper",
  alphabet: "0123456789ABCDEF",
  bitsPerChar: 4
});

// node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base32.js
var base32_exports = {};
__export(base32_exports, {
  base32: () => base322,
  base32hex: () => base32hex2,
  base32hexpad: () => base32hexpad,
  base32hexpadupper: () => base32hexpadupper,
  base32hexupper: () => base32hexupper,
  base32pad: () => base32pad,
  base32padupper: () => base32padupper,
  base32upper: () => base32upper,
  base32z: () => base32z
});
var base322 = rfc4648({
  prefix: "b",
  name: "base32",
  alphabet: "abcdefghijklmnopqrstuvwxyz234567",
  bitsPerChar: 5
});
var base32upper = rfc4648({
  prefix: "B",
  name: "base32upper",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
  bitsPerChar: 5
});
var base32pad = rfc4648({
  prefix: "c",
  name: "base32pad",
  alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
  bitsPerChar: 5
});
var base32padupper = rfc4648({
  prefix: "C",
  name: "base32padupper",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
  bitsPerChar: 5
});
var base32hex2 = rfc4648({
  prefix: "v",
  name: "base32hex",
  alphabet: "0123456789abcdefghijklmnopqrstuv",
  bitsPerChar: 5
});
var base32hexupper = rfc4648({
  prefix: "V",
  name: "base32hexupper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
  bitsPerChar: 5
});
var base32hexpad = rfc4648({
  prefix: "t",
  name: "base32hexpad",
  alphabet: "0123456789abcdefghijklmnopqrstuv=",
  bitsPerChar: 5
});
var base32hexpadupper = rfc4648({
  prefix: "T",
  name: "base32hexpadupper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
  bitsPerChar: 5
});
var base32z = rfc4648({
  prefix: "h",
  name: "base32z",
  alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
  bitsPerChar: 5
});

// node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base36.js
var base36_exports = {};
__export(base36_exports, {
  base36: () => base36,
  base36upper: () => base36upper
});
var base36 = baseX({
  prefix: "k",
  name: "base36",
  alphabet: "0123456789abcdefghijklmnopqrstuvwxyz"
});
var base36upper = baseX({
  prefix: "K",
  name: "base36upper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
});

// node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base58.js
var base58_exports = {};
__export(base58_exports, {
  base58btc: () => base58btc,
  base58flickr: () => base58flickr2
});
var base58btc = baseX({
  name: "base58btc",
  prefix: "z",
  alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
});
var base58flickr2 = baseX({
  name: "base58flickr",
  prefix: "Z",
  alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
});

// node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base64.js
var base64_exports = {};
__export(base64_exports, {
  base64: () => base642,
  base64pad: () => base64pad,
  base64url: () => base64url2,
  base64urlpad: () => base64urlpad
});
var base642 = rfc4648({
  prefix: "m",
  name: "base64",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
  bitsPerChar: 6
});
var base64pad = rfc4648({
  prefix: "M",
  name: "base64pad",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
  bitsPerChar: 6
});
var base64url2 = rfc4648({
  prefix: "u",
  name: "base64url",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
  bitsPerChar: 6
});
var base64urlpad = rfc4648({
  prefix: "U",
  name: "base64urlpad",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",
  bitsPerChar: 6
});

// node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base256emoji.js
var base256emoji_exports = {};
__export(base256emoji_exports, {
  base256emoji: () => base256emoji
});
var alphabet2 = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var alphabetBytesToChars = alphabet2.reduce((p, c, i) => {
  p[i] = c;
  return p;
}, []);
var alphabetCharsToBytes = alphabet2.reduce((p, c, i) => {
  p[c.codePointAt(0)] = i;
  return p;
}, []);
function encode6(data) {
  return data.reduce((p, c) => {
    p += alphabetBytesToChars[c];
    return p;
  }, "");
}
function decode4(str) {
  const byts = [];
  for (const char of str) {
    const byt = alphabetCharsToBytes[char.codePointAt(0)];
    if (byt === void 0) {
      throw new Error(`Non-base256emoji character: ${char}`);
    }
    byts.push(byt);
  }
  return new Uint8Array(byts);
}
var base256emoji = from6({
  prefix: "🚀",
  name: "base256emoji",
  encode: encode6,
  decode: decode4
});

// node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/hashes/sha2-browser.js
var sha2_browser_exports = {};
__export(sha2_browser_exports, {
  sha256: () => sha2564,
  sha512: () => sha512
});

// node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/vendor/varint.js
var encode_1 = encode7;
var MSB = 128;
var REST = 127;
var MSBALL = ~REST;
var INT = Math.pow(2, 31);
function encode7(num, out, offset) {
  out = out || [];
  offset = offset || 0;
  var oldOffset = offset;
  while (num >= INT) {
    out[offset++] = num & 255 | MSB;
    num /= 128;
  }
  while (num & MSBALL) {
    out[offset++] = num & 255 | MSB;
    num >>>= 7;
  }
  out[offset] = num | 0;
  encode7.bytes = offset - oldOffset + 1;
  return out;
}
var decode5 = read;
var MSB$1 = 128;
var REST$1 = 127;
function read(buf, offset) {
  var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;
  do {
    if (counter >= l) {
      read.bytes = 0;
      throw new RangeError("Could not decode varint");
    }
    b = buf[counter++];
    res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);
    shift += 7;
  } while (b >= MSB$1);
  read.bytes = counter - offset;
  return res;
}
var N1 = Math.pow(2, 7);
var N2 = Math.pow(2, 14);
var N3 = Math.pow(2, 21);
var N4 = Math.pow(2, 28);
var N5 = Math.pow(2, 35);
var N6 = Math.pow(2, 42);
var N7 = Math.pow(2, 49);
var N8 = Math.pow(2, 56);
var N9 = Math.pow(2, 63);
var length = function(value) {
  return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
};
var varint = {
  encode: encode_1,
  decode: decode5,
  encodingLength: length
};
var _brrp_varint = varint;
var varint_default = _brrp_varint;

// node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/varint.js
var decode6 = (data, offset = 0) => {
  const code2 = varint_default.decode(data, offset);
  return [
    code2,
    varint_default.decode.bytes
  ];
};
var encodeTo = (int, target, offset = 0) => {
  varint_default.encode(int, target, offset);
  return target;
};
var encodingLength = (int) => {
  return varint_default.encodingLength(int);
};

// node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/hashes/digest.js
var create2 = (code2, digest2) => {
  const size4 = digest2.byteLength;
  const sizeOffset = encodingLength(code2);
  const digestOffset = sizeOffset + encodingLength(size4);
  const bytes = new Uint8Array(digestOffset + size4);
  encodeTo(code2, bytes, 0);
  encodeTo(size4, bytes, sizeOffset);
  bytes.set(digest2, digestOffset);
  return new Digest(code2, size4, digest2, bytes);
};
var decode7 = (multihash) => {
  const bytes = coerce(multihash);
  const [code2, sizeOffset] = decode6(bytes);
  const [size4, digestOffset] = decode6(bytes.subarray(sizeOffset));
  const digest2 = bytes.subarray(sizeOffset + digestOffset);
  if (digest2.byteLength !== size4) {
    throw new Error("Incorrect length");
  }
  return new Digest(code2, size4, digest2, bytes);
};
var equals2 = (a, b) => {
  if (a === b) {
    return true;
  } else {
    return a.code === b.code && a.size === b.size && equals(a.bytes, b.bytes);
  }
};
var Digest = class {
  constructor(code2, size4, digest2, bytes) {
    this.code = code2;
    this.size = size4;
    this.digest = digest2;
    this.bytes = bytes;
  }
};

// node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/hashes/hasher.js
var from7 = ({ name: name2, code: code2, encode: encode9 }) => new Hasher(name2, code2, encode9);
var Hasher = class {
  constructor(name2, code2, encode9) {
    this.name = name2;
    this.code = code2;
    this.encode = encode9;
  }
  digest(input) {
    if (input instanceof Uint8Array) {
      const result = this.encode(input);
      return result instanceof Uint8Array ? create2(this.code, result) : result.then((digest2) => create2(this.code, digest2));
    } else {
      throw Error("Unknown type, must be binary type");
    }
  }
};

// node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/hashes/sha2-browser.js
var sha = (name2) => async (data) => new Uint8Array(await crypto.subtle.digest(name2, data));
var sha2564 = from7({
  name: "sha2-256",
  code: 18,
  encode: sha("SHA-256")
});
var sha512 = from7({
  name: "sha2-512",
  code: 19,
  encode: sha("SHA-512")
});

// node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/hashes/identity.js
var identity_exports2 = {};
__export(identity_exports2, {
  identity: () => identity2
});
var code = 0;
var name = "identity";
var encode8 = coerce;
var digest = (input) => create2(code, encode8(input));
var identity2 = {
  code,
  name,
  encode: encode8,
  digest
};

// node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/codecs/json.js
var textEncoder = new TextEncoder();
var textDecoder = new TextDecoder();

// node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/cid.js
var CID = class _CID {
  constructor(version2, code2, multihash, bytes) {
    this.code = code2;
    this.version = version2;
    this.multihash = multihash;
    this.bytes = bytes;
    this.byteOffset = bytes.byteOffset;
    this.byteLength = bytes.byteLength;
    this.asCID = this;
    this._baseCache = /* @__PURE__ */ new Map();
    Object.defineProperties(this, {
      byteOffset: hidden,
      byteLength: hidden,
      code: readonly,
      version: readonly,
      multihash: readonly,
      bytes: readonly,
      _baseCache: hidden,
      asCID: hidden
    });
  }
  toV0() {
    switch (this.version) {
      case 0: {
        return this;
      }
      default: {
        const { code: code2, multihash } = this;
        if (code2 !== DAG_PB_CODE) {
          throw new Error("Cannot convert a non dag-pb CID to CIDv0");
        }
        if (multihash.code !== SHA_256_CODE) {
          throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
        }
        return _CID.createV0(multihash);
      }
    }
  }
  toV1() {
    switch (this.version) {
      case 0: {
        const { code: code2, digest: digest2 } = this.multihash;
        const multihash = create2(code2, digest2);
        return _CID.createV1(this.code, multihash);
      }
      case 1: {
        return this;
      }
      default: {
        throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
      }
    }
  }
  equals(other) {
    return other && this.code === other.code && this.version === other.version && equals2(this.multihash, other.multihash);
  }
  toString(base3) {
    const { bytes, version: version2, _baseCache } = this;
    switch (version2) {
      case 0:
        return toStringV0(bytes, _baseCache, base3 || base58btc.encoder);
      default:
        return toStringV1(bytes, _baseCache, base3 || base322.encoder);
    }
  }
  toJSON() {
    return {
      code: this.code,
      version: this.version,
      hash: this.multihash.bytes
    };
  }
  get [Symbol.toStringTag]() {
    return "CID";
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return "CID(" + this.toString() + ")";
  }
  static isCID(value) {
    deprecate(/^0\.0/, IS_CID_DEPRECATION);
    return !!(value && (value[cidSymbol] || value.asCID === value));
  }
  get toBaseEncodedString() {
    throw new Error("Deprecated, use .toString()");
  }
  get codec() {
    throw new Error('"codec" property is deprecated, use integer "code" property instead');
  }
  get buffer() {
    throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead");
  }
  get multibaseName() {
    throw new Error('"multibaseName" property is deprecated');
  }
  get prefix() {
    throw new Error('"prefix" property is deprecated');
  }
  static asCID(value) {
    if (value instanceof _CID) {
      return value;
    } else if (value != null && value.asCID === value) {
      const { version: version2, code: code2, multihash, bytes } = value;
      return new _CID(version2, code2, multihash, bytes || encodeCID(version2, code2, multihash.bytes));
    } else if (value != null && value[cidSymbol] === true) {
      const { version: version2, multihash, code: code2 } = value;
      const digest2 = decode7(multihash);
      return _CID.create(version2, code2, digest2);
    } else {
      return null;
    }
  }
  static create(version2, code2, digest2) {
    if (typeof code2 !== "number") {
      throw new Error("String codecs are no longer supported");
    }
    switch (version2) {
      case 0: {
        if (code2 !== DAG_PB_CODE) {
          throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);
        } else {
          return new _CID(version2, code2, digest2, digest2.bytes);
        }
      }
      case 1: {
        const bytes = encodeCID(version2, code2, digest2.bytes);
        return new _CID(version2, code2, digest2, bytes);
      }
      default: {
        throw new Error("Invalid version");
      }
    }
  }
  static createV0(digest2) {
    return _CID.create(0, DAG_PB_CODE, digest2);
  }
  static createV1(code2, digest2) {
    return _CID.create(1, code2, digest2);
  }
  static decode(bytes) {
    const [cid, remainder] = _CID.decodeFirst(bytes);
    if (remainder.length) {
      throw new Error("Incorrect length");
    }
    return cid;
  }
  static decodeFirst(bytes) {
    const specs = _CID.inspectBytes(bytes);
    const prefixSize = specs.size - specs.multihashSize;
    const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));
    if (multihashBytes.byteLength !== specs.multihashSize) {
      throw new Error("Incorrect length");
    }
    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
    const digest2 = new Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
    const cid = specs.version === 0 ? _CID.createV0(digest2) : _CID.createV1(specs.codec, digest2);
    return [
      cid,
      bytes.subarray(specs.size)
    ];
  }
  static inspectBytes(initialBytes) {
    let offset = 0;
    const next = () => {
      const [i, length2] = decode6(initialBytes.subarray(offset));
      offset += length2;
      return i;
    };
    let version2 = next();
    let codec = DAG_PB_CODE;
    if (version2 === 18) {
      version2 = 0;
      offset = 0;
    } else if (version2 === 1) {
      codec = next();
    }
    if (version2 !== 0 && version2 !== 1) {
      throw new RangeError(`Invalid CID version ${version2}`);
    }
    const prefixSize = offset;
    const multihashCode = next();
    const digestSize = next();
    const size4 = offset + digestSize;
    const multihashSize = size4 - prefixSize;
    return {
      version: version2,
      codec,
      multihashCode,
      digestSize,
      multihashSize,
      size: size4
    };
  }
  static parse(source, base3) {
    const [prefix, bytes] = parseCIDtoBytes(source, base3);
    const cid = _CID.decode(bytes);
    cid._baseCache.set(prefix, source);
    return cid;
  }
};
var parseCIDtoBytes = (source, base3) => {
  switch (source[0]) {
    case "Q": {
      const decoder = base3 || base58btc;
      return [
        base58btc.prefix,
        decoder.decode(`${base58btc.prefix}${source}`)
      ];
    }
    case base58btc.prefix: {
      const decoder = base3 || base58btc;
      return [
        base58btc.prefix,
        decoder.decode(source)
      ];
    }
    case base322.prefix: {
      const decoder = base3 || base322;
      return [
        base322.prefix,
        decoder.decode(source)
      ];
    }
    default: {
      if (base3 == null) {
        throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
      }
      return [
        source[0],
        base3.decode(source)
      ];
    }
  }
};
var toStringV0 = (bytes, cache, base3) => {
  const { prefix } = base3;
  if (prefix !== base58btc.prefix) {
    throw Error(`Cannot string encode V0 in ${base3.name} encoding`);
  }
  const cid = cache.get(prefix);
  if (cid == null) {
    const cid2 = base3.encode(bytes).slice(1);
    cache.set(prefix, cid2);
    return cid2;
  } else {
    return cid;
  }
};
var toStringV1 = (bytes, cache, base3) => {
  const { prefix } = base3;
  const cid = cache.get(prefix);
  if (cid == null) {
    const cid2 = base3.encode(bytes);
    cache.set(prefix, cid2);
    return cid2;
  } else {
    return cid;
  }
};
var DAG_PB_CODE = 112;
var SHA_256_CODE = 18;
var encodeCID = (version2, code2, multihash) => {
  const codeOffset = encodingLength(version2);
  const hashOffset = codeOffset + encodingLength(code2);
  const bytes = new Uint8Array(hashOffset + multihash.byteLength);
  encodeTo(version2, bytes, 0);
  encodeTo(code2, bytes, codeOffset);
  bytes.set(multihash, hashOffset);
  return bytes;
};
var cidSymbol = Symbol.for("@ipld/js-cid/CID");
var readonly = {
  writable: false,
  configurable: false,
  enumerable: true
};
var hidden = {
  writable: false,
  enumerable: false,
  configurable: false
};
var version = "0.0.0-dev";
var deprecate = (range, message) => {
  if (range.test(version)) {
    console.warn(message);
  } else {
    throw new Error(message);
  }
};
var IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;

// node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/basics.js
var bases = {
  ...identity_exports,
  ...base2_exports,
  ...base8_exports,
  ...base10_exports,
  ...base16_exports,
  ...base32_exports,
  ...base36_exports,
  ...base58_exports,
  ...base64_exports,
  ...base256emoji_exports
};
var hashes = {
  ...sha2_browser_exports,
  ...identity_exports2
};

// node_modules/.pnpm/uint8arrays@3.1.1/node_modules/uint8arrays/esm/src/util/bases.js
function createCodec(name2, prefix, encode9, decode8) {
  return {
    name: name2,
    prefix,
    encoder: {
      name: name2,
      prefix,
      encode: encode9
    },
    decoder: { decode: decode8 }
  };
}
var string = createCodec("utf8", "u", (buf) => {
  const decoder = new TextDecoder("utf8");
  return "u" + decoder.decode(buf);
}, (str) => {
  const encoder = new TextEncoder();
  return encoder.encode(str.substring(1));
});
var ascii = createCodec("ascii", "a", (buf) => {
  let string2 = "a";
  for (let i = 0; i < buf.length; i++) {
    string2 += String.fromCharCode(buf[i]);
  }
  return string2;
}, (str) => {
  str = str.substring(1);
  const buf = allocUnsafe(str.length);
  for (let i = 0; i < str.length; i++) {
    buf[i] = str.charCodeAt(i);
  }
  return buf;
});
var BASES = {
  utf8: string,
  "utf-8": string,
  hex: bases.base16,
  latin1: ascii,
  ascii,
  binary: ascii,
  ...bases
};
var bases_default = BASES;

// node_modules/.pnpm/uint8arrays@3.1.1/node_modules/uint8arrays/esm/src/from-string.js
function fromString4(string2, encoding = "utf8") {
  const base3 = bases_default[encoding];
  if (!base3) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return asUint8Array(globalThis.Buffer.from(string2, "utf-8"));
  }
  return base3.decoder.decode(`${base3.prefix}${string2}`);
}

// node_modules/.pnpm/uint8arrays@3.1.1/node_modules/uint8arrays/esm/src/to-string.js
function toString3(array, encoding = "utf8") {
  const base3 = bases_default[encoding];
  if (!base3) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString("utf8");
  }
  return base3.encoder.encode(array).substring(1);
}

// node_modules/.pnpm/@walletconnect+relay-api@1.0.11/node_modules/@walletconnect/relay-api/dist/index.es.js
var C = { waku: { publish: "waku_publish", batchPublish: "waku_batchPublish", subscribe: "waku_subscribe", batchSubscribe: "waku_batchSubscribe", subscription: "waku_subscription", unsubscribe: "waku_unsubscribe", batchUnsubscribe: "waku_batchUnsubscribe", batchFetchMessages: "waku_batchFetchMessages" }, irn: { publish: "irn_publish", batchPublish: "irn_batchPublish", subscribe: "irn_subscribe", batchSubscribe: "irn_batchSubscribe", subscription: "irn_subscription", unsubscribe: "irn_unsubscribe", batchUnsubscribe: "irn_batchUnsubscribe", batchFetchMessages: "irn_batchFetchMessages" }, iridium: { publish: "iridium_publish", batchPublish: "iridium_batchPublish", subscribe: "iridium_subscribe", batchSubscribe: "iridium_batchSubscribe", subscription: "iridium_subscription", unsubscribe: "iridium_unsubscribe", batchUnsubscribe: "iridium_batchUnsubscribe", batchFetchMessages: "iridium_batchFetchMessages" } };

// node_modules/.pnpm/@walletconnect+utils@2.21.5/node_modules/@walletconnect/utils/dist/index.es.js
var import_blakejs = __toESM(require_blakejs());
var xe2 = ":";
function Fe(t) {
  const [e, n] = t.split(xe2);
  return { namespace: e, reference: n };
}
function Gn2(t) {
  const { namespace: e, reference: n } = t;
  return [e, n].join(xe2);
}
function ze2(t) {
  const [e, n, r] = t.split(xe2);
  return { namespace: e, reference: n, address: r };
}
function Zn2(t) {
  const { namespace: e, reference: n, address: r } = t;
  return [e, n, r].join(xe2);
}
function Ge2(t, e) {
  const n = [];
  return t.forEach((r) => {
    const o = e(r);
    n.includes(o) || n.push(o);
  }), n;
}
function Wn2(t) {
  const { address: e } = ze2(t);
  return e;
}
function Yn2(t) {
  const { namespace: e, reference: n } = ze2(t);
  return Gn2({ namespace: e, reference: n });
}
function Os(t, e) {
  const { namespace: n, reference: r } = Fe(e);
  return Zn2({ namespace: n, reference: r, address: t });
}
function Us(t) {
  return Ge2(t, Wn2);
}
function Xn2(t) {
  return Ge2(t, Yn2);
}
function _s(t, e = []) {
  const n = [];
  return Object.keys(t).forEach((r) => {
    if (e.length && !e.includes(r))
      return;
    const o = t[r];
    n.push(...o.accounts);
  }), n;
}
function Ts(t, e = []) {
  const n = [];
  return Object.keys(t).forEach((r) => {
    if (e.length && !e.includes(r))
      return;
    const o = t[r];
    n.push(...Xn2(o.accounts));
  }), n;
}
function Rs(t, e = []) {
  const n = [];
  return Object.keys(t).forEach((r) => {
    if (e.length && !e.includes(r))
      return;
    const o = t[r];
    n.push(...ve2(r, o));
  }), n;
}
function ve2(t, e) {
  return t.includes(":") ? [t] : e.chains || [];
}
var $s = Object.defineProperty;
var Cs = Object.defineProperties;
var Ls = Object.getOwnPropertyDescriptors;
var Jn2 = Object.getOwnPropertySymbols;
var js = Object.prototype.hasOwnProperty;
var ks = Object.prototype.propertyIsEnumerable;
var Ze2 = (t, e, n) => e in t ? $s(t, e, { enumerable: true, configurable: true, writable: true, value: n }) : t[e] = n;
var Qn2 = (t, e) => {
  for (var n in e || (e = {}))
    js.call(e, n) && Ze2(t, n, e[n]);
  if (Jn2)
    for (var n of Jn2(e))
      ks.call(e, n) && Ze2(t, n, e[n]);
  return t;
};
var Ps = (t, e) => Cs(t, Ls(e));
var tr2 = (t, e, n) => Ze2(t, typeof e != "symbol" ? e + "" : e, n);
var er2 = "ReactNative";
var J2 = { reactNative: "react-native", node: "node", browser: "browser", unknown: "unknown" };
var Ee2 = " ";
var Hs = ":";
var nr2 = "/";
var We2 = 2;
var Ds = 1e3;
var rr2 = "js";
function Ye2() {
  return typeof process < "u" && typeof process.versions < "u" && typeof process.versions.node < "u";
}
function Bt2() {
  return !(0, import_window_getters.getDocument)() && !!(0, import_window_getters.getNavigator)() && navigator.product === er2;
}
function Ms() {
  return Bt2() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "android";
}
function Vs() {
  return Bt2() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "ios";
}
function zt2() {
  return !Ye2() && !!(0, import_window_getters.getNavigator)() && !!(0, import_window_getters.getDocument)();
}
function Pt2() {
  return Bt2() ? J2.reactNative : Ye2() ? J2.node : zt2() ? J2.browser : J2.unknown;
}
function qs() {
  var t;
  try {
    return Bt2() && typeof global < "u" && typeof (global == null ? void 0 : global.Application) < "u" ? (t = global.Application) == null ? void 0 : t.applicationId : void 0;
  } catch {
    return;
  }
}
function or3(t, e) {
  const n = new URLSearchParams(t);
  for (const r of Object.keys(e).sort())
    if (e.hasOwnProperty(r)) {
      const o = e[r];
      o !== void 0 && n.set(r, o);
    }
  return n.toString();
}
function Ks(t) {
  var e, n;
  const r = sr2();
  try {
    return t != null && t.url && r.url && new URL(t.url).host !== new URL(r.url).host && (console.warn(`The configured WalletConnect 'metadata.url':${t.url} differs from the actual page url:${r.url}. This is probably unintended and can lead to issues.`), t.url = r.url), (e = t == null ? void 0 : t.icons) != null && e.length && t.icons.length > 0 && (t.icons = t.icons.filter((o) => o !== "")), Ps(Qn2(Qn2({}, r), t), { url: (t == null ? void 0 : t.url) || r.url, name: (t == null ? void 0 : t.name) || r.name, description: (t == null ? void 0 : t.description) || r.description, icons: (n = t == null ? void 0 : t.icons) != null && n.length && t.icons.length > 0 ? t.icons : r.icons });
  } catch (o) {
    return console.warn("Error populating app metadata", o), t || r;
  }
}
function sr2() {
  return (0, import_window_metadata.getWindowMetadata)() || { name: "", description: "", url: "", icons: [""] };
}
function Fs(t, e) {
  var n;
  const r = Pt2(), o = { protocol: t, version: e, env: r };
  return r === "browser" && (o.host = ((n = (0, import_window_getters.getLocation)()) == null ? void 0 : n.host) || "unknown"), o;
}
function ir2() {
  if (Pt2() === J2.reactNative && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u") {
    const { OS: n, Version: r } = global.Platform;
    return [n, r].join("-");
  }
  const t = detect();
  if (t === null)
    return "unknown";
  const e = t.os ? t.os.replace(" ", "").toLowerCase() : "unknown";
  return t.type === "browser" ? [e, t.name, t.version].join("-") : [e, t.version].join("-");
}
function fr2() {
  var t;
  const e = Pt2();
  return e === J2.browser ? [e, ((t = (0, import_window_getters.getLocation)()) == null ? void 0 : t.host) || "unknown"].join(":") : e;
}
function cr2(t, e, n) {
  const r = ir2(), o = fr2();
  return [[t, e].join("-"), [rr2, n].join("-"), r, o].join("/");
}
function zs({ protocol: t, version: e, relayUrl: n, sdkVersion: r, auth: o, projectId: s, useOnCloseEvent: i, bundleId: f, packageName: a }) {
  const l = n.split("?"), c = cr2(t, e, r), u = { auth: o, ua: c, projectId: s, useOnCloseEvent: i || void 0, packageName: a || void 0, bundleId: f || void 0 }, h = or3(l[1] || "", u);
  return l[0] + "?" + h;
}
function Gs(t) {
  let e = (t.match(/^[^:]+(?=:\/\/)/gi) || [])[0];
  const n = typeof e < "u" ? t.split("://")[1] : t;
  return e = e === "wss" ? "https" : "http", [e, n].join("://");
}
function Zs(t, e, n) {
  if (!t[e] || typeof t[e] !== n)
    throw new Error(`Missing or invalid "${e}" param`);
}
function ar2(t, e = We2) {
  return ur2(t.split(nr2), e);
}
function Ws(t) {
  return ar2(t).join(Ee2);
}
function It2(t, e) {
  return t.filter((n) => e.includes(n)).length === t.length;
}
function ur2(t, e = We2) {
  return t.slice(Math.max(t.length - e, 0));
}
function Ys(t) {
  return Object.fromEntries(t.entries());
}
function Xs(t) {
  return new Map(Object.entries(t));
}
function Js(t, e) {
  const n = {};
  return Object.keys(t).forEach((r) => {
    n[r] = e(t[r]);
  }), n;
}
var Qs = (t) => t;
function lr2(t) {
  return t.trim().replace(/^\w/, (e) => e.toUpperCase());
}
function ti(t) {
  return t.split(Ee2).map((e) => lr2(e)).join(Ee2);
}
function ei(t = import_time2.FIVE_MINUTES, e) {
  const n = (0, import_time2.toMiliseconds)(t || import_time2.FIVE_MINUTES);
  let r, o, s, i;
  return { resolve: (f) => {
    s && r && (clearTimeout(s), r(f), i = Promise.resolve(f));
  }, reject: (f) => {
    s && o && (clearTimeout(s), o(f));
  }, done: () => new Promise((f, a) => {
    if (i)
      return f(i);
    s = setTimeout(() => {
      const l = new Error(e);
      i = Promise.reject(l), a(l);
    }, n), r = f, o = a;
  }) };
}
function ni(t, e, n) {
  return new Promise(async (r, o) => {
    const s = setTimeout(() => o(new Error(n)), e);
    try {
      const i = await t;
      r(i);
    } catch (i) {
      o(i);
    }
    clearTimeout(s);
  });
}
function Xe2(t, e) {
  if (typeof e == "string" && e.startsWith(`${t}:`))
    return e;
  if (t.toLowerCase() === "topic") {
    if (typeof e != "string")
      throw new Error('Value must be "string" for expirer target type: topic');
    return `topic:${e}`;
  } else if (t.toLowerCase() === "id") {
    if (typeof e != "number")
      throw new Error('Value must be "number" for expirer target type: id');
    return `id:${e}`;
  }
  throw new Error(`Unknown expirer target type: ${t}`);
}
function ri(t) {
  return Xe2("topic", t);
}
function oi(t) {
  return Xe2("id", t);
}
function si(t) {
  const [e, n] = t.split(":"), r = { id: void 0, topic: void 0 };
  if (e === "topic" && typeof n == "string")
    r.topic = n;
  else if (e === "id" && Number.isInteger(Number(n)))
    r.id = Number(n);
  else
    throw new Error(`Invalid target, expected id:number or topic:string, got ${e}:${n}`);
  return r;
}
function ii(t, e) {
  return (0, import_time2.fromMiliseconds)((e || Date.now()) + (0, import_time2.toMiliseconds)(t));
}
function fi(t) {
  return Date.now() >= (0, import_time2.toMiliseconds)(t);
}
function ci(t, e) {
  return `${t}${e ? `:${e}` : ""}`;
}
function ct2(t = [], e = []) {
  return [.../* @__PURE__ */ new Set([...t, ...e])];
}
async function ai({ id: t, topic: e, wcDeepLink: n }) {
  var r;
  try {
    if (!n)
      return;
    const o = typeof n == "string" ? JSON.parse(n) : n, s = o == null ? void 0 : o.href;
    if (typeof s != "string")
      return;
    const i = dr2(s, t, e), f = Pt2();
    if (f === J2.browser) {
      if (!((r = (0, import_window_getters.getDocument)()) != null && r.hasFocus())) {
        console.warn("Document does not have focus, skipping deeplink.");
        return;
      }
      hr2(i);
    } else
      f === J2.reactNative && typeof (global == null ? void 0 : global.Linking) < "u" && await global.Linking.openURL(i);
  } catch (o) {
    console.error(o);
  }
}
function dr2(t, e, n) {
  const r = `requestId=${e}&sessionTopic=${n}`;
  t.endsWith("/") && (t = t.slice(0, -1));
  let o = `${t}`;
  if (t.startsWith("https://t.me")) {
    const s = t.includes("?") ? "&startapp=" : "?startapp=";
    o = `${o}${s}${br2(r, true)}`;
  } else
    o = `${o}/wc?${r}`;
  return o;
}
function hr2(t) {
  let e = "_self";
  gr2() ? e = "_top" : (pr2() || t.startsWith("https://") || t.startsWith("http://")) && (e = "_blank"), window.open(t, e, "noreferrer noopener");
}
async function ui(t, e) {
  let n = "";
  try {
    if (zt2() && (n = localStorage.getItem(e), n))
      return n;
    n = await t.getItem(e);
  } catch (r) {
    console.error(r);
  }
  return n;
}
function Je2(t, e) {
  return t.filter((n) => e.includes(n));
}
function li(t, e) {
  if (!t.includes(e))
    return null;
  const n = t.split(/([&,?,=])/), r = n.indexOf(e);
  return n[r + 2];
}
function di() {
  return typeof crypto < "u" && crypto != null && crypto.randomUUID ? crypto.randomUUID() : "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/gu, (t) => {
    const e = Math.random() * 16 | 0;
    return (t === "x" ? e : e & 3 | 8).toString(16);
  });
}
function hi() {
  return typeof process < "u" && process.env.IS_VITEST === "true";
}
function pr2() {
  return typeof window < "u" && (!!window.TelegramWebviewProxy || !!window.Telegram || !!window.TelegramWebviewProxyProto);
}
function gr2() {
  try {
    return window.self !== window.top;
  } catch {
    return false;
  }
}
function br2(t, e = false) {
  const n = Buffer.from(t).toString("base64");
  return e ? n.replace(/[=]/g, "") : n;
}
function Qe2(t) {
  return Buffer.from(t, "base64").toString("utf-8");
}
function pi(t) {
  return new Promise((e) => setTimeout(e, t));
}
var gi = class {
  constructor({ limit: e }) {
    tr2(this, "limit"), tr2(this, "set"), this.limit = e, this.set = /* @__PURE__ */ new Set();
  }
  add(e) {
    if (!this.set.has(e)) {
      if (this.set.size >= this.limit) {
        const n = this.set.values().next().value;
        n && this.set.delete(n);
      }
      this.set.add(e);
    }
  }
  has(e) {
    return this.set.has(e);
  }
};
var Be2 = BigInt(2 ** 32 - 1);
var yr2 = BigInt(32);
function mr2(t, e = false) {
  return e ? { h: Number(t & Be2), l: Number(t >> yr2 & Be2) } : { h: Number(t >> yr2 & Be2) | 0, l: Number(t & Be2) | 0 };
}
function wr2(t, e = false) {
  const n = t.length;
  let r = new Uint32Array(n), o = new Uint32Array(n);
  for (let s = 0; s < n; s++) {
    const { h: i, l: f } = mr2(t[s], e);
    [r[s], o[s]] = [i, f];
  }
  return [r, o];
}
var xr2 = (t, e, n) => t >>> n;
var vr2 = (t, e, n) => t << 32 - n | e >>> n;
var At = (t, e, n) => t >>> n | e << 32 - n;
var St2 = (t, e, n) => t << 32 - n | e >>> n;
var se = (t, e, n) => t << 64 - n | e >>> n - 32;
var ie = (t, e, n) => t >>> n - 32 | e << 64 - n;
var bi = (t, e) => e;
var yi = (t, e) => t;
var mi = (t, e, n) => t << n | e >>> 32 - n;
var wi = (t, e, n) => e << n | t >>> 32 - n;
var xi = (t, e, n) => e << n - 32 | t >>> 64 - n;
var vi = (t, e, n) => t << n - 32 | e >>> 64 - n;
function dt2(t, e, n, r) {
  const o = (e >>> 0) + (r >>> 0);
  return { h: t + n + (o / 2 ** 32 | 0) | 0, l: o | 0 };
}
var tn = (t, e, n) => (t >>> 0) + (e >>> 0) + (n >>> 0);
var en2 = (t, e, n, r) => e + n + r + (t / 2 ** 32 | 0) | 0;
var Ei = (t, e, n, r) => (t >>> 0) + (e >>> 0) + (n >>> 0) + (r >>> 0);
var Bi = (t, e, n, r, o) => e + n + r + o + (t / 2 ** 32 | 0) | 0;
var Ii = (t, e, n, r, o) => (t >>> 0) + (e >>> 0) + (n >>> 0) + (r >>> 0) + (o >>> 0);
var Ai = (t, e, n, r, o, s) => e + n + r + o + s + (t / 2 ** 32 | 0) | 0;
var Gt2 = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
function nn2(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function mt(t) {
  if (!Number.isSafeInteger(t) || t < 0)
    throw new Error("positive integer expected, got " + t);
}
function at(t, ...e) {
  if (!nn2(t))
    throw new Error("Uint8Array expected");
  if (e.length > 0 && !e.includes(t.length))
    throw new Error("Uint8Array expected of length " + e + ", got length=" + t.length);
}
function rn2(t) {
  if (typeof t != "function" || typeof t.create != "function")
    throw new Error("Hash should be wrapped by utils.createHasher");
  mt(t.outputLen), mt(t.blockLen);
}
function Nt2(t, e = true) {
  if (t.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (e && t.finished)
    throw new Error("Hash#digest() has already been called");
}
function on2(t, e) {
  at(t);
  const n = e.outputLen;
  if (t.length < n)
    throw new Error("digestInto() expects output buffer of length at least " + n);
}
function fe2(t) {
  return new Uint32Array(t.buffer, t.byteOffset, Math.floor(t.byteLength / 4));
}
function ut2(...t) {
  for (let e = 0; e < t.length; e++)
    t[e].fill(0);
}
function sn2(t) {
  return new DataView(t.buffer, t.byteOffset, t.byteLength);
}
function gt2(t, e) {
  return t << 32 - e | t >>> e;
}
var Er2 = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
function Br2(t) {
  return t << 24 & 4278190080 | t << 8 & 16711680 | t >>> 8 & 65280 | t >>> 24 & 255;
}
var wt2 = Er2 ? (t) => t : (t) => Br2(t);
function Si(t) {
  for (let e = 0; e < t.length; e++)
    t[e] = Br2(t[e]);
  return t;
}
var Ot2 = Er2 ? (t) => t : Si;
var Ir2 = typeof Uint8Array.from([]).toHex == "function" && typeof Uint8Array.fromHex == "function";
var Ni = Array.from({ length: 256 }, (t, e) => e.toString(16).padStart(2, "0"));
function ce(t) {
  if (at(t), Ir2)
    return t.toHex();
  let e = "";
  for (let n = 0; n < t.length; n++)
    e += Ni[t[n]];
  return e;
}
var xt2 = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function Ar2(t) {
  if (t >= xt2._0 && t <= xt2._9)
    return t - xt2._0;
  if (t >= xt2.A && t <= xt2.F)
    return t - (xt2.A - 10);
  if (t >= xt2.a && t <= xt2.f)
    return t - (xt2.a - 10);
}
function fn(t) {
  if (typeof t != "string")
    throw new Error("hex string expected, got " + typeof t);
  if (Ir2)
    return Uint8Array.fromHex(t);
  const e = t.length, n = e / 2;
  if (e % 2)
    throw new Error("hex string expected, got unpadded hex of length " + e);
  const r = new Uint8Array(n);
  for (let o = 0, s = 0; o < n; o++, s += 2) {
    const i = Ar2(t.charCodeAt(s)), f = Ar2(t.charCodeAt(s + 1));
    if (i === void 0 || f === void 0) {
      const a = t[s] + t[s + 1];
      throw new Error('hex string expected, got non-hex character "' + a + '" at index ' + s);
    }
    r[o] = i * 16 + f;
  }
  return r;
}
function Oi(t) {
  if (typeof t != "string")
    throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(t));
}
function ht2(t) {
  return typeof t == "string" && (t = Oi(t)), at(t), t;
}
function Ht2(...t) {
  let e = 0;
  for (let r = 0; r < t.length; r++) {
    const o = t[r];
    at(o), e += o.length;
  }
  const n = new Uint8Array(e);
  for (let r = 0, o = 0; r < t.length; r++) {
    const s = t[r];
    n.set(s, o), o += s.length;
  }
  return n;
}
var Ie2 = class {
};
function ae(t) {
  const e = (r) => t().update(ht2(r)).digest(), n = t();
  return e.outputLen = n.outputLen, e.blockLen = n.blockLen, e.create = () => t(), e;
}
function Ui(t) {
  const e = (r, o) => t(o).update(ht2(r)).digest(), n = t({});
  return e.outputLen = n.outputLen, e.blockLen = n.blockLen, e.create = (r) => t(r), e;
}
function Zt2(t = 32) {
  if (Gt2 && typeof Gt2.getRandomValues == "function")
    return Gt2.getRandomValues(new Uint8Array(t));
  if (Gt2 && typeof Gt2.randomBytes == "function")
    return Uint8Array.from(Gt2.randomBytes(t));
  throw new Error("crypto.getRandomValues must be defined");
}
var _i = BigInt(0);
var ue = BigInt(1);
var Ti = BigInt(2);
var Ri = BigInt(7);
var $i = BigInt(256);
var Ci = BigInt(113);
var Sr2 = [];
var Nr2 = [];
var Or2 = [];
for (let t = 0, e = ue, n = 1, r = 0; t < 24; t++) {
  [n, r] = [r, (2 * n + 3 * r) % 5], Sr2.push(2 * (5 * r + n)), Nr2.push((t + 1) * (t + 2) / 2 % 64);
  let o = _i;
  for (let s = 0; s < 7; s++)
    e = (e << ue ^ (e >> Ri) * Ci) % $i, e & Ti && (o ^= ue << (ue << BigInt(s)) - ue);
  Or2.push(o);
}
var Ur2 = wr2(Or2, true);
var Li = Ur2[0];
var ji = Ur2[1];
var _r2 = (t, e, n) => n > 32 ? xi(t, e, n) : mi(t, e, n);
var Tr2 = (t, e, n) => n > 32 ? vi(t, e, n) : wi(t, e, n);
function ki(t, e = 24) {
  const n = new Uint32Array(10);
  for (let r = 24 - e; r < 24; r++) {
    for (let i = 0; i < 10; i++)
      n[i] = t[i] ^ t[i + 10] ^ t[i + 20] ^ t[i + 30] ^ t[i + 40];
    for (let i = 0; i < 10; i += 2) {
      const f = (i + 8) % 10, a = (i + 2) % 10, l = n[a], c = n[a + 1], u = _r2(l, c, 1) ^ n[f], h = Tr2(l, c, 1) ^ n[f + 1];
      for (let g = 0; g < 50; g += 10)
        t[i + g] ^= u, t[i + g + 1] ^= h;
    }
    let o = t[2], s = t[3];
    for (let i = 0; i < 24; i++) {
      const f = Nr2[i], a = _r2(o, s, f), l = Tr2(o, s, f), c = Sr2[i];
      o = t[c], s = t[c + 1], t[c] = a, t[c + 1] = l;
    }
    for (let i = 0; i < 50; i += 10) {
      for (let f = 0; f < 10; f++)
        n[f] = t[i + f];
      for (let f = 0; f < 10; f++)
        t[i + f] ^= ~n[(f + 2) % 10] & n[(f + 4) % 10];
    }
    t[0] ^= Li[r], t[1] ^= ji[r];
  }
  ut2(n);
}
var qn2 = class _qn extends Ie2 {
  constructor(e, n, r, o = false, s = 24) {
    if (super(), this.pos = 0, this.posOut = 0, this.finished = false, this.destroyed = false, this.enableXOF = false, this.blockLen = e, this.suffix = n, this.outputLen = r, this.enableXOF = o, this.rounds = s, mt(r), !(0 < e && e < 200))
      throw new Error("only keccak-f1600 function is supported");
    this.state = new Uint8Array(200), this.state32 = fe2(this.state);
  }
  clone() {
    return this._cloneInto();
  }
  keccak() {
    Ot2(this.state32), ki(this.state32, this.rounds), Ot2(this.state32), this.posOut = 0, this.pos = 0;
  }
  update(e) {
    Nt2(this), e = ht2(e), at(e);
    const { blockLen: n, state: r } = this, o = e.length;
    for (let s = 0; s < o; ) {
      const i = Math.min(n - this.pos, o - s);
      for (let f = 0; f < i; f++)
        r[this.pos++] ^= e[s++];
      this.pos === n && this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = true;
    const { state: e, suffix: n, pos: r, blockLen: o } = this;
    e[r] ^= n, (n & 128) !== 0 && r === o - 1 && this.keccak(), e[o - 1] ^= 128, this.keccak();
  }
  writeInto(e) {
    Nt2(this, false), at(e), this.finish();
    const n = this.state, { blockLen: r } = this;
    for (let o = 0, s = e.length; o < s; ) {
      this.posOut >= r && this.keccak();
      const i = Math.min(r - this.posOut, s - o);
      e.set(n.subarray(this.posOut, this.posOut + i), o), this.posOut += i, o += i;
    }
    return e;
  }
  xofInto(e) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(e);
  }
  xof(e) {
    return mt(e), this.xofInto(new Uint8Array(e));
  }
  digestInto(e) {
    if (on2(e, this), this.finished)
      throw new Error("digest() was already called");
    return this.writeInto(e), this.destroy(), e;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true, ut2(this.state);
  }
  _cloneInto(e) {
    const { blockLen: n, suffix: r, outputLen: o, rounds: s, enableXOF: i } = this;
    return e || (e = new _qn(n, r, o, i, s)), e.state32.set(this.state32), e.pos = this.pos, e.posOut = this.posOut, e.finished = this.finished, e.rounds = s, e.suffix = r, e.outputLen = o, e.enableXOF = i, e.destroyed = this.destroyed, e;
  }
};
var Pi = (t, e, n) => ae(() => new qn2(e, t, n));
var Hi = Pi(1, 136, 256 / 8);
function Di(t, e, n, r) {
  if (typeof t.setBigUint64 == "function")
    return t.setBigUint64(e, n, r);
  const o = BigInt(32), s = BigInt(4294967295), i = Number(n >> o & s), f = Number(n & s), a = r ? 4 : 0, l = r ? 0 : 4;
  t.setUint32(e + a, i, r), t.setUint32(e + l, f, r);
}
function Mi(t, e, n) {
  return t & e ^ ~t & n;
}
function Vi(t, e, n) {
  return t & e ^ t & n ^ e & n;
}
var Rr2 = class extends Ie2 {
  constructor(e, n, r, o) {
    super(), this.finished = false, this.length = 0, this.pos = 0, this.destroyed = false, this.blockLen = e, this.outputLen = n, this.padOffset = r, this.isLE = o, this.buffer = new Uint8Array(e), this.view = sn2(this.buffer);
  }
  update(e) {
    Nt2(this), e = ht2(e), at(e);
    const { view: n, buffer: r, blockLen: o } = this, s = e.length;
    for (let i = 0; i < s; ) {
      const f = Math.min(o - this.pos, s - i);
      if (f === o) {
        const a = sn2(e);
        for (; o <= s - i; i += o)
          this.process(a, i);
        continue;
      }
      r.set(e.subarray(i, i + f), this.pos), this.pos += f, i += f, this.pos === o && (this.process(n, 0), this.pos = 0);
    }
    return this.length += e.length, this.roundClean(), this;
  }
  digestInto(e) {
    Nt2(this), on2(e, this), this.finished = true;
    const { buffer: n, view: r, blockLen: o, isLE: s } = this;
    let { pos: i } = this;
    n[i++] = 128, ut2(this.buffer.subarray(i)), this.padOffset > o - i && (this.process(r, 0), i = 0);
    for (let u = i; u < o; u++)
      n[u] = 0;
    Di(r, o - 8, BigInt(this.length * 8), s), this.process(r, 0);
    const f = sn2(e), a = this.outputLen;
    if (a % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const l = a / 4, c = this.get();
    if (l > c.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let u = 0; u < l; u++)
      f.setUint32(4 * u, c[u], s);
  }
  digest() {
    const { buffer: e, outputLen: n } = this;
    this.digestInto(e);
    const r = e.slice(0, n);
    return this.destroy(), r;
  }
  _cloneInto(e) {
    e || (e = new this.constructor()), e.set(...this.get());
    const { blockLen: n, buffer: r, length: o, finished: s, destroyed: i, pos: f } = this;
    return e.destroyed = i, e.finished = s, e.length = o, e.pos = f, o % n && e.buffer.set(r), e;
  }
  clone() {
    return this._cloneInto();
  }
};
var Ut2 = Uint32Array.from([1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]);
var W2 = Uint32Array.from([3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999, 355462360, 4144912697, 1731405415, 4290775857, 2394180231, 1750603025, 3675008525, 1694076839, 1203062813, 3204075428]);
var Y = Uint32Array.from([1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209]);
var qi = Uint32Array.from([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]);
var _t2 = new Uint32Array(64);
var Ki = class extends Rr2 {
  constructor(e = 32) {
    super(64, e, 8, false), this.A = Ut2[0] | 0, this.B = Ut2[1] | 0, this.C = Ut2[2] | 0, this.D = Ut2[3] | 0, this.E = Ut2[4] | 0, this.F = Ut2[5] | 0, this.G = Ut2[6] | 0, this.H = Ut2[7] | 0;
  }
  get() {
    const { A: e, B: n, C: r, D: o, E: s, F: i, G: f, H: a } = this;
    return [e, n, r, o, s, i, f, a];
  }
  set(e, n, r, o, s, i, f, a) {
    this.A = e | 0, this.B = n | 0, this.C = r | 0, this.D = o | 0, this.E = s | 0, this.F = i | 0, this.G = f | 0, this.H = a | 0;
  }
  process(e, n) {
    for (let u = 0; u < 16; u++, n += 4)
      _t2[u] = e.getUint32(n, false);
    for (let u = 16; u < 64; u++) {
      const h = _t2[u - 15], g = _t2[u - 2], w = gt2(h, 7) ^ gt2(h, 18) ^ h >>> 3, y = gt2(g, 17) ^ gt2(g, 19) ^ g >>> 10;
      _t2[u] = y + _t2[u - 7] + w + _t2[u - 16] | 0;
    }
    let { A: r, B: o, C: s, D: i, E: f, F: a, G: l, H: c } = this;
    for (let u = 0; u < 64; u++) {
      const h = gt2(f, 6) ^ gt2(f, 11) ^ gt2(f, 25), g = c + h + Mi(f, a, l) + qi[u] + _t2[u] | 0, y = (gt2(r, 2) ^ gt2(r, 13) ^ gt2(r, 22)) + Vi(r, o, s) | 0;
      c = l, l = a, a = f, f = i + g | 0, i = s, s = o, o = r, r = g + y | 0;
    }
    r = r + this.A | 0, o = o + this.B | 0, s = s + this.C | 0, i = i + this.D | 0, f = f + this.E | 0, a = a + this.F | 0, l = l + this.G | 0, c = c + this.H | 0, this.set(r, o, s, i, f, a, l, c);
  }
  roundClean() {
    ut2(_t2);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), ut2(this.buffer);
  }
};
var $r2 = wr2(["0x428a2f98d728ae22", "0x7137449123ef65cd", "0xb5c0fbcfec4d3b2f", "0xe9b5dba58189dbbc", "0x3956c25bf348b538", "0x59f111f1b605d019", "0x923f82a4af194f9b", "0xab1c5ed5da6d8118", "0xd807aa98a3030242", "0x12835b0145706fbe", "0x243185be4ee4b28c", "0x550c7dc3d5ffb4e2", "0x72be5d74f27b896f", "0x80deb1fe3b1696b1", "0x9bdc06a725c71235", "0xc19bf174cf692694", "0xe49b69c19ef14ad2", "0xefbe4786384f25e3", "0x0fc19dc68b8cd5b5", "0x240ca1cc77ac9c65", "0x2de92c6f592b0275", "0x4a7484aa6ea6e483", "0x5cb0a9dcbd41fbd4", "0x76f988da831153b5", "0x983e5152ee66dfab", "0xa831c66d2db43210", "0xb00327c898fb213f", "0xbf597fc7beef0ee4", "0xc6e00bf33da88fc2", "0xd5a79147930aa725", "0x06ca6351e003826f", "0x142929670a0e6e70", "0x27b70a8546d22ffc", "0x2e1b21385c26c926", "0x4d2c6dfc5ac42aed", "0x53380d139d95b3df", "0x650a73548baf63de", "0x766a0abb3c77b2a8", "0x81c2c92e47edaee6", "0x92722c851482353b", "0xa2bfe8a14cf10364", "0xa81a664bbc423001", "0xc24b8b70d0f89791", "0xc76c51a30654be30", "0xd192e819d6ef5218", "0xd69906245565a910", "0xf40e35855771202a", "0x106aa07032bbd1b8", "0x19a4c116b8d2d0c8", "0x1e376c085141ab53", "0x2748774cdf8eeb99", "0x34b0bcb5e19b48a8", "0x391c0cb3c5c95a63", "0x4ed8aa4ae3418acb", "0x5b9cca4f7763e373", "0x682e6ff3d6b2b8a3", "0x748f82ee5defb2fc", "0x78a5636f43172f60", "0x84c87814a1f0ab72", "0x8cc702081a6439ec", "0x90befffa23631e28", "0xa4506cebde82bde9", "0xbef9a3f7b2c67915", "0xc67178f2e372532b", "0xca273eceea26619c", "0xd186b8c721c0c207", "0xeada7dd6cde0eb1e", "0xf57d4f7fee6ed178", "0x06f067aa72176fba", "0x0a637dc5a2c898a6", "0x113f9804bef90dae", "0x1b710b35131c471b", "0x28db77f523047d84", "0x32caab7b40c72493", "0x3c9ebe0a15c9bebc", "0x431d67c49c100d4c", "0x4cc5d4becb3e42b6", "0x597f299cfc657e2a", "0x5fcb6fab3ad6faec", "0x6c44198c4a475817"].map((t) => BigInt(t)));
var Fi = $r2[0];
var zi = $r2[1];
var Tt2 = new Uint32Array(80);
var Rt2 = new Uint32Array(80);
var cn = class extends Rr2 {
  constructor(e = 64) {
    super(128, e, 16, false), this.Ah = Y[0] | 0, this.Al = Y[1] | 0, this.Bh = Y[2] | 0, this.Bl = Y[3] | 0, this.Ch = Y[4] | 0, this.Cl = Y[5] | 0, this.Dh = Y[6] | 0, this.Dl = Y[7] | 0, this.Eh = Y[8] | 0, this.El = Y[9] | 0, this.Fh = Y[10] | 0, this.Fl = Y[11] | 0, this.Gh = Y[12] | 0, this.Gl = Y[13] | 0, this.Hh = Y[14] | 0, this.Hl = Y[15] | 0;
  }
  get() {
    const { Ah: e, Al: n, Bh: r, Bl: o, Ch: s, Cl: i, Dh: f, Dl: a, Eh: l, El: c, Fh: u, Fl: h, Gh: g, Gl: w, Hh: y, Hl: x2 } = this;
    return [e, n, r, o, s, i, f, a, l, c, u, h, g, w, y, x2];
  }
  set(e, n, r, o, s, i, f, a, l, c, u, h, g, w, y, x2) {
    this.Ah = e | 0, this.Al = n | 0, this.Bh = r | 0, this.Bl = o | 0, this.Ch = s | 0, this.Cl = i | 0, this.Dh = f | 0, this.Dl = a | 0, this.Eh = l | 0, this.El = c | 0, this.Fh = u | 0, this.Fl = h | 0, this.Gh = g | 0, this.Gl = w | 0, this.Hh = y | 0, this.Hl = x2 | 0;
  }
  process(e, n) {
    for (let L = 0; L < 16; L++, n += 4)
      Tt2[L] = e.getUint32(n), Rt2[L] = e.getUint32(n += 4);
    for (let L = 16; L < 80; L++) {
      const V = Tt2[L - 15] | 0, _ = Rt2[L - 15] | 0, k2 = At(V, _, 1) ^ At(V, _, 8) ^ xr2(V, _, 7), j2 = St2(V, _, 1) ^ St2(V, _, 8) ^ vr2(V, _, 7), $ = Tt2[L - 2] | 0, d = Rt2[L - 2] | 0, m = At($, d, 19) ^ se($, d, 61) ^ xr2($, d, 6), p = St2($, d, 19) ^ ie($, d, 61) ^ vr2($, d, 6), b = Ei(j2, p, Rt2[L - 7], Rt2[L - 16]), v = Bi(b, k2, m, Tt2[L - 7], Tt2[L - 16]);
      Tt2[L] = v | 0, Rt2[L] = b | 0;
    }
    let { Ah: r, Al: o, Bh: s, Bl: i, Ch: f, Cl: a, Dh: l, Dl: c, Eh: u, El: h, Fh: g, Fl: w, Gh: y, Gl: x2, Hh: R, Hl: M2 } = this;
    for (let L = 0; L < 80; L++) {
      const V = At(u, h, 14) ^ At(u, h, 18) ^ se(u, h, 41), _ = St2(u, h, 14) ^ St2(u, h, 18) ^ ie(u, h, 41), k2 = u & g ^ ~u & y, j2 = h & w ^ ~h & x2, $ = Ii(M2, _, j2, zi[L], Rt2[L]), d = Ai($, R, V, k2, Fi[L], Tt2[L]), m = $ | 0, p = At(r, o, 28) ^ se(r, o, 34) ^ se(r, o, 39), b = St2(r, o, 28) ^ ie(r, o, 34) ^ ie(r, o, 39), v = r & s ^ r & f ^ s & f, B = o & i ^ o & a ^ i & a;
      R = y | 0, M2 = x2 | 0, y = g | 0, x2 = w | 0, g = u | 0, w = h | 0, { h: u, l: h } = dt2(l | 0, c | 0, d | 0, m | 0), l = f | 0, c = a | 0, f = s | 0, a = i | 0, s = r | 0, i = o | 0;
      const E = tn(m, b, B);
      r = en2(E, d, p, v), o = E | 0;
    }
    ({ h: r, l: o } = dt2(this.Ah | 0, this.Al | 0, r | 0, o | 0)), { h: s, l: i } = dt2(this.Bh | 0, this.Bl | 0, s | 0, i | 0), { h: f, l: a } = dt2(this.Ch | 0, this.Cl | 0, f | 0, a | 0), { h: l, l: c } = dt2(this.Dh | 0, this.Dl | 0, l | 0, c | 0), { h: u, l: h } = dt2(this.Eh | 0, this.El | 0, u | 0, h | 0), { h: g, l: w } = dt2(this.Fh | 0, this.Fl | 0, g | 0, w | 0), { h: y, l: x2 } = dt2(this.Gh | 0, this.Gl | 0, y | 0, x2 | 0), { h: R, l: M2 } = dt2(this.Hh | 0, this.Hl | 0, R | 0, M2 | 0), this.set(r, o, s, i, f, a, l, c, u, h, g, w, y, x2, R, M2);
  }
  roundClean() {
    ut2(Tt2, Rt2);
  }
  destroy() {
    ut2(this.buffer), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var Gi = class extends cn {
  constructor() {
    super(48), this.Ah = W2[0] | 0, this.Al = W2[1] | 0, this.Bh = W2[2] | 0, this.Bl = W2[3] | 0, this.Ch = W2[4] | 0, this.Cl = W2[5] | 0, this.Dh = W2[6] | 0, this.Dl = W2[7] | 0, this.Eh = W2[8] | 0, this.El = W2[9] | 0, this.Fh = W2[10] | 0, this.Fl = W2[11] | 0, this.Gh = W2[12] | 0, this.Gl = W2[13] | 0, this.Hh = W2[14] | 0, this.Hl = W2[15] | 0;
  }
};
var X = Uint32Array.from([573645204, 4230739756, 2673172387, 3360449730, 596883563, 1867755857, 2520282905, 1497426621, 2519219938, 2827943907, 3193839141, 1401305490, 721525244, 746961066, 246885852, 2177182882]);
var Zi = class extends cn {
  constructor() {
    super(32), this.Ah = X[0] | 0, this.Al = X[1] | 0, this.Bh = X[2] | 0, this.Bl = X[3] | 0, this.Ch = X[4] | 0, this.Cl = X[5] | 0, this.Dh = X[6] | 0, this.Dl = X[7] | 0, this.Eh = X[8] | 0, this.El = X[9] | 0, this.Fh = X[10] | 0, this.Fl = X[11] | 0, this.Gh = X[12] | 0, this.Gl = X[13] | 0, this.Hh = X[14] | 0, this.Hl = X[15] | 0;
  }
};
var Ae2 = ae(() => new Ki());
var Wi = ae(() => new cn());
var Yi = ae(() => new Gi());
var Xi = ae(() => new Zi());
var Ji = Uint8Array.from([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11, 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10, 6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9]);
var F = Uint32Array.from([4089235720, 1779033703, 2227873595, 3144134277, 4271175723, 1013904242, 1595750129, 2773480762, 2917565137, 1359893119, 725511199, 2600822924, 4215389547, 528734635, 327033209, 1541459225]);
var N10 = new Uint32Array(32);
function $t2(t, e, n, r, o, s) {
  const i = o[s], f = o[s + 1];
  let a = N10[2 * t], l = N10[2 * t + 1], c = N10[2 * e], u = N10[2 * e + 1], h = N10[2 * n], g = N10[2 * n + 1], w = N10[2 * r], y = N10[2 * r + 1], x2 = tn(a, c, i);
  l = en2(x2, l, u, f), a = x2 | 0, { Dh: y, Dl: w } = { Dh: y ^ l, Dl: w ^ a }, { Dh: y, Dl: w } = { Dh: bi(y, w), Dl: yi(y) }, { h: g, l: h } = dt2(g, h, y, w), { Bh: u, Bl: c } = { Bh: u ^ g, Bl: c ^ h }, { Bh: u, Bl: c } = { Bh: At(u, c, 24), Bl: St2(u, c, 24) }, N10[2 * t] = a, N10[2 * t + 1] = l, N10[2 * e] = c, N10[2 * e + 1] = u, N10[2 * n] = h, N10[2 * n + 1] = g, N10[2 * r] = w, N10[2 * r + 1] = y;
}
function Ct(t, e, n, r, o, s) {
  const i = o[s], f = o[s + 1];
  let a = N10[2 * t], l = N10[2 * t + 1], c = N10[2 * e], u = N10[2 * e + 1], h = N10[2 * n], g = N10[2 * n + 1], w = N10[2 * r], y = N10[2 * r + 1], x2 = tn(a, c, i);
  l = en2(x2, l, u, f), a = x2 | 0, { Dh: y, Dl: w } = { Dh: y ^ l, Dl: w ^ a }, { Dh: y, Dl: w } = { Dh: At(y, w, 16), Dl: St2(y, w, 16) }, { h: g, l: h } = dt2(g, h, y, w), { Bh: u, Bl: c } = { Bh: u ^ g, Bl: c ^ h }, { Bh: u, Bl: c } = { Bh: se(u, c, 63), Bl: ie(u, c, 63) }, N10[2 * t] = a, N10[2 * t + 1] = l, N10[2 * e] = c, N10[2 * e + 1] = u, N10[2 * n] = h, N10[2 * n + 1] = g, N10[2 * r] = w, N10[2 * r + 1] = y;
}
function Qi(t, e = {}, n, r, o) {
  if (mt(n), t < 0 || t > n)
    throw new Error("outputLen bigger than keyLen");
  const { key: s, salt: i, personalization: f } = e;
  if (s !== void 0 && (s.length < 1 || s.length > n))
    throw new Error("key length must be undefined or 1.." + n);
  if (i !== void 0 && i.length !== r)
    throw new Error("salt must be undefined or " + r);
  if (f !== void 0 && f.length !== o)
    throw new Error("personalization must be undefined or " + o);
}
var tf = class extends Ie2 {
  constructor(e, n) {
    super(), this.finished = false, this.destroyed = false, this.length = 0, this.pos = 0, mt(e), mt(n), this.blockLen = e, this.outputLen = n, this.buffer = new Uint8Array(e), this.buffer32 = fe2(this.buffer);
  }
  update(e) {
    Nt2(this), e = ht2(e), at(e);
    const { blockLen: n, buffer: r, buffer32: o } = this, s = e.length, i = e.byteOffset, f = e.buffer;
    for (let a = 0; a < s; ) {
      this.pos === n && (Ot2(o), this.compress(o, 0, false), Ot2(o), this.pos = 0);
      const l = Math.min(n - this.pos, s - a), c = i + a;
      if (l === n && !(c % 4) && a + l < s) {
        const u = new Uint32Array(f, c, Math.floor((s - a) / 4));
        Ot2(u);
        for (let h = 0; a + n < s; h += o.length, a += n)
          this.length += n, this.compress(u, h, false);
        Ot2(u);
        continue;
      }
      r.set(e.subarray(a, a + l), this.pos), this.pos += l, this.length += l, a += l;
    }
    return this;
  }
  digestInto(e) {
    Nt2(this), on2(e, this);
    const { pos: n, buffer32: r } = this;
    this.finished = true, ut2(this.buffer.subarray(n)), Ot2(r), this.compress(r, 0, true), Ot2(r);
    const o = fe2(e);
    this.get().forEach((s, i) => o[i] = wt2(s));
  }
  digest() {
    const { buffer: e, outputLen: n } = this;
    this.digestInto(e);
    const r = e.slice(0, n);
    return this.destroy(), r;
  }
  _cloneInto(e) {
    const { buffer: n, length: r, finished: o, destroyed: s, outputLen: i, pos: f } = this;
    return e || (e = new this.constructor({ dkLen: i })), e.set(...this.get()), e.buffer.set(n), e.destroyed = s, e.finished = o, e.length = r, e.pos = f, e.outputLen = i, e;
  }
  clone() {
    return this._cloneInto();
  }
};
var ef = class extends tf {
  constructor(e = {}) {
    const n = e.dkLen === void 0 ? 64 : e.dkLen;
    super(128, n), this.v0l = F[0] | 0, this.v0h = F[1] | 0, this.v1l = F[2] | 0, this.v1h = F[3] | 0, this.v2l = F[4] | 0, this.v2h = F[5] | 0, this.v3l = F[6] | 0, this.v3h = F[7] | 0, this.v4l = F[8] | 0, this.v4h = F[9] | 0, this.v5l = F[10] | 0, this.v5h = F[11] | 0, this.v6l = F[12] | 0, this.v6h = F[13] | 0, this.v7l = F[14] | 0, this.v7h = F[15] | 0, Qi(n, e, 64, 16, 16);
    let { key: r, personalization: o, salt: s } = e, i = 0;
    if (r !== void 0 && (r = ht2(r), i = r.length), this.v0l ^= this.outputLen | i << 8 | 65536 | 1 << 24, s !== void 0) {
      s = ht2(s);
      const f = fe2(s);
      this.v4l ^= wt2(f[0]), this.v4h ^= wt2(f[1]), this.v5l ^= wt2(f[2]), this.v5h ^= wt2(f[3]);
    }
    if (o !== void 0) {
      o = ht2(o);
      const f = fe2(o);
      this.v6l ^= wt2(f[0]), this.v6h ^= wt2(f[1]), this.v7l ^= wt2(f[2]), this.v7h ^= wt2(f[3]);
    }
    if (r !== void 0) {
      const f = new Uint8Array(this.blockLen);
      f.set(r), this.update(f);
    }
  }
  get() {
    let { v0l: e, v0h: n, v1l: r, v1h: o, v2l: s, v2h: i, v3l: f, v3h: a, v4l: l, v4h: c, v5l: u, v5h: h, v6l: g, v6h: w, v7l: y, v7h: x2 } = this;
    return [e, n, r, o, s, i, f, a, l, c, u, h, g, w, y, x2];
  }
  set(e, n, r, o, s, i, f, a, l, c, u, h, g, w, y, x2) {
    this.v0l = e | 0, this.v0h = n | 0, this.v1l = r | 0, this.v1h = o | 0, this.v2l = s | 0, this.v2h = i | 0, this.v3l = f | 0, this.v3h = a | 0, this.v4l = l | 0, this.v4h = c | 0, this.v5l = u | 0, this.v5h = h | 0, this.v6l = g | 0, this.v6h = w | 0, this.v7l = y | 0, this.v7h = x2 | 0;
  }
  compress(e, n, r) {
    this.get().forEach((a, l) => N10[l] = a), N10.set(F, 16);
    let { h: o, l: s } = mr2(BigInt(this.length));
    N10[24] = F[8] ^ s, N10[25] = F[9] ^ o, r && (N10[28] = ~N10[28], N10[29] = ~N10[29]);
    let i = 0;
    const f = Ji;
    for (let a = 0; a < 12; a++)
      $t2(0, 4, 8, 12, e, n + 2 * f[i++]), Ct(0, 4, 8, 12, e, n + 2 * f[i++]), $t2(1, 5, 9, 13, e, n + 2 * f[i++]), Ct(1, 5, 9, 13, e, n + 2 * f[i++]), $t2(2, 6, 10, 14, e, n + 2 * f[i++]), Ct(2, 6, 10, 14, e, n + 2 * f[i++]), $t2(3, 7, 11, 15, e, n + 2 * f[i++]), Ct(3, 7, 11, 15, e, n + 2 * f[i++]), $t2(0, 5, 10, 15, e, n + 2 * f[i++]), Ct(0, 5, 10, 15, e, n + 2 * f[i++]), $t2(1, 6, 11, 12, e, n + 2 * f[i++]), Ct(1, 6, 11, 12, e, n + 2 * f[i++]), $t2(2, 7, 8, 13, e, n + 2 * f[i++]), Ct(2, 7, 8, 13, e, n + 2 * f[i++]), $t2(3, 4, 9, 14, e, n + 2 * f[i++]), Ct(3, 4, 9, 14, e, n + 2 * f[i++]);
    this.v0l ^= N10[0] ^ N10[16], this.v0h ^= N10[1] ^ N10[17], this.v1l ^= N10[2] ^ N10[18], this.v1h ^= N10[3] ^ N10[19], this.v2l ^= N10[4] ^ N10[20], this.v2h ^= N10[5] ^ N10[21], this.v3l ^= N10[6] ^ N10[22], this.v3h ^= N10[7] ^ N10[23], this.v4l ^= N10[8] ^ N10[24], this.v4h ^= N10[9] ^ N10[25], this.v5l ^= N10[10] ^ N10[26], this.v5h ^= N10[11] ^ N10[27], this.v6l ^= N10[12] ^ N10[28], this.v6h ^= N10[13] ^ N10[29], this.v7l ^= N10[14] ^ N10[30], this.v7h ^= N10[15] ^ N10[31], ut2(N10);
  }
  destroy() {
    this.destroyed = true, ut2(this.buffer32), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var nf = Ui((t) => new ef(t));
var rf = "https://rpc.walletconnect.org/v1";
function an(t) {
  const e = `Ethereum Signed Message:
${t.length}`, n = new TextEncoder().encode(e + t);
  return "0x" + Buffer.from(Hi(n)).toString("hex");
}
async function Cr2(t, e, n, r, o, s) {
  switch (n.t) {
    case "eip191":
      return await Lr2(t, e, n.s);
    case "eip1271":
      return await jr2(t, e, n.s, r, o, s);
    default:
      throw new Error(`verifySignature failed: Attempted to verify CacaoSignature with unknown type: ${n.t}`);
  }
}
async function Lr2(t, e, n) {
  return (await recoverAddress({ hash: an(e), signature: n })).toLowerCase() === t.toLowerCase();
}
async function jr2(t, e, n, r, o, s) {
  const i = Fe(r);
  if (!i.namespace || !i.reference)
    throw new Error(`isValidEip1271Signature failed: chainId must be in CAIP-2 format, received: ${r}`);
  try {
    const f = "0x1626ba7e", a = "0000000000000000000000000000000000000000000000000000000000000040", l = n.substring(2), c = (l.length / 2).toString(16).padStart(64, "0"), u = (e.startsWith("0x") ? e : an(e)).substring(2), h = f + u + a + c + l, g = await fetch(`${s || rf}/?chainId=${r}&projectId=${o}`, { headers: { "Content-Type": "application/json" }, method: "POST", body: JSON.stringify({ id: of(), jsonrpc: "2.0", method: "eth_call", params: [{ to: t, data: h }, "latest"] }) }), { result: w } = await g.json();
    return w ? w.slice(0, f.length).toLowerCase() === f.toLowerCase() : false;
  } catch (f) {
    return console.error("isValidEip1271Signature: ", f), false;
  }
}
function of() {
  return Date.now() + Math.floor(Math.random() * 1e3);
}
function sf(t) {
  const e = atob(t), n = new Uint8Array(e.length);
  for (let i = 0; i < e.length; i++)
    n[i] = e.charCodeAt(i);
  const r = n[0];
  if (r === 0)
    throw new Error("No signatures found");
  const o = 1 + r * 64;
  if (n.length < o)
    throw new Error("Transaction data too short for claimed signature count");
  if (n.length < 100)
    throw new Error("Transaction too short");
  const s = Buffer.from(t, "base64").slice(1, 65);
  return esm_default2.encode(s);
}
function ff(t) {
  const e = new Uint8Array(Buffer.from(t, "base64")), n = Array.from("TransactionData::").map((s) => s.charCodeAt(0)), r = new Uint8Array(n.length + e.length);
  r.set(n), r.set(e, n.length);
  const o = nf(r, { dkLen: 32 });
  return esm_default2.encode(o);
}
function cf(t) {
  const e = new Uint8Array(Ae2(kr2(t)));
  return esm_default2.encode(e);
}
function kr2(t) {
  if (t instanceof Uint8Array)
    return t;
  if (Array.isArray(t))
    return new Uint8Array(t);
  if (typeof t == "object" && t != null && t.data)
    return new Uint8Array(Object.values(t.data));
  if (typeof t == "object" && t)
    return new Uint8Array(Object.values(t));
  throw new Error("getNearUint8ArrayFromBytes: Unexpected result type from bytes array");
}
function af(t) {
  const e = Buffer.from(t, "base64"), n = decode2(e).txn;
  if (!n)
    throw new Error("Invalid signed transaction: missing 'txn' field");
  const r = encode4(n), o = Buffer.from("TX"), s = Buffer.concat([o, Buffer.from(r)]), i = Xi(s);
  return base32.encode(i).replace(/=+$/, "");
}
function un(t) {
  const e = [];
  let n = BigInt(t);
  for (; n >= BigInt(128); )
    e.push(Number(n & BigInt(127) | BigInt(128))), n >>= BigInt(7);
  return e.push(Number(n)), Buffer.from(e);
}
function uf(t) {
  const e = Buffer.from(t.signed.bodyBytes, "base64"), n = Buffer.from(t.signed.authInfoBytes, "base64"), r = Buffer.from(t.signature.signature, "base64"), o = [];
  o.push(Buffer.from([10])), o.push(un(e.length)), o.push(e), o.push(Buffer.from([18])), o.push(un(n.length)), o.push(n), o.push(Buffer.from([26])), o.push(un(r.length)), o.push(r);
  const s = Buffer.concat(o), i = Ae2(s);
  return Buffer.from(i).toString("hex").toUpperCase();
}
var lf = Object.defineProperty;
var df = Object.defineProperties;
var hf = Object.getOwnPropertyDescriptors;
var Pr2 = Object.getOwnPropertySymbols;
var pf = Object.prototype.hasOwnProperty;
var gf = Object.prototype.propertyIsEnumerable;
var Hr2 = (t, e, n) => e in t ? lf(t, e, { enumerable: true, configurable: true, writable: true, value: n }) : t[e] = n;
var ln = (t, e) => {
  for (var n in e || (e = {}))
    pf.call(e, n) && Hr2(t, n, e[n]);
  if (Pr2)
    for (var n of Pr2(e))
      gf.call(e, n) && Hr2(t, n, e[n]);
  return t;
};
var Dr2 = (t, e) => df(t, hf(e));
var bf = "did:pkh:";
var Se2 = (t) => t == null ? void 0 : t.split(":");
var Mr2 = (t) => {
  const e = t && Se2(t);
  if (e)
    return t.includes(bf) ? e[3] : e[1];
};
var Vr2 = (t) => {
  const e = t && Se2(t);
  if (e)
    return e[2] + ":" + e[3];
};
var dn = (t) => {
  const e = t && Se2(t);
  if (e)
    return e.pop();
};
async function yf(t) {
  const { cacao: e, projectId: n } = t, { s: r, p: o } = e, s = qr2(o, o.iss), i = dn(o.iss);
  return await Cr2(i, s, r, Vr2(o.iss), n);
}
var qr2 = (t, e) => {
  const n = `${t.domain} wants you to sign in with your Ethereum account:`, r = dn(e);
  if (!t.aud && !t.uri)
    throw new Error("Either `aud` or `uri` is required to construct the message");
  let o = t.statement || void 0;
  const s = `URI: ${t.aud || t.uri}`, i = `Version: ${t.version}`, f = `Chain ID: ${Mr2(e)}`, a = `Nonce: ${t.nonce}`, l = `Issued At: ${t.iat}`, c = t.exp ? `Expiration Time: ${t.exp}` : void 0, u = t.nbf ? `Not Before: ${t.nbf}` : void 0, h = t.requestId ? `Request ID: ${t.requestId}` : void 0, g = t.resources ? `Resources:${t.resources.map((y) => `
- ${y}`).join("")}` : void 0, w = Oe2(t.resources);
  if (w) {
    const y = Lt2(w);
    o = gn2(o, y);
  }
  return [n, r, "", o, "", s, i, f, a, l, c, u, h, g].filter((y) => y != null).join(`
`);
};
function mf(t, e, n) {
  return n.includes("did:pkh:") || (n = `did:pkh:${n}`), { h: { t: "caip122" }, p: { iss: n, domain: t.domain, aud: t.aud, version: t.version, nonce: t.nonce, iat: t.iat, statement: t.statement, requestId: t.requestId, resources: t.resources, nbf: t.nbf, exp: t.exp }, s: e };
}
function wf(t) {
  var e;
  const { authPayload: n, chains: r, methods: o } = t, s = n.statement || "";
  if (!(r != null && r.length))
    return n;
  const i = n.chains, f = Je2(i, r);
  if (!(f != null && f.length))
    throw new Error("No supported chains");
  const a = Kr2(n.resources);
  if (!a)
    return n;
  bt2(a);
  const l = Fr2(a, "eip155");
  let c = (n == null ? void 0 : n.resources) || [];
  if (l != null && l.length) {
    const u = zr2(l), h = Je2(u, o);
    if (!(h != null && h.length))
      throw new Error(`Supported methods don't satisfy the requested: ${JSON.stringify(u)}, supported: ${JSON.stringify(o)}`);
    const g = hn("request", h, { chains: f }), w = Yr2(a, "eip155", g);
    c = ((e = n == null ? void 0 : n.resources) == null ? void 0 : e.slice(0, -1)) || [], c.push(Ne2(w));
  }
  return Dr2(ln({}, n), { statement: Jr2(s, Oe2(c)), chains: f, resources: n != null && n.resources || c.length > 0 ? c : void 0 });
}
function Kr2(t) {
  const e = Oe2(t);
  if (e && pn(e))
    return Lt2(e);
}
function xf(t, e) {
  var n;
  return (n = t == null ? void 0 : t.att) == null ? void 0 : n.hasOwnProperty(e);
}
function Fr2(t, e) {
  var n, r;
  return (n = t == null ? void 0 : t.att) != null && n[e] ? Object.keys((r = t == null ? void 0 : t.att) == null ? void 0 : r[e]) : [];
}
function vf(t) {
  return (t == null ? void 0 : t.map((e) => Object.keys(e))) || [];
}
function zr2(t) {
  return (t == null ? void 0 : t.map((e) => {
    var n;
    return (n = e.split("/")) == null ? void 0 : n[1];
  })) || [];
}
function Gr2(t) {
  return Buffer.from(JSON.stringify(t)).toString("base64");
}
function Zr2(t) {
  return JSON.parse(Buffer.from(t, "base64").toString("utf-8"));
}
function bt2(t) {
  if (!t)
    throw new Error("No recap provided, value is undefined");
  if (!t.att)
    throw new Error("No `att` property found");
  const e = Object.keys(t.att);
  if (!(e != null && e.length))
    throw new Error("No resources found in `att` property");
  e.forEach((n) => {
    const r = t.att[n];
    if (Array.isArray(r))
      throw new Error(`Resource must be an object: ${n}`);
    if (typeof r != "object")
      throw new Error(`Resource must be an object: ${n}`);
    if (!Object.keys(r).length)
      throw new Error(`Resource object is empty: ${n}`);
    Object.keys(r).forEach((o) => {
      const s = r[o];
      if (!Array.isArray(s))
        throw new Error(`Ability limits ${o} must be an array of objects, found: ${s}`);
      if (!s.length)
        throw new Error(`Value of ${o} is empty array, must be an array with objects`);
      s.forEach((i) => {
        if (typeof i != "object")
          throw new Error(`Ability limits (${o}) must be an array of objects, found: ${i}`);
      });
    });
  });
}
function Wr2(t, e, n, r = {}) {
  return n == null ? void 0 : n.sort((o, s) => o.localeCompare(s)), { att: { [t]: hn(e, n, r) } };
}
function Yr2(t, e, n) {
  var r;
  t.att[e] = ln({}, n);
  const o = (r = Object.keys(t.att)) == null ? void 0 : r.sort((i, f) => i.localeCompare(f)), s = { att: {} };
  return o.reduce((i, f) => (i.att[f] = t.att[f], i), s);
}
function hn(t, e, n = {}) {
  e = e == null ? void 0 : e.sort((o, s) => o.localeCompare(s));
  const r = e.map((o) => ({ [`${t}/${o}`]: [n] }));
  return Object.assign({}, ...r);
}
function Ne2(t) {
  return bt2(t), `urn:recap:${Gr2(t).replace(/=/g, "")}`;
}
function Lt2(t) {
  const e = Zr2(t.replace("urn:recap:", ""));
  return bt2(e), e;
}
function Ef(t, e, n) {
  const r = Wr2(t, e, n);
  return Ne2(r);
}
function pn(t) {
  return t && t.includes("urn:recap:");
}
function Bf(t, e) {
  const n = Lt2(t), r = Lt2(e), o = Xr2(n, r);
  return Ne2(o);
}
function Xr2(t, e) {
  bt2(t), bt2(e);
  const n = Object.keys(t.att).concat(Object.keys(e.att)).sort((o, s) => o.localeCompare(s)), r = { att: {} };
  return n.forEach((o) => {
    var s, i;
    Object.keys(((s = t.att) == null ? void 0 : s[o]) || {}).concat(Object.keys(((i = e.att) == null ? void 0 : i[o]) || {})).sort((f, a) => f.localeCompare(a)).forEach((f) => {
      var a, l;
      r.att[o] = Dr2(ln({}, r.att[o]), { [f]: ((a = t.att[o]) == null ? void 0 : a[f]) || ((l = e.att[o]) == null ? void 0 : l[f]) });
    });
  }), r;
}
function gn2(t = "", e) {
  bt2(e);
  const n = "I further authorize the stated URI to perform the following actions on my behalf: ";
  if (t.includes(n))
    return t;
  const r = [];
  let o = 0;
  Object.keys(e.att).forEach((f) => {
    const a = Object.keys(e.att[f]).map((u) => ({ ability: u.split("/")[0], action: u.split("/")[1] }));
    a.sort((u, h) => u.action.localeCompare(h.action));
    const l = {};
    a.forEach((u) => {
      l[u.ability] || (l[u.ability] = []), l[u.ability].push(u.action);
    });
    const c = Object.keys(l).map((u) => (o++, `(${o}) '${u}': '${l[u].join("', '")}' for '${f}'.`));
    r.push(c.join(", ").replace(".,", "."));
  });
  const s = r.join(" "), i = `${n}${s}`;
  return `${t ? t + " " : ""}${i}`;
}
function If(t) {
  var e;
  const n = Lt2(t);
  bt2(n);
  const r = (e = n.att) == null ? void 0 : e.eip155;
  return r ? Object.keys(r).map((o) => o.split("/")[1]) : [];
}
function Af(t) {
  const e = Lt2(t);
  bt2(e);
  const n = [];
  return Object.values(e.att).forEach((r) => {
    Object.values(r).forEach((o) => {
      var s;
      (s = o == null ? void 0 : o[0]) != null && s.chains && n.push(o[0].chains);
    });
  }), [...new Set(n.flat())];
}
function Jr2(t, e) {
  if (!e)
    return t;
  const n = Lt2(e);
  return bt2(n), gn2(t, n);
}
function Oe2(t) {
  if (!t)
    return;
  const e = t == null ? void 0 : t[t.length - 1];
  return pn(e) ? e : void 0;
}
function Qr2(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function bn2(t) {
  if (typeof t != "boolean")
    throw new Error(`boolean expected, not ${t}`);
}
function yn2(t) {
  if (!Number.isSafeInteger(t) || t < 0)
    throw new Error("positive integer expected, got " + t);
}
function nt2(t, ...e) {
  if (!Qr2(t))
    throw new Error("Uint8Array expected");
  if (e.length > 0 && !e.includes(t.length))
    throw new Error("Uint8Array expected of length " + e + ", got length=" + t.length);
}
function to2(t, e = true) {
  if (t.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (e && t.finished)
    throw new Error("Hash#digest() has already been called");
}
function Sf(t, e) {
  nt2(t);
  const n = e.outputLen;
  if (t.length < n)
    throw new Error("digestInto() expects output buffer of length at least " + n);
}
function jt2(t) {
  return new Uint32Array(t.buffer, t.byteOffset, Math.floor(t.byteLength / 4));
}
function Wt2(...t) {
  for (let e = 0; e < t.length; e++)
    t[e].fill(0);
}
function Nf(t) {
  return new DataView(t.buffer, t.byteOffset, t.byteLength);
}
var Of = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
function Uf(t) {
  if (typeof t != "string")
    throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(t));
}
function mn2(t) {
  if (typeof t == "string")
    t = Uf(t);
  else if (Qr2(t))
    t = wn(t);
  else
    throw new Error("Uint8Array expected, got " + typeof t);
  return t;
}
function _f(t, e) {
  if (e == null || typeof e != "object")
    throw new Error("options must be defined");
  return Object.assign(t, e);
}
function Tf(t, e) {
  if (t.length !== e.length)
    return false;
  let n = 0;
  for (let r = 0; r < t.length; r++)
    n |= t[r] ^ e[r];
  return n === 0;
}
var Rf = (t, e) => {
  function n(r, ...o) {
    if (nt2(r), !Of)
      throw new Error("Non little-endian hardware is not yet supported");
    if (t.nonceLength !== void 0) {
      const c = o[0];
      if (!c)
        throw new Error("nonce / iv required");
      t.varSizeNonce ? nt2(c) : nt2(c, t.nonceLength);
    }
    const s = t.tagLength;
    s && o[1] !== void 0 && nt2(o[1]);
    const i = e(r, ...o), f = (c, u) => {
      if (u !== void 0) {
        if (c !== 2)
          throw new Error("cipher output not supported");
        nt2(u);
      }
    };
    let a = false;
    return { encrypt(c, u) {
      if (a)
        throw new Error("cannot encrypt() twice with same key + nonce");
      return a = true, nt2(c), f(i.encrypt.length, u), i.encrypt(c, u);
    }, decrypt(c, u) {
      if (nt2(c), s && c.length < s)
        throw new Error("invalid ciphertext length: smaller than tagLength=" + s);
      return f(i.decrypt.length, u), i.decrypt(c, u);
    } };
  }
  return Object.assign(n, t), n;
};
function eo2(t, e, n = true) {
  if (e === void 0)
    return new Uint8Array(t);
  if (e.length !== t)
    throw new Error("invalid output length, expected " + t + ", got: " + e.length);
  if (n && !Cf(e))
    throw new Error("invalid output, must be aligned");
  return e;
}
function no2(t, e, n, r) {
  if (typeof t.setBigUint64 == "function")
    return t.setBigUint64(e, n, r);
  const o = BigInt(32), s = BigInt(4294967295), i = Number(n >> o & s), f = Number(n & s), a = r ? 4 : 0, l = r ? 0 : 4;
  t.setUint32(e + a, i, r), t.setUint32(e + l, f, r);
}
function $f(t, e, n) {
  bn2(n);
  const r = new Uint8Array(16), o = Nf(r);
  return no2(o, 0, BigInt(e), n), no2(o, 8, BigInt(t), n), r;
}
function Cf(t) {
  return t.byteOffset % 4 === 0;
}
function wn(t) {
  return Uint8Array.from(t);
}
var ro2 = (t) => Uint8Array.from(t.split("").map((e) => e.charCodeAt(0)));
var Lf = ro2("expand 16-byte k");
var jf = ro2("expand 32-byte k");
var kf = jt2(Lf);
var Pf = jt2(jf);
function D(t, e) {
  return t << e | t >>> 32 - e;
}
function xn2(t) {
  return t.byteOffset % 4 === 0;
}
var Ue2 = 64;
var Hf = 16;
var oo2 = 2 ** 32 - 1;
var so2 = new Uint32Array();
function Df(t, e, n, r, o, s, i, f) {
  const a = o.length, l = new Uint8Array(Ue2), c = jt2(l), u = xn2(o) && xn2(s), h = u ? jt2(o) : so2, g = u ? jt2(s) : so2;
  for (let w = 0; w < a; i++) {
    if (t(e, n, r, c, i, f), i >= oo2)
      throw new Error("arx: counter overflow");
    const y = Math.min(Ue2, a - w);
    if (u && y === Ue2) {
      const x2 = w / 4;
      if (w % 4 !== 0)
        throw new Error("arx: invalid block position");
      for (let R = 0, M2; R < Hf; R++)
        M2 = x2 + R, g[M2] = h[M2] ^ c[R];
      w += Ue2;
      continue;
    }
    for (let x2 = 0, R; x2 < y; x2++)
      R = w + x2, s[R] = o[R] ^ l[x2];
    w += y;
  }
}
function Mf(t, e) {
  const { allowShortKeys: n, extendNonceFn: r, counterLength: o, counterRight: s, rounds: i } = _f({ allowShortKeys: false, counterLength: 8, counterRight: false, rounds: 20 }, e);
  if (typeof t != "function")
    throw new Error("core must be a function");
  return yn2(o), yn2(i), bn2(s), bn2(n), (f, a, l, c, u = 0) => {
    nt2(f), nt2(a), nt2(l);
    const h = l.length;
    if (c === void 0 && (c = new Uint8Array(h)), nt2(c), yn2(u), u < 0 || u >= oo2)
      throw new Error("arx: counter overflow");
    if (c.length < h)
      throw new Error(`arx: output (${c.length}) is shorter than data (${h})`);
    const g = [];
    let w = f.length, y, x2;
    if (w === 32)
      g.push(y = wn(f)), x2 = Pf;
    else if (w === 16 && n)
      y = new Uint8Array(32), y.set(f), y.set(f, 16), x2 = kf, g.push(y);
    else
      throw new Error(`arx: invalid 32-byte key, got length=${w}`);
    xn2(a) || g.push(a = wn(a));
    const R = jt2(y);
    if (r) {
      if (a.length !== 24)
        throw new Error("arx: extended nonce must be 24 bytes");
      r(x2, R, jt2(a.subarray(0, 16)), R), a = a.subarray(16);
    }
    const M2 = 16 - o;
    if (M2 !== a.length)
      throw new Error(`arx: nonce must be ${M2} or 16 bytes`);
    if (M2 !== 12) {
      const V = new Uint8Array(12);
      V.set(a, s ? 0 : 12 - a.length), a = V, g.push(a);
    }
    const L = jt2(a);
    return Df(t, x2, R, L, l, c, u, i), Wt2(...g), c;
  };
}
var G2 = (t, e) => t[e++] & 255 | (t[e++] & 255) << 8;
var Vf = class {
  constructor(e) {
    this.blockLen = 16, this.outputLen = 16, this.buffer = new Uint8Array(16), this.r = new Uint16Array(10), this.h = new Uint16Array(10), this.pad = new Uint16Array(8), this.pos = 0, this.finished = false, e = mn2(e), nt2(e, 32);
    const n = G2(e, 0), r = G2(e, 2), o = G2(e, 4), s = G2(e, 6), i = G2(e, 8), f = G2(e, 10), a = G2(e, 12), l = G2(e, 14);
    this.r[0] = n & 8191, this.r[1] = (n >>> 13 | r << 3) & 8191, this.r[2] = (r >>> 10 | o << 6) & 7939, this.r[3] = (o >>> 7 | s << 9) & 8191, this.r[4] = (s >>> 4 | i << 12) & 255, this.r[5] = i >>> 1 & 8190, this.r[6] = (i >>> 14 | f << 2) & 8191, this.r[7] = (f >>> 11 | a << 5) & 8065, this.r[8] = (a >>> 8 | l << 8) & 8191, this.r[9] = l >>> 5 & 127;
    for (let c = 0; c < 8; c++)
      this.pad[c] = G2(e, 16 + 2 * c);
  }
  process(e, n, r = false) {
    const o = r ? 0 : 2048, { h: s, r: i } = this, f = i[0], a = i[1], l = i[2], c = i[3], u = i[4], h = i[5], g = i[6], w = i[7], y = i[8], x2 = i[9], R = G2(e, n + 0), M2 = G2(e, n + 2), L = G2(e, n + 4), V = G2(e, n + 6), _ = G2(e, n + 8), k2 = G2(e, n + 10), j2 = G2(e, n + 12), $ = G2(e, n + 14);
    let d = s[0] + (R & 8191), m = s[1] + ((R >>> 13 | M2 << 3) & 8191), p = s[2] + ((M2 >>> 10 | L << 6) & 8191), b = s[3] + ((L >>> 7 | V << 9) & 8191), v = s[4] + ((V >>> 4 | _ << 12) & 8191), B = s[5] + (_ >>> 1 & 8191), E = s[6] + ((_ >>> 14 | k2 << 2) & 8191), I = s[7] + ((k2 >>> 11 | j2 << 5) & 8191), S = s[8] + ((j2 >>> 8 | $ << 8) & 8191), O = s[9] + ($ >>> 5 | o), A = 0, T = A + d * f + m * (5 * x2) + p * (5 * y) + b * (5 * w) + v * (5 * g);
    A = T >>> 13, T &= 8191, T += B * (5 * h) + E * (5 * u) + I * (5 * c) + S * (5 * l) + O * (5 * a), A += T >>> 13, T &= 8191;
    let U = A + d * a + m * f + p * (5 * x2) + b * (5 * y) + v * (5 * w);
    A = U >>> 13, U &= 8191, U += B * (5 * g) + E * (5 * h) + I * (5 * u) + S * (5 * c) + O * (5 * l), A += U >>> 13, U &= 8191;
    let C2 = A + d * l + m * a + p * f + b * (5 * x2) + v * (5 * y);
    A = C2 >>> 13, C2 &= 8191, C2 += B * (5 * w) + E * (5 * g) + I * (5 * h) + S * (5 * u) + O * (5 * c), A += C2 >>> 13, C2 &= 8191;
    let H2 = A + d * c + m * l + p * a + b * f + v * (5 * x2);
    A = H2 >>> 13, H2 &= 8191, H2 += B * (5 * y) + E * (5 * w) + I * (5 * g) + S * (5 * h) + O * (5 * u), A += H2 >>> 13, H2 &= 8191;
    let q = A + d * u + m * c + p * l + b * a + v * f;
    A = q >>> 13, q &= 8191, q += B * (5 * x2) + E * (5 * y) + I * (5 * w) + S * (5 * g) + O * (5 * h), A += q >>> 13, q &= 8191;
    let P2 = A + d * h + m * u + p * c + b * l + v * a;
    A = P2 >>> 13, P2 &= 8191, P2 += B * f + E * (5 * x2) + I * (5 * y) + S * (5 * w) + O * (5 * g), A += P2 >>> 13, P2 &= 8191;
    let K3 = A + d * g + m * h + p * u + b * c + v * l;
    A = K3 >>> 13, K3 &= 8191, K3 += B * a + E * f + I * (5 * x2) + S * (5 * y) + O * (5 * w), A += K3 >>> 13, K3 &= 8191;
    let et = A + d * w + m * g + p * h + b * u + v * c;
    A = et >>> 13, et &= 8191, et += B * l + E * a + I * f + S * (5 * x2) + O * (5 * y), A += et >>> 13, et &= 8191;
    let Z = A + d * y + m * w + p * g + b * h + v * u;
    A = Z >>> 13, Z &= 8191, Z += B * c + E * l + I * a + S * f + O * (5 * x2), A += Z >>> 13, Z &= 8191;
    let z = A + d * x2 + m * y + p * w + b * g + v * h;
    A = z >>> 13, z &= 8191, z += B * u + E * c + I * l + S * a + O * f, A += z >>> 13, z &= 8191, A = (A << 2) + A | 0, A = A + T | 0, T = A & 8191, A = A >>> 13, U += A, s[0] = T, s[1] = U, s[2] = C2, s[3] = H2, s[4] = q, s[5] = P2, s[6] = K3, s[7] = et, s[8] = Z, s[9] = z;
  }
  finalize() {
    const { h: e, pad: n } = this, r = new Uint16Array(10);
    let o = e[1] >>> 13;
    e[1] &= 8191;
    for (let f = 2; f < 10; f++)
      e[f] += o, o = e[f] >>> 13, e[f] &= 8191;
    e[0] += o * 5, o = e[0] >>> 13, e[0] &= 8191, e[1] += o, o = e[1] >>> 13, e[1] &= 8191, e[2] += o, r[0] = e[0] + 5, o = r[0] >>> 13, r[0] &= 8191;
    for (let f = 1; f < 10; f++)
      r[f] = e[f] + o, o = r[f] >>> 13, r[f] &= 8191;
    r[9] -= 8192;
    let s = (o ^ 1) - 1;
    for (let f = 0; f < 10; f++)
      r[f] &= s;
    s = ~s;
    for (let f = 0; f < 10; f++)
      e[f] = e[f] & s | r[f];
    e[0] = (e[0] | e[1] << 13) & 65535, e[1] = (e[1] >>> 3 | e[2] << 10) & 65535, e[2] = (e[2] >>> 6 | e[3] << 7) & 65535, e[3] = (e[3] >>> 9 | e[4] << 4) & 65535, e[4] = (e[4] >>> 12 | e[5] << 1 | e[6] << 14) & 65535, e[5] = (e[6] >>> 2 | e[7] << 11) & 65535, e[6] = (e[7] >>> 5 | e[8] << 8) & 65535, e[7] = (e[8] >>> 8 | e[9] << 5) & 65535;
    let i = e[0] + n[0];
    e[0] = i & 65535;
    for (let f = 1; f < 8; f++)
      i = (e[f] + n[f] | 0) + (i >>> 16) | 0, e[f] = i & 65535;
    Wt2(r);
  }
  update(e) {
    to2(this), e = mn2(e), nt2(e);
    const { buffer: n, blockLen: r } = this, o = e.length;
    for (let s = 0; s < o; ) {
      const i = Math.min(r - this.pos, o - s);
      if (i === r) {
        for (; r <= o - s; s += r)
          this.process(e, s);
        continue;
      }
      n.set(e.subarray(s, s + i), this.pos), this.pos += i, s += i, this.pos === r && (this.process(n, 0, false), this.pos = 0);
    }
    return this;
  }
  destroy() {
    Wt2(this.h, this.r, this.buffer, this.pad);
  }
  digestInto(e) {
    to2(this), Sf(e, this), this.finished = true;
    const { buffer: n, h: r } = this;
    let { pos: o } = this;
    if (o) {
      for (n[o++] = 1; o < 16; o++)
        n[o] = 0;
      this.process(n, 0, true);
    }
    this.finalize();
    let s = 0;
    for (let i = 0; i < 8; i++)
      e[s++] = r[i] >>> 0, e[s++] = r[i] >>> 8;
    return e;
  }
  digest() {
    const { buffer: e, outputLen: n } = this;
    this.digestInto(e);
    const r = e.slice(0, n);
    return this.destroy(), r;
  }
};
function qf(t) {
  const e = (r, o) => t(o).update(mn2(r)).digest(), n = t(new Uint8Array(32));
  return e.outputLen = n.outputLen, e.blockLen = n.blockLen, e.create = (r) => t(r), e;
}
var Kf = qf((t) => new Vf(t));
function Ff(t, e, n, r, o, s = 20) {
  let i = t[0], f = t[1], a = t[2], l = t[3], c = e[0], u = e[1], h = e[2], g = e[3], w = e[4], y = e[5], x2 = e[6], R = e[7], M2 = o, L = n[0], V = n[1], _ = n[2], k2 = i, j2 = f, $ = a, d = l, m = c, p = u, b = h, v = g, B = w, E = y, I = x2, S = R, O = M2, A = L, T = V, U = _;
  for (let H2 = 0; H2 < s; H2 += 2)
    k2 = k2 + m | 0, O = D(O ^ k2, 16), B = B + O | 0, m = D(m ^ B, 12), k2 = k2 + m | 0, O = D(O ^ k2, 8), B = B + O | 0, m = D(m ^ B, 7), j2 = j2 + p | 0, A = D(A ^ j2, 16), E = E + A | 0, p = D(p ^ E, 12), j2 = j2 + p | 0, A = D(A ^ j2, 8), E = E + A | 0, p = D(p ^ E, 7), $ = $ + b | 0, T = D(T ^ $, 16), I = I + T | 0, b = D(b ^ I, 12), $ = $ + b | 0, T = D(T ^ $, 8), I = I + T | 0, b = D(b ^ I, 7), d = d + v | 0, U = D(U ^ d, 16), S = S + U | 0, v = D(v ^ S, 12), d = d + v | 0, U = D(U ^ d, 8), S = S + U | 0, v = D(v ^ S, 7), k2 = k2 + p | 0, U = D(U ^ k2, 16), I = I + U | 0, p = D(p ^ I, 12), k2 = k2 + p | 0, U = D(U ^ k2, 8), I = I + U | 0, p = D(p ^ I, 7), j2 = j2 + b | 0, O = D(O ^ j2, 16), S = S + O | 0, b = D(b ^ S, 12), j2 = j2 + b | 0, O = D(O ^ j2, 8), S = S + O | 0, b = D(b ^ S, 7), $ = $ + v | 0, A = D(A ^ $, 16), B = B + A | 0, v = D(v ^ B, 12), $ = $ + v | 0, A = D(A ^ $, 8), B = B + A | 0, v = D(v ^ B, 7), d = d + m | 0, T = D(T ^ d, 16), E = E + T | 0, m = D(m ^ E, 12), d = d + m | 0, T = D(T ^ d, 8), E = E + T | 0, m = D(m ^ E, 7);
  let C2 = 0;
  r[C2++] = i + k2 | 0, r[C2++] = f + j2 | 0, r[C2++] = a + $ | 0, r[C2++] = l + d | 0, r[C2++] = c + m | 0, r[C2++] = u + p | 0, r[C2++] = h + b | 0, r[C2++] = g + v | 0, r[C2++] = w + B | 0, r[C2++] = y + E | 0, r[C2++] = x2 + I | 0, r[C2++] = R + S | 0, r[C2++] = M2 + O | 0, r[C2++] = L + A | 0, r[C2++] = V + T | 0, r[C2++] = _ + U | 0;
}
var zf = Mf(Ff, { counterRight: false, counterLength: 4, allowShortKeys: false });
var Gf = new Uint8Array(16);
var io2 = (t, e) => {
  t.update(e);
  const n = e.length % 16;
  n && t.update(Gf.subarray(n));
};
var Zf = new Uint8Array(32);
function fo2(t, e, n, r, o) {
  const s = t(e, n, Zf), i = Kf.create(s);
  o && io2(i, o), io2(i, r);
  const f = $f(r.length, o ? o.length : 0, true);
  i.update(f);
  const a = i.digest();
  return Wt2(s, f), a;
}
var Wf = (t) => (e, n, r) => ({ encrypt(s, i) {
  const f = s.length;
  i = eo2(f + 16, i, false), i.set(s);
  const a = i.subarray(0, -16);
  t(e, n, a, a, 1);
  const l = fo2(t, e, n, a, r);
  return i.set(l, f), Wt2(l), i;
}, decrypt(s, i) {
  i = eo2(s.length - 16, i, false);
  const f = s.subarray(0, -16), a = s.subarray(-16), l = fo2(t, e, n, f, r);
  if (!Tf(a, l))
    throw new Error("invalid tag");
  return i.set(s.subarray(0, -16)), t(e, n, i, i, 1), Wt2(l), i;
} });
var co2 = Rf({ blockSize: 64, nonceLength: 12, tagLength: 16 }, Wf(zf));
var ao2 = class extends Ie2 {
  constructor(e, n) {
    super(), this.finished = false, this.destroyed = false, rn2(e);
    const r = ht2(n);
    if (this.iHash = e.create(), typeof this.iHash.update != "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const o = this.blockLen, s = new Uint8Array(o);
    s.set(r.length > o ? e.create().update(r).digest() : r);
    for (let i = 0; i < s.length; i++)
      s[i] ^= 54;
    this.iHash.update(s), this.oHash = e.create();
    for (let i = 0; i < s.length; i++)
      s[i] ^= 106;
    this.oHash.update(s), ut2(s);
  }
  update(e) {
    return Nt2(this), this.iHash.update(e), this;
  }
  digestInto(e) {
    Nt2(this), at(e, this.outputLen), this.finished = true, this.iHash.digestInto(e), this.oHash.update(e), this.oHash.digestInto(e), this.destroy();
  }
  digest() {
    const e = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(e), e;
  }
  _cloneInto(e) {
    e || (e = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: n, iHash: r, finished: o, destroyed: s, blockLen: i, outputLen: f } = this;
    return e = e, e.finished = o, e.destroyed = s, e.blockLen = i, e.outputLen = f, e.oHash = n._cloneInto(e.oHash), e.iHash = r._cloneInto(e.iHash), e;
  }
  clone() {
    return this._cloneInto();
  }
  destroy() {
    this.destroyed = true, this.oHash.destroy(), this.iHash.destroy();
  }
};
var _e2 = (t, e, n) => new ao2(t, e).update(n).digest();
_e2.create = (t, e) => new ao2(t, e);
function Yf(t, e, n) {
  return rn2(t), n === void 0 && (n = new Uint8Array(t.outputLen)), _e2(t, ht2(n), ht2(e));
}
var vn2 = Uint8Array.from([0]);
var uo2 = Uint8Array.of();
function Xf(t, e, n, r = 32) {
  rn2(t), mt(r);
  const o = t.outputLen;
  if (r > 255 * o)
    throw new Error("Length should be <= 255*HashLen");
  const s = Math.ceil(r / o);
  n === void 0 && (n = uo2);
  const i = new Uint8Array(s * o), f = _e2.create(t, e), a = f._cloneInto(), l = new Uint8Array(f.outputLen);
  for (let c = 0; c < s; c++)
    vn2[0] = c + 1, a.update(c === 0 ? uo2 : l).update(n).update(vn2).digestInto(l), i.set(l, o * c), f._cloneInto(a);
  return f.destroy(), a.destroy(), ut2(l, vn2), i.slice(0, r);
}
var Jf = (t, e, n, r, o) => Xf(t, Yf(t, e, n), r, o);
var Te2 = Ae2;
var En2 = BigInt(0);
var Bn2 = BigInt(1);
function Re2(t, e) {
  if (typeof e != "boolean")
    throw new Error(t + " boolean expected, got " + e);
}
function $e2(t) {
  const e = t.toString(16);
  return e.length & 1 ? "0" + e : e;
}
function lo2(t) {
  if (typeof t != "string")
    throw new Error("hex string expected, got " + typeof t);
  return t === "" ? En2 : BigInt("0x" + t);
}
function Ce2(t) {
  return lo2(ce(t));
}
function Le2(t) {
  return at(t), lo2(ce(Uint8Array.from(t).reverse()));
}
function In2(t, e) {
  return fn(t.toString(16).padStart(e * 2, "0"));
}
function An2(t, e) {
  return In2(t, e).reverse();
}
function rt2(t, e, n) {
  let r;
  if (typeof e == "string")
    try {
      r = fn(e);
    } catch (s) {
      throw new Error(t + " must be hex string or Uint8Array, cause: " + s);
    }
  else if (nn2(e))
    r = Uint8Array.from(e);
  else
    throw new Error(t + " must be hex string or Uint8Array");
  const o = r.length;
  if (typeof n == "number" && o !== n)
    throw new Error(t + " of length " + n + " expected, got " + o);
  return r;
}
var Sn2 = (t) => typeof t == "bigint" && En2 <= t;
function Qf(t, e, n) {
  return Sn2(t) && Sn2(e) && Sn2(n) && e <= t && t < n;
}
function Nn2(t, e, n, r) {
  if (!Qf(e, n, r))
    throw new Error("expected valid " + t + ": " + n + " <= n < " + r + ", got " + e);
}
function tc(t) {
  let e;
  for (e = 0; t > En2; t >>= Bn2, e += 1)
    ;
  return e;
}
var je2 = (t) => (Bn2 << BigInt(t)) - Bn2;
function ec(t, e, n) {
  if (typeof t != "number" || t < 2)
    throw new Error("hashLen must be a number");
  if (typeof e != "number" || e < 2)
    throw new Error("qByteLen must be a number");
  if (typeof n != "function")
    throw new Error("hmacFn must be a function");
  const r = (g) => new Uint8Array(g), o = (g) => Uint8Array.of(g);
  let s = r(t), i = r(t), f = 0;
  const a = () => {
    s.fill(1), i.fill(0), f = 0;
  }, l = (...g) => n(i, s, ...g), c = (g = r(0)) => {
    i = l(o(0), g), s = l(), g.length !== 0 && (i = l(o(1), g), s = l());
  }, u = () => {
    if (f++ >= 1e3)
      throw new Error("drbg: tried 1000 values");
    let g = 0;
    const w = [];
    for (; g < e; ) {
      s = l();
      const y = s.slice();
      w.push(y), g += s.length;
    }
    return Ht2(...w);
  };
  return (g, w) => {
    a(), c(g);
    let y;
    for (; !(y = w(u())); )
      c();
    return a(), y;
  };
}
function ke2(t, e, n = {}) {
  if (!t || typeof t != "object")
    throw new Error("expected valid options object");
  function r(o, s, i) {
    const f = t[o];
    if (i && f === void 0)
      return;
    const a = typeof f;
    if (a !== s || f === null)
      throw new Error(`param "${o}" is invalid: expected ${s}, got ${a}`);
  }
  Object.entries(e).forEach(([o, s]) => r(o, s, false)), Object.entries(n).forEach(([o, s]) => r(o, s, true));
}
function ho2(t) {
  const e = /* @__PURE__ */ new WeakMap();
  return (n, ...r) => {
    const o = e.get(n);
    if (o !== void 0)
      return o;
    const s = t(n, ...r);
    return e.set(n, s), s;
  };
}
var ot = BigInt(0);
var Q2 = BigInt(1);
var Dt2 = BigInt(2);
var nc = BigInt(3);
var po2 = BigInt(4);
var go2 = BigInt(5);
var bo2 = BigInt(8);
function lt2(t, e) {
  const n = t % e;
  return n >= ot ? n : e + n;
}
function pt(t, e, n) {
  let r = t;
  for (; e-- > ot; )
    r *= r, r %= n;
  return r;
}
function yo2(t, e) {
  if (t === ot)
    throw new Error("invert: expected non-zero number");
  if (e <= ot)
    throw new Error("invert: expected positive modulus, got " + e);
  let n = lt2(t, e), r = e, o = ot, s = Q2;
  for (; n !== ot; ) {
    const f = r / n, a = r % n, l = o - s * f;
    r = n, n = a, o = s, s = l;
  }
  if (r !== Q2)
    throw new Error("invert: does not exist");
  return lt2(o, e);
}
function mo2(t, e) {
  const n = (t.ORDER + Q2) / po2, r = t.pow(e, n);
  if (!t.eql(t.sqr(r), e))
    throw new Error("Cannot find square root");
  return r;
}
function rc(t, e) {
  const n = (t.ORDER - go2) / bo2, r = t.mul(e, Dt2), o = t.pow(r, n), s = t.mul(e, o), i = t.mul(t.mul(s, Dt2), o), f = t.mul(s, t.sub(i, t.ONE));
  if (!t.eql(t.sqr(f), e))
    throw new Error("Cannot find square root");
  return f;
}
function oc(t) {
  if (t < BigInt(3))
    throw new Error("sqrt is not defined for small field");
  let e = t - Q2, n = 0;
  for (; e % Dt2 === ot; )
    e /= Dt2, n++;
  let r = Dt2;
  const o = Yt2(t);
  for (; xo2(o, r) === 1; )
    if (r++ > 1e3)
      throw new Error("Cannot find square root: probably non-prime P");
  if (n === 1)
    return mo2;
  let s = o.pow(r, e);
  const i = (e + Q2) / Dt2;
  return function(a, l) {
    if (a.is0(l))
      return l;
    if (xo2(a, l) !== 1)
      throw new Error("Cannot find square root");
    let c = n, u = a.mul(a.ONE, s), h = a.pow(l, e), g = a.pow(l, i);
    for (; !a.eql(h, a.ONE); ) {
      if (a.is0(h))
        return a.ZERO;
      let w = 1, y = a.sqr(h);
      for (; !a.eql(y, a.ONE); )
        if (w++, y = a.sqr(y), w === c)
          throw new Error("Cannot find square root");
      const x2 = Q2 << BigInt(c - w - 1), R = a.pow(u, x2);
      c = w, u = a.sqr(R), h = a.mul(h, u), g = a.mul(g, R);
    }
    return g;
  };
}
function sc(t) {
  return t % po2 === nc ? mo2 : t % bo2 === go2 ? rc : oc(t);
}
var ic = ["create", "isValid", "is0", "neg", "inv", "sqrt", "sqr", "eql", "add", "sub", "mul", "pow", "div", "addN", "subN", "mulN", "sqrN"];
function fc(t) {
  const e = { ORDER: "bigint", MASK: "bigint", BYTES: "number", BITS: "number" }, n = ic.reduce((r, o) => (r[o] = "function", r), e);
  return ke2(t, n), t;
}
function cc(t, e, n) {
  if (n < ot)
    throw new Error("invalid exponent, negatives unsupported");
  if (n === ot)
    return t.ONE;
  if (n === Q2)
    return e;
  let r = t.ONE, o = e;
  for (; n > ot; )
    n & Q2 && (r = t.mul(r, o)), o = t.sqr(o), n >>= Q2;
  return r;
}
function wo2(t, e, n = false) {
  const r = new Array(e.length).fill(n ? t.ZERO : void 0), o = e.reduce((i, f, a) => t.is0(f) ? i : (r[a] = i, t.mul(i, f)), t.ONE), s = t.inv(o);
  return e.reduceRight((i, f, a) => t.is0(f) ? i : (r[a] = t.mul(i, r[a]), t.mul(i, f)), s), r;
}
function xo2(t, e) {
  const n = (t.ORDER - Q2) / Dt2, r = t.pow(e, n), o = t.eql(r, t.ONE), s = t.eql(r, t.ZERO), i = t.eql(r, t.neg(t.ONE));
  if (!o && !s && !i)
    throw new Error("invalid Legendre symbol result");
  return o ? 1 : s ? 0 : -1;
}
function ac(t, e) {
  e !== void 0 && mt(e);
  const n = e !== void 0 ? e : t.toString(2).length, r = Math.ceil(n / 8);
  return { nBitLength: n, nByteLength: r };
}
function Yt2(t, e, n = false, r = {}) {
  if (t <= ot)
    throw new Error("invalid field: expected ORDER > 0, got " + t);
  let o, s;
  if (typeof e == "object" && e != null) {
    if (r.sqrt || n)
      throw new Error("cannot specify opts in two arguments");
    const c = e;
    c.BITS && (o = c.BITS), c.sqrt && (s = c.sqrt), typeof c.isLE == "boolean" && (n = c.isLE);
  } else
    typeof e == "number" && (o = e), r.sqrt && (s = r.sqrt);
  const { nBitLength: i, nByteLength: f } = ac(t, o);
  if (f > 2048)
    throw new Error("invalid field: expected ORDER of <= 2048 bytes");
  let a;
  const l = Object.freeze({ ORDER: t, isLE: n, BITS: i, BYTES: f, MASK: je2(i), ZERO: ot, ONE: Q2, create: (c) => lt2(c, t), isValid: (c) => {
    if (typeof c != "bigint")
      throw new Error("invalid field element: expected bigint, got " + typeof c);
    return ot <= c && c < t;
  }, is0: (c) => c === ot, isValidNot0: (c) => !l.is0(c) && l.isValid(c), isOdd: (c) => (c & Q2) === Q2, neg: (c) => lt2(-c, t), eql: (c, u) => c === u, sqr: (c) => lt2(c * c, t), add: (c, u) => lt2(c + u, t), sub: (c, u) => lt2(c - u, t), mul: (c, u) => lt2(c * u, t), pow: (c, u) => cc(l, c, u), div: (c, u) => lt2(c * yo2(u, t), t), sqrN: (c) => c * c, addN: (c, u) => c + u, subN: (c, u) => c - u, mulN: (c, u) => c * u, inv: (c) => yo2(c, t), sqrt: s || ((c) => (a || (a = sc(t)), a(l, c))), toBytes: (c) => n ? An2(c, f) : In2(c, f), fromBytes: (c) => {
    if (c.length !== f)
      throw new Error("Field.fromBytes: expected " + f + " bytes, got " + c.length);
    return n ? Le2(c) : Ce2(c);
  }, invertBatch: (c) => wo2(l, c), cmov: (c, u, h) => h ? u : c });
  return Object.freeze(l);
}
function vo2(t) {
  if (typeof t != "bigint")
    throw new Error("field order must be bigint");
  const e = t.toString(2).length;
  return Math.ceil(e / 8);
}
function Eo2(t) {
  const e = vo2(t);
  return e + Math.ceil(e / 2);
}
function uc(t, e, n = false) {
  const r = t.length, o = vo2(e), s = Eo2(e);
  if (r < 16 || r < s || r > 1024)
    throw new Error("expected " + s + "-1024 bytes of input, got " + r);
  const i = n ? Le2(t) : Ce2(t), f = lt2(i, e - Q2) + Q2;
  return n ? An2(f, o) : In2(f, o);
}
var Xt2 = BigInt(0);
var Mt2 = BigInt(1);
function le2(t, e) {
  const n = e.negate();
  return t ? n : e;
}
function lc(t, e, n) {
  const r = e === "pz" ? (i) => i.pz : (i) => i.ez, o = wo2(t.Fp, n.map(r));
  return n.map((i, f) => i.toAffine(o[f])).map(t.fromAffine);
}
function Bo2(t, e) {
  if (!Number.isSafeInteger(t) || t <= 0 || t > e)
    throw new Error("invalid window size, expected [1.." + e + "], got W=" + t);
}
function On2(t, e) {
  Bo2(t, e);
  const n = Math.ceil(e / t) + 1, r = 2 ** (t - 1), o = 2 ** t, s = je2(t), i = BigInt(t);
  return { windows: n, windowSize: r, mask: s, maxNumber: o, shiftBy: i };
}
function Io2(t, e, n) {
  const { windowSize: r, mask: o, maxNumber: s, shiftBy: i } = n;
  let f = Number(t & o), a = t >> i;
  f > r && (f -= s, a += Mt2);
  const l = e * r, c = l + Math.abs(f) - 1, u = f === 0, h = f < 0, g = e % 2 !== 0;
  return { nextN: a, offset: c, isZero: u, isNeg: h, isNegF: g, offsetF: l };
}
function dc(t, e) {
  if (!Array.isArray(t))
    throw new Error("array expected");
  t.forEach((n, r) => {
    if (!(n instanceof e))
      throw new Error("invalid point at index " + r);
  });
}
function hc(t, e) {
  if (!Array.isArray(t))
    throw new Error("array of scalars expected");
  t.forEach((n, r) => {
    if (!e.isValid(n))
      throw new Error("invalid scalar at index " + r);
  });
}
var Un2 = /* @__PURE__ */ new WeakMap();
var Ao2 = /* @__PURE__ */ new WeakMap();
function _n2(t) {
  return Ao2.get(t) || 1;
}
function So2(t) {
  if (t !== Xt2)
    throw new Error("invalid wNAF");
}
function pc(t, e) {
  return { constTimeNegate: le2, hasPrecomputes(n) {
    return _n2(n) !== 1;
  }, unsafeLadder(n, r, o = t.ZERO) {
    let s = n;
    for (; r > Xt2; )
      r & Mt2 && (o = o.add(s)), s = s.double(), r >>= Mt2;
    return o;
  }, precomputeWindow(n, r) {
    const { windows: o, windowSize: s } = On2(r, e), i = [];
    let f = n, a = f;
    for (let l = 0; l < o; l++) {
      a = f, i.push(a);
      for (let c = 1; c < s; c++)
        a = a.add(f), i.push(a);
      f = a.double();
    }
    return i;
  }, wNAF(n, r, o) {
    let s = t.ZERO, i = t.BASE;
    const f = On2(n, e);
    for (let a = 0; a < f.windows; a++) {
      const { nextN: l, offset: c, isZero: u, isNeg: h, isNegF: g, offsetF: w } = Io2(o, a, f);
      o = l, u ? i = i.add(le2(g, r[w])) : s = s.add(le2(h, r[c]));
    }
    return So2(o), { p: s, f: i };
  }, wNAFUnsafe(n, r, o, s = t.ZERO) {
    const i = On2(n, e);
    for (let f = 0; f < i.windows && o !== Xt2; f++) {
      const { nextN: a, offset: l, isZero: c, isNeg: u } = Io2(o, f, i);
      if (o = a, !c) {
        const h = r[l];
        s = s.add(u ? h.negate() : h);
      }
    }
    return So2(o), s;
  }, getPrecomputes(n, r, o) {
    let s = Un2.get(r);
    return s || (s = this.precomputeWindow(r, n), n !== 1 && (typeof o == "function" && (s = o(s)), Un2.set(r, s))), s;
  }, wNAFCached(n, r, o) {
    const s = _n2(n);
    return this.wNAF(s, this.getPrecomputes(s, n, o), r);
  }, wNAFCachedUnsafe(n, r, o, s) {
    const i = _n2(n);
    return i === 1 ? this.unsafeLadder(n, r, s) : this.wNAFUnsafe(i, this.getPrecomputes(i, n, o), r, s);
  }, setWindowSize(n, r) {
    Bo2(r, e), Ao2.set(n, r), Un2.delete(n);
  } };
}
function gc(t, e, n, r) {
  let o = e, s = t.ZERO, i = t.ZERO;
  for (; n > Xt2 || r > Xt2; )
    n & Mt2 && (s = s.add(o)), r & Mt2 && (i = i.add(o)), o = o.double(), n >>= Mt2, r >>= Mt2;
  return { p1: s, p2: i };
}
function bc(t, e, n, r) {
  dc(n, t), hc(r, e);
  const o = n.length, s = r.length;
  if (o !== s)
    throw new Error("arrays of points and scalars must have equal length");
  const i = t.ZERO, f = tc(BigInt(o));
  let a = 1;
  f > 12 ? a = f - 3 : f > 4 ? a = f - 2 : f > 0 && (a = 2);
  const l = je2(a), c = new Array(Number(l) + 1).fill(i), u = Math.floor((e.BITS - 1) / a) * a;
  let h = i;
  for (let g = u; g >= 0; g -= a) {
    c.fill(i);
    for (let y = 0; y < s; y++) {
      const x2 = r[y], R = Number(x2 >> BigInt(g) & l);
      c[R] = c[R].add(n[y]);
    }
    let w = i;
    for (let y = c.length - 1, x2 = i; y > 0; y--)
      x2 = x2.add(c[y]), w = w.add(x2);
    if (h = h.add(w), g !== 0)
      for (let y = 0; y < a; y++)
        h = h.double();
  }
  return h;
}
function No2(t, e) {
  if (e) {
    if (e.ORDER !== t)
      throw new Error("Field.ORDER must match order: Fp == p, Fn == n");
    return fc(e), e;
  } else
    return Yt2(t);
}
function yc(t, e, n = {}) {
  if (!e || typeof e != "object")
    throw new Error(`expected valid ${t} CURVE object`);
  for (const f of ["p", "n", "h"]) {
    const a = e[f];
    if (!(typeof a == "bigint" && a > Xt2))
      throw new Error(`CURVE.${f} must be positive bigint`);
  }
  const r = No2(e.p, n.Fp), o = No2(e.n, n.Fn), i = ["Gx", "Gy", "a", t === "weierstrass" ? "b" : "d"];
  for (const f of i)
    if (!r.isValid(e[f]))
      throw new Error(`CURVE.${f} must be valid field element of CURVE.Fp`);
  return { Fp: r, Fn: o };
}
BigInt(0), BigInt(1), BigInt(2), BigInt(8);
var de2 = BigInt(0);
var Jt2 = BigInt(1);
var Pe2 = BigInt(2);
function mc(t) {
  return ke2(t, { adjustScalarBytes: "function", powPminus2: "function" }), Object.freeze({ ...t });
}
function wc(t) {
  const e = mc(t), { P: n, type: r, adjustScalarBytes: o, powPminus2: s, randomBytes: i } = e, f = r === "x25519";
  if (!f && r !== "x448")
    throw new Error("invalid type");
  const a = i || Zt2, l = f ? 255 : 448, c = f ? 32 : 56, u = BigInt(f ? 9 : 5), h = BigInt(f ? 121665 : 39081), g = f ? Pe2 ** BigInt(254) : Pe2 ** BigInt(447), w = f ? BigInt(8) * Pe2 ** BigInt(251) - Jt2 : BigInt(4) * Pe2 ** BigInt(445) - Jt2, y = g + w + Jt2, x2 = (d) => lt2(d, n), R = M2(u);
  function M2(d) {
    return An2(x2(d), c);
  }
  function L(d) {
    const m = rt2("u coordinate", d, c);
    return f && (m[31] &= 127), x2(Le2(m));
  }
  function V(d) {
    return Le2(o(rt2("scalar", d, c)));
  }
  function _(d, m) {
    const p = $(L(m), V(d));
    if (p === de2)
      throw new Error("invalid private or public key received");
    return M2(p);
  }
  function k2(d) {
    return _(d, R);
  }
  function j2(d, m, p) {
    const b = x2(d * (m - p));
    return m = x2(m - b), p = x2(p + b), { x_2: m, x_3: p };
  }
  function $(d, m) {
    Nn2("u", d, de2, n), Nn2("scalar", m, g, y);
    const p = m, b = d;
    let v = Jt2, B = de2, E = d, I = Jt2, S = de2;
    for (let A = BigInt(l - 1); A >= de2; A--) {
      const T = p >> A & Jt2;
      S ^= T, { x_2: v, x_3: E } = j2(S, v, E), { x_2: B, x_3: I } = j2(S, B, I), S = T;
      const U = v + B, C2 = x2(U * U), H2 = v - B, q = x2(H2 * H2), P2 = C2 - q, K3 = E + I, et = E - I, Z = x2(et * U), z = x2(K3 * H2), Ft2 = Z + z, yt2 = Z - z;
      E = x2(Ft2 * Ft2), I = x2(b * x2(yt2 * yt2)), v = x2(C2 * q), B = x2(P2 * (C2 + x2(h * P2)));
    }
    ({ x_2: v, x_3: E } = j2(S, v, E)), { x_2: B, x_3: I } = j2(S, B, I);
    const O = s(B);
    return x2(v * O);
  }
  return { scalarMult: _, scalarMultBase: k2, getSharedSecret: (d, m) => _(d, m), getPublicKey: (d) => k2(d), utils: { randomPrivateKey: () => a(c) }, GuBytes: R.slice() };
}
BigInt(0);
var xc = BigInt(1);
var Oo2 = BigInt(2);
var vc = BigInt(3);
var Ec = BigInt(5);
var Bc = BigInt(8);
var Uo2 = { p: BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed"), n: BigInt("0x1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed"), h: Bc, a: BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec"), d: BigInt("0x52036cee2b6ffe738cc740797779e89800700a4d4141d8ab75eb4dca135978a3"), Gx: BigInt("0x216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a"), Gy: BigInt("0x6666666666666666666666666666666666666666666666666666666666666658") };
function Ic(t) {
  const e = BigInt(10), n = BigInt(20), r = BigInt(40), o = BigInt(80), s = Uo2.p, f = t * t % s * t % s, a = pt(f, Oo2, s) * f % s, l = pt(a, xc, s) * t % s, c = pt(l, Ec, s) * l % s, u = pt(c, e, s) * c % s, h = pt(u, n, s) * u % s, g = pt(h, r, s) * h % s, w = pt(g, o, s) * g % s, y = pt(w, o, s) * g % s, x2 = pt(y, e, s) * c % s;
  return { pow_p_5_8: pt(x2, Oo2, s) * t % s, b2: f };
}
function Ac(t) {
  return t[0] &= 248, t[31] &= 127, t[31] |= 64, t;
}
var Tn2 = (() => {
  const t = Uo2.p;
  return wc({ P: t, type: "x25519", powPminus2: (e) => {
    const { pow_p_5_8: n, b2: r } = Ic(e);
    return lt2(pt(n, vc, t) * r, t);
  }, adjustScalarBytes: Ac });
})();
function _o2(t) {
  t.lowS !== void 0 && Re2("lowS", t.lowS), t.prehash !== void 0 && Re2("prehash", t.prehash);
}
var Sc = class extends Error {
  constructor(e = "") {
    super(e);
  }
};
var vt2 = { Err: Sc, _tlv: { encode: (t, e) => {
  const { Err: n } = vt2;
  if (t < 0 || t > 256)
    throw new n("tlv.encode: wrong tag");
  if (e.length & 1)
    throw new n("tlv.encode: unpadded data");
  const r = e.length / 2, o = $e2(r);
  if (o.length / 2 & 128)
    throw new n("tlv.encode: long form length too big");
  const s = r > 127 ? $e2(o.length / 2 | 128) : "";
  return $e2(t) + s + o + e;
}, decode(t, e) {
  const { Err: n } = vt2;
  let r = 0;
  if (t < 0 || t > 256)
    throw new n("tlv.encode: wrong tag");
  if (e.length < 2 || e[r++] !== t)
    throw new n("tlv.decode: wrong tlv");
  const o = e[r++], s = !!(o & 128);
  let i = 0;
  if (!s)
    i = o;
  else {
    const a = o & 127;
    if (!a)
      throw new n("tlv.decode(long): indefinite length not supported");
    if (a > 4)
      throw new n("tlv.decode(long): byte length is too big");
    const l = e.subarray(r, r + a);
    if (l.length !== a)
      throw new n("tlv.decode: length bytes not complete");
    if (l[0] === 0)
      throw new n("tlv.decode(long): zero leftmost byte");
    for (const c of l)
      i = i << 8 | c;
    if (r += a, i < 128)
      throw new n("tlv.decode(long): not minimal encoding");
  }
  const f = e.subarray(r, r + i);
  if (f.length !== i)
    throw new n("tlv.decode: wrong value length");
  return { v: f, l: e.subarray(r + i) };
} }, _int: { encode(t) {
  const { Err: e } = vt2;
  if (t < he2)
    throw new e("integer: negative integers are not allowed");
  let n = $e2(t);
  if (Number.parseInt(n[0], 16) & 8 && (n = "00" + n), n.length & 1)
    throw new e("unexpected DER parsing assertion: unpadded hex");
  return n;
}, decode(t) {
  const { Err: e } = vt2;
  if (t[0] & 128)
    throw new e("invalid signature integer: negative");
  if (t[0] === 0 && !(t[1] & 128))
    throw new e("invalid signature integer: unnecessary leading zero");
  return Ce2(t);
} }, toSig(t) {
  const { Err: e, _int: n, _tlv: r } = vt2, o = rt2("signature", t), { v: s, l: i } = r.decode(48, o);
  if (i.length)
    throw new e("invalid signature: left bytes after parsing");
  const { v: f, l: a } = r.decode(2, s), { v: l, l: c } = r.decode(2, a);
  if (c.length)
    throw new e("invalid signature: left bytes after parsing");
  return { r: n.decode(f), s: n.decode(l) };
}, hexFromSig(t) {
  const { _tlv: e, _int: n } = vt2, r = e.encode(2, n.encode(t.r)), o = e.encode(2, n.encode(t.s)), s = r + o;
  return e.encode(48, s);
} };
var he2 = BigInt(0);
var pe2 = BigInt(1);
var Nc = BigInt(2);
var He2 = BigInt(3);
var Oc = BigInt(4);
function Uc(t, e, n) {
  function r(o) {
    const s = t.sqr(o), i = t.mul(s, o);
    return t.add(t.add(i, t.mul(o, e)), n);
  }
  return r;
}
function To2(t, e, n) {
  const { BYTES: r } = t;
  function o(s) {
    let i;
    if (typeof s == "bigint")
      i = s;
    else {
      let f = rt2("private key", s);
      if (e) {
        if (!e.includes(f.length * 2))
          throw new Error("invalid private key");
        const a = new Uint8Array(r);
        a.set(f, a.length - f.length), f = a;
      }
      try {
        i = t.fromBytes(f);
      } catch {
        throw new Error(`invalid private key: expected ui8a of size ${r}, got ${typeof s}`);
      }
    }
    if (n && (i = t.create(i)), !t.isValidNot0(i))
      throw new Error("invalid private key: out of range [1..N-1]");
    return i;
  }
  return o;
}
function _c(t, e = {}) {
  const { Fp: n, Fn: r } = yc("weierstrass", t, e), { h: o, n: s } = t;
  ke2(e, {}, { allowInfinityPoint: "boolean", clearCofactor: "function", isTorsionFree: "function", fromBytes: "function", toBytes: "function", endo: "object", wrapPrivateKey: "boolean" });
  const { endo: i } = e;
  if (i && (!n.is0(t.a) || typeof i.beta != "bigint" || typeof i.splitScalar != "function"))
    throw new Error('invalid endo: expected "beta": bigint and "splitScalar": function');
  function f() {
    if (!n.isOdd)
      throw new Error("compression is not supported: Field does not have .isOdd()");
  }
  function a($, d, m) {
    const { x: p, y: b } = d.toAffine(), v = n.toBytes(p);
    if (Re2("isCompressed", m), m) {
      f();
      const B = !n.isOdd(b);
      return Ht2(Ro2(B), v);
    } else
      return Ht2(Uint8Array.of(4), v, n.toBytes(b));
  }
  function l($) {
    at($);
    const d = n.BYTES, m = d + 1, p = 2 * d + 1, b = $.length, v = $[0], B = $.subarray(1);
    if (b === m && (v === 2 || v === 3)) {
      const E = n.fromBytes(B);
      if (!n.isValid(E))
        throw new Error("bad point: is not on curve, wrong x");
      const I = h(E);
      let S;
      try {
        S = n.sqrt(I);
      } catch (T) {
        const U = T instanceof Error ? ": " + T.message : "";
        throw new Error("bad point: is not on curve, sqrt error" + U);
      }
      f();
      const O = n.isOdd(S);
      return (v & 1) === 1 !== O && (S = n.neg(S)), { x: E, y: S };
    } else if (b === p && v === 4) {
      const E = n.fromBytes(B.subarray(d * 0, d * 1)), I = n.fromBytes(B.subarray(d * 1, d * 2));
      if (!g(E, I))
        throw new Error("bad point: is not on curve");
      return { x: E, y: I };
    } else
      throw new Error(`bad point: got length ${b}, expected compressed=${m} or uncompressed=${p}`);
  }
  const c = e.toBytes || a, u = e.fromBytes || l, h = Uc(n, t.a, t.b);
  function g($, d) {
    const m = n.sqr(d), p = h($);
    return n.eql(m, p);
  }
  if (!g(t.Gx, t.Gy))
    throw new Error("bad curve params: generator point");
  const w = n.mul(n.pow(t.a, He2), Oc), y = n.mul(n.sqr(t.b), BigInt(27));
  if (n.is0(n.add(w, y)))
    throw new Error("bad curve params: a or b");
  function x2($, d, m = false) {
    if (!n.isValid(d) || m && n.is0(d))
      throw new Error(`bad point coordinate ${$}`);
    return d;
  }
  function R($) {
    if (!($ instanceof _))
      throw new Error("ProjectivePoint expected");
  }
  const M2 = ho2(($, d) => {
    const { px: m, py: p, pz: b } = $;
    if (n.eql(b, n.ONE))
      return { x: m, y: p };
    const v = $.is0();
    d == null && (d = v ? n.ONE : n.inv(b));
    const B = n.mul(m, d), E = n.mul(p, d), I = n.mul(b, d);
    if (v)
      return { x: n.ZERO, y: n.ZERO };
    if (!n.eql(I, n.ONE))
      throw new Error("invZ was invalid");
    return { x: B, y: E };
  }), L = ho2(($) => {
    if ($.is0()) {
      if (e.allowInfinityPoint && !n.is0($.py))
        return;
      throw new Error("bad point: ZERO");
    }
    const { x: d, y: m } = $.toAffine();
    if (!n.isValid(d) || !n.isValid(m))
      throw new Error("bad point: x or y not field elements");
    if (!g(d, m))
      throw new Error("bad point: equation left != right");
    if (!$.isTorsionFree())
      throw new Error("bad point: not in prime-order subgroup");
    return true;
  });
  function V($, d, m, p, b) {
    return m = new _(n.mul(m.px, $), m.py, m.pz), d = le2(p, d), m = le2(b, m), d.add(m);
  }
  class _ {
    constructor(d, m, p) {
      this.px = x2("x", d), this.py = x2("y", m, true), this.pz = x2("z", p), Object.freeze(this);
    }
    static fromAffine(d) {
      const { x: m, y: p } = d || {};
      if (!d || !n.isValid(m) || !n.isValid(p))
        throw new Error("invalid affine point");
      if (d instanceof _)
        throw new Error("projective point not allowed");
      return n.is0(m) && n.is0(p) ? _.ZERO : new _(m, p, n.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    static normalizeZ(d) {
      return lc(_, "pz", d);
    }
    static fromBytes(d) {
      return at(d), _.fromHex(d);
    }
    static fromHex(d) {
      const m = _.fromAffine(u(rt2("pointHex", d)));
      return m.assertValidity(), m;
    }
    static fromPrivateKey(d) {
      const m = To2(r, e.allowedPrivateKeyLengths, e.wrapPrivateKey);
      return _.BASE.multiply(m(d));
    }
    static msm(d, m) {
      return bc(_, r, d, m);
    }
    precompute(d = 8, m = true) {
      return j2.setWindowSize(this, d), m || this.multiply(He2), this;
    }
    _setWindowSize(d) {
      this.precompute(d);
    }
    assertValidity() {
      L(this);
    }
    hasEvenY() {
      const { y: d } = this.toAffine();
      if (!n.isOdd)
        throw new Error("Field doesn't support isOdd");
      return !n.isOdd(d);
    }
    equals(d) {
      R(d);
      const { px: m, py: p, pz: b } = this, { px: v, py: B, pz: E } = d, I = n.eql(n.mul(m, E), n.mul(v, b)), S = n.eql(n.mul(p, E), n.mul(B, b));
      return I && S;
    }
    negate() {
      return new _(this.px, n.neg(this.py), this.pz);
    }
    double() {
      const { a: d, b: m } = t, p = n.mul(m, He2), { px: b, py: v, pz: B } = this;
      let E = n.ZERO, I = n.ZERO, S = n.ZERO, O = n.mul(b, b), A = n.mul(v, v), T = n.mul(B, B), U = n.mul(b, v);
      return U = n.add(U, U), S = n.mul(b, B), S = n.add(S, S), E = n.mul(d, S), I = n.mul(p, T), I = n.add(E, I), E = n.sub(A, I), I = n.add(A, I), I = n.mul(E, I), E = n.mul(U, E), S = n.mul(p, S), T = n.mul(d, T), U = n.sub(O, T), U = n.mul(d, U), U = n.add(U, S), S = n.add(O, O), O = n.add(S, O), O = n.add(O, T), O = n.mul(O, U), I = n.add(I, O), T = n.mul(v, B), T = n.add(T, T), O = n.mul(T, U), E = n.sub(E, O), S = n.mul(T, A), S = n.add(S, S), S = n.add(S, S), new _(E, I, S);
    }
    add(d) {
      R(d);
      const { px: m, py: p, pz: b } = this, { px: v, py: B, pz: E } = d;
      let I = n.ZERO, S = n.ZERO, O = n.ZERO;
      const A = t.a, T = n.mul(t.b, He2);
      let U = n.mul(m, v), C2 = n.mul(p, B), H2 = n.mul(b, E), q = n.add(m, p), P2 = n.add(v, B);
      q = n.mul(q, P2), P2 = n.add(U, C2), q = n.sub(q, P2), P2 = n.add(m, b);
      let K3 = n.add(v, E);
      return P2 = n.mul(P2, K3), K3 = n.add(U, H2), P2 = n.sub(P2, K3), K3 = n.add(p, b), I = n.add(B, E), K3 = n.mul(K3, I), I = n.add(C2, H2), K3 = n.sub(K3, I), O = n.mul(A, P2), I = n.mul(T, H2), O = n.add(I, O), I = n.sub(C2, O), O = n.add(C2, O), S = n.mul(I, O), C2 = n.add(U, U), C2 = n.add(C2, U), H2 = n.mul(A, H2), P2 = n.mul(T, P2), C2 = n.add(C2, H2), H2 = n.sub(U, H2), H2 = n.mul(A, H2), P2 = n.add(P2, H2), U = n.mul(C2, P2), S = n.add(S, U), U = n.mul(K3, P2), I = n.mul(q, I), I = n.sub(I, U), U = n.mul(q, C2), O = n.mul(K3, O), O = n.add(O, U), new _(I, S, O);
    }
    subtract(d) {
      return this.add(d.negate());
    }
    is0() {
      return this.equals(_.ZERO);
    }
    multiply(d) {
      const { endo: m } = e;
      if (!r.isValidNot0(d))
        throw new Error("invalid scalar: out of range");
      let p, b;
      const v = (B) => j2.wNAFCached(this, B, _.normalizeZ);
      if (m) {
        const { k1neg: B, k1: E, k2neg: I, k2: S } = m.splitScalar(d), { p: O, f: A } = v(E), { p: T, f: U } = v(S);
        b = A.add(U), p = V(m.beta, O, T, B, I);
      } else {
        const { p: B, f: E } = v(d);
        p = B, b = E;
      }
      return _.normalizeZ([p, b])[0];
    }
    multiplyUnsafe(d) {
      const { endo: m } = e, p = this;
      if (!r.isValid(d))
        throw new Error("invalid scalar: out of range");
      if (d === he2 || p.is0())
        return _.ZERO;
      if (d === pe2)
        return p;
      if (j2.hasPrecomputes(this))
        return this.multiply(d);
      if (m) {
        const { k1neg: b, k1: v, k2neg: B, k2: E } = m.splitScalar(d), { p1: I, p2: S } = gc(_, p, v, E);
        return V(m.beta, I, S, b, B);
      } else
        return j2.wNAFCachedUnsafe(p, d);
    }
    multiplyAndAddUnsafe(d, m, p) {
      const b = this.multiplyUnsafe(m).add(d.multiplyUnsafe(p));
      return b.is0() ? void 0 : b;
    }
    toAffine(d) {
      return M2(this, d);
    }
    isTorsionFree() {
      const { isTorsionFree: d } = e;
      return o === pe2 ? true : d ? d(_, this) : j2.wNAFCachedUnsafe(this, s).is0();
    }
    clearCofactor() {
      const { clearCofactor: d } = e;
      return o === pe2 ? this : d ? d(_, this) : this.multiplyUnsafe(o);
    }
    toBytes(d = true) {
      return Re2("isCompressed", d), this.assertValidity(), c(_, this, d);
    }
    toRawBytes(d = true) {
      return this.toBytes(d);
    }
    toHex(d = true) {
      return ce(this.toBytes(d));
    }
    toString() {
      return `<Point ${this.is0() ? "ZERO" : this.toHex()}>`;
    }
  }
  _.BASE = new _(t.Gx, t.Gy, n.ONE), _.ZERO = new _(n.ZERO, n.ONE, n.ZERO), _.Fp = n, _.Fn = r;
  const k2 = r.BITS, j2 = pc(_, e.endo ? Math.ceil(k2 / 2) : k2);
  return _;
}
function Ro2(t) {
  return Uint8Array.of(t ? 2 : 3);
}
function Tc(t, e, n = {}) {
  ke2(e, { hash: "function" }, { hmac: "function", lowS: "boolean", randomBytes: "function", bits2int: "function", bits2int_modN: "function" });
  const r = e.randomBytes || Zt2, o = e.hmac || ((p, ...b) => _e2(e.hash, p, Ht2(...b))), { Fp: s, Fn: i } = t, { ORDER: f, BITS: a } = i;
  function l(p) {
    const b = f >> pe2;
    return p > b;
  }
  function c(p) {
    return l(p) ? i.neg(p) : p;
  }
  function u(p, b) {
    if (!i.isValidNot0(b))
      throw new Error(`invalid signature ${p}: out of range 1..CURVE.n`);
  }
  class h {
    constructor(b, v, B) {
      u("r", b), u("s", v), this.r = b, this.s = v, B != null && (this.recovery = B), Object.freeze(this);
    }
    static fromCompact(b) {
      const v = i.BYTES, B = rt2("compactSignature", b, v * 2);
      return new h(i.fromBytes(B.subarray(0, v)), i.fromBytes(B.subarray(v, v * 2)));
    }
    static fromDER(b) {
      const { r: v, s: B } = vt2.toSig(rt2("DER", b));
      return new h(v, B);
    }
    assertValidity() {
    }
    addRecoveryBit(b) {
      return new h(this.r, this.s, b);
    }
    recoverPublicKey(b) {
      const v = s.ORDER, { r: B, s: E, recovery: I } = this;
      if (I == null || ![0, 1, 2, 3].includes(I))
        throw new Error("recovery id invalid");
      if (f * Nc < v && I > 1)
        throw new Error("recovery id is ambiguous for h>1 curve");
      const O = I === 2 || I === 3 ? B + f : B;
      if (!s.isValid(O))
        throw new Error("recovery id 2 or 3 invalid");
      const A = s.toBytes(O), T = t.fromHex(Ht2(Ro2((I & 1) === 0), A)), U = i.inv(O), C2 = L(rt2("msgHash", b)), H2 = i.create(-C2 * U), q = i.create(E * U), P2 = t.BASE.multiplyUnsafe(H2).add(T.multiplyUnsafe(q));
      if (P2.is0())
        throw new Error("point at infinify");
      return P2.assertValidity(), P2;
    }
    hasHighS() {
      return l(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new h(this.r, i.neg(this.s), this.recovery) : this;
    }
    toBytes(b) {
      if (b === "compact")
        return Ht2(i.toBytes(this.r), i.toBytes(this.s));
      if (b === "der")
        return fn(vt2.hexFromSig(this));
      throw new Error("invalid format");
    }
    toDERRawBytes() {
      return this.toBytes("der");
    }
    toDERHex() {
      return ce(this.toBytes("der"));
    }
    toCompactRawBytes() {
      return this.toBytes("compact");
    }
    toCompactHex() {
      return ce(this.toBytes("compact"));
    }
  }
  const g = To2(i, n.allowedPrivateKeyLengths, n.wrapPrivateKey), w = { isValidPrivateKey(p) {
    try {
      return g(p), true;
    } catch {
      return false;
    }
  }, normPrivateKeyToScalar: g, randomPrivateKey: () => {
    const p = f;
    return uc(r(Eo2(p)), p);
  }, precompute(p = 8, b = t.BASE) {
    return b.precompute(p, false);
  } };
  function y(p, b = true) {
    return t.fromPrivateKey(p).toBytes(b);
  }
  function x2(p) {
    if (typeof p == "bigint")
      return false;
    if (p instanceof t)
      return true;
    const v = rt2("key", p).length, B = s.BYTES, E = B + 1, I = 2 * B + 1;
    if (!(n.allowedPrivateKeyLengths || i.BYTES === E))
      return v === E || v === I;
  }
  function R(p, b, v = true) {
    if (x2(p) === true)
      throw new Error("first arg must be private key");
    if (x2(b) === false)
      throw new Error("second arg must be public key");
    return t.fromHex(b).multiply(g(p)).toBytes(v);
  }
  const M2 = e.bits2int || function(p) {
    if (p.length > 8192)
      throw new Error("input is too large");
    const b = Ce2(p), v = p.length * 8 - a;
    return v > 0 ? b >> BigInt(v) : b;
  }, L = e.bits2int_modN || function(p) {
    return i.create(M2(p));
  }, V = je2(a);
  function _(p) {
    return Nn2("num < 2^" + a, p, he2, V), i.toBytes(p);
  }
  function k2(p, b, v = j2) {
    if (["recovered", "canonical"].some((q) => q in v))
      throw new Error("sign() legacy options not supported");
    const { hash: B } = e;
    let { lowS: E, prehash: I, extraEntropy: S } = v;
    E == null && (E = true), p = rt2("msgHash", p), _o2(v), I && (p = rt2("prehashed msgHash", B(p)));
    const O = L(p), A = g(b), T = [_(A), _(O)];
    if (S != null && S !== false) {
      const q = S === true ? r(s.BYTES) : S;
      T.push(rt2("extraEntropy", q));
    }
    const U = Ht2(...T), C2 = O;
    function H2(q) {
      const P2 = M2(q);
      if (!i.isValidNot0(P2))
        return;
      const K3 = i.inv(P2), et = t.BASE.multiply(P2).toAffine(), Z = i.create(et.x);
      if (Z === he2)
        return;
      const z = i.create(K3 * i.create(C2 + Z * A));
      if (z === he2)
        return;
      let Ft2 = (et.x === Z ? 0 : 2) | Number(et.y & pe2), yt2 = z;
      return E && l(z) && (yt2 = c(z), Ft2 ^= 1), new h(Z, yt2, Ft2);
    }
    return { seed: U, k2sig: H2 };
  }
  const j2 = { lowS: e.lowS, prehash: false }, $ = { lowS: e.lowS, prehash: false };
  function d(p, b, v = j2) {
    const { seed: B, k2sig: E } = k2(p, b, v);
    return ec(e.hash.outputLen, i.BYTES, o)(B, E);
  }
  t.BASE.precompute(8);
  function m(p, b, v, B = $) {
    const E = p;
    b = rt2("msgHash", b), v = rt2("publicKey", v), _o2(B);
    const { lowS: I, prehash: S, format: O } = B;
    if ("strict" in B)
      throw new Error("options.strict was renamed to lowS");
    if (O !== void 0 && !["compact", "der", "js"].includes(O))
      throw new Error('format must be "compact", "der" or "js"');
    const A = typeof E == "string" || nn2(E), T = !A && !O && typeof E == "object" && E !== null && typeof E.r == "bigint" && typeof E.s == "bigint";
    if (!A && !T)
      throw new Error("invalid signature, expected Uint8Array, hex string or Signature instance");
    let U, C2;
    try {
      if (T)
        if (O === void 0 || O === "js")
          U = new h(E.r, E.s);
        else
          throw new Error("invalid format");
      if (A) {
        try {
          O !== "compact" && (U = h.fromDER(E));
        } catch (yt2) {
          if (!(yt2 instanceof vt2.Err))
            throw yt2;
        }
        !U && O !== "der" && (U = h.fromCompact(E));
      }
      C2 = t.fromHex(v);
    } catch {
      return false;
    }
    if (!U || I && U.hasHighS())
      return false;
    S && (b = e.hash(b));
    const { r: H2, s: q } = U, P2 = L(b), K3 = i.inv(q), et = i.create(P2 * K3), Z = i.create(H2 * K3), z = t.BASE.multiplyUnsafe(et).add(C2.multiplyUnsafe(Z));
    return z.is0() ? false : i.create(z.x) === H2;
  }
  return Object.freeze({ getPublicKey: y, getSharedSecret: R, sign: d, verify: m, utils: w, Point: t, Signature: h });
}
function Rc(t) {
  const e = { a: t.a, b: t.b, p: t.Fp.ORDER, n: t.n, h: t.h, Gx: t.Gx, Gy: t.Gy }, n = t.Fp, r = Yt2(e.n, t.nBitLength), o = { Fp: n, Fn: r, allowedPrivateKeyLengths: t.allowedPrivateKeyLengths, allowInfinityPoint: t.allowInfinityPoint, endo: t.endo, wrapPrivateKey: t.wrapPrivateKey, isTorsionFree: t.isTorsionFree, clearCofactor: t.clearCofactor, fromBytes: t.fromBytes, toBytes: t.toBytes };
  return { CURVE: e, curveOpts: o };
}
function $c(t) {
  const { CURVE: e, curveOpts: n } = Rc(t), r = { hash: t.hash, hmac: t.hmac, randomBytes: t.randomBytes, lowS: t.lowS, bits2int: t.bits2int, bits2int_modN: t.bits2int_modN };
  return { CURVE: e, curveOpts: n, ecdsaOpts: r };
}
function Cc(t, e) {
  return Object.assign({}, e, { ProjectivePoint: e.Point, CURVE: t });
}
function Lc(t) {
  const { CURVE: e, curveOpts: n, ecdsaOpts: r } = $c(t), o = _c(e, n), s = Tc(o, r, n);
  return Cc(t, s);
}
function Rn2(t, e) {
  const n = (r) => Lc({ ...t, hash: r });
  return { ...n(e), create: n };
}
var $o2 = { p: BigInt("0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff"), n: BigInt("0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551"), h: BigInt(1), a: BigInt("0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc"), b: BigInt("0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b"), Gx: BigInt("0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296"), Gy: BigInt("0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5") };
var Co2 = { p: BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff"), n: BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973"), h: BigInt(1), a: BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000fffffffc"), b: BigInt("0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef"), Gx: BigInt("0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7"), Gy: BigInt("0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f") };
var Lo2 = { p: BigInt("0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"), n: BigInt("0x01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa51868783bf2f966b7fcc0148f709a5d03bb5c9b8899c47aebb6fb71e91386409"), h: BigInt(1), a: BigInt("0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc"), b: BigInt("0x0051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00"), Gx: BigInt("0x00c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66"), Gy: BigInt("0x011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650") };
var jc = Yt2($o2.p);
var kc = Yt2(Co2.p);
var Pc = Yt2(Lo2.p);
var Hc = Rn2({ ...$o2, Fp: jc, lowS: false }, Ae2);
Rn2({ ...Co2, Fp: kc, lowS: false }, Yi), Rn2({ ...Lo2, Fp: Pc, lowS: false, allowedPrivateKeyLengths: [130, 131, 132] }, Wi);
var Dc = Hc;
var $n2 = "base10";
var tt = "base16";
var Qt2 = "base64pad";
var De2 = "base64url";
var te2 = "utf8";
var Cn2 = 0;
var ee = 1;
var ge2 = 2;
var Mc = 0;
var jo2 = 1;
var be2 = 12;
var Ln2 = 32;
function Vc() {
  const t = Tn2.utils.randomPrivateKey(), e = Tn2.getPublicKey(t);
  return { privateKey: toString3(t, tt), publicKey: toString3(e, tt) };
}
function qc() {
  const t = Zt2(Ln2);
  return toString3(t, tt);
}
function Kc(t, e) {
  const n = Tn2.getSharedSecret(fromString4(t, tt), fromString4(e, tt)), r = Jf(Te2, n, void 0, void 0, Ln2);
  return toString3(r, tt);
}
function Fc(t) {
  const e = Te2(fromString4(t, tt));
  return toString3(e, tt);
}
function zc(t) {
  const e = Te2(fromString4(t, te2));
  return toString3(e, tt);
}
function jn2(t) {
  return fromString4(`${t}`, $n2);
}
function Vt2(t) {
  return Number(toString3(t, $n2));
}
function ko2(t) {
  return t.replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
}
function Po2(t) {
  const e = t.replace(/-/g, "+").replace(/_/g, "/"), n = (4 - e.length % 4) % 4;
  return e + "=".repeat(n);
}
function Gc(t) {
  const e = jn2(typeof t.type < "u" ? t.type : Cn2);
  if (Vt2(e) === ee && typeof t.senderPublicKey > "u")
    throw new Error("Missing sender public key for type 1 envelope");
  const n = typeof t.senderPublicKey < "u" ? fromString4(t.senderPublicKey, tt) : void 0, r = typeof t.iv < "u" ? fromString4(t.iv, tt) : Zt2(be2), o = fromString4(t.symKey, tt), s = co2(o, r).encrypt(fromString4(t.message, te2)), i = kn2({ type: e, sealed: s, iv: r, senderPublicKey: n });
  return t.encoding === De2 ? ko2(i) : i;
}
function Zc(t) {
  const e = fromString4(t.symKey, tt), { sealed: n, iv: r } = Me2({ encoded: t.encoded, encoding: t.encoding }), o = co2(e, r).decrypt(n);
  if (o === null)
    throw new Error("Failed to decrypt");
  return toString3(o, te2);
}
function Wc(t, e) {
  const n = jn2(ge2), r = Zt2(be2), o = fromString4(t, te2), s = kn2({ type: n, sealed: o, iv: r });
  return e === De2 ? ko2(s) : s;
}
function Yc(t, e) {
  const { sealed: n } = Me2({ encoded: t, encoding: e });
  return toString3(n, te2);
}
function kn2(t) {
  if (Vt2(t.type) === ge2)
    return toString3(concat3([t.type, t.sealed]), Qt2);
  if (Vt2(t.type) === ee) {
    if (typeof t.senderPublicKey > "u")
      throw new Error("Missing sender public key for type 1 envelope");
    return toString3(concat3([t.type, t.senderPublicKey, t.iv, t.sealed]), Qt2);
  }
  return toString3(concat3([t.type, t.iv, t.sealed]), Qt2);
}
function Me2(t) {
  const e = (t.encoding || Qt2) === De2 ? Po2(t.encoded) : t.encoded, n = fromString4(e, Qt2), r = n.slice(Mc, jo2), o = jo2;
  if (Vt2(r) === ee) {
    const a = o + Ln2, l = a + be2, c = n.slice(o, a), u = n.slice(a, l), h = n.slice(l);
    return { type: r, sealed: h, iv: u, senderPublicKey: c };
  }
  if (Vt2(r) === ge2) {
    const a = n.slice(o), l = Zt2(be2);
    return { type: r, sealed: a, iv: l };
  }
  const s = o + be2, i = n.slice(o, s), f = n.slice(s);
  return { type: r, sealed: f, iv: i };
}
function Xc(t, e) {
  const n = Me2({ encoded: t, encoding: e == null ? void 0 : e.encoding });
  return Ho2({ type: Vt2(n.type), senderPublicKey: typeof n.senderPublicKey < "u" ? toString3(n.senderPublicKey, tt) : void 0, receiverPublicKey: e == null ? void 0 : e.receiverPublicKey });
}
function Ho2(t) {
  const e = (t == null ? void 0 : t.type) || Cn2;
  if (e === ee) {
    if (typeof (t == null ? void 0 : t.senderPublicKey) > "u")
      throw new Error("missing sender public key");
    if (typeof (t == null ? void 0 : t.receiverPublicKey) > "u")
      throw new Error("missing receiver public key");
  }
  return { type: e, senderPublicKey: t == null ? void 0 : t.senderPublicKey, receiverPublicKey: t == null ? void 0 : t.receiverPublicKey };
}
function Jc(t) {
  return t.type === ee && typeof t.senderPublicKey == "string" && typeof t.receiverPublicKey == "string";
}
function Qc(t) {
  return t.type === ge2;
}
function Do2(t) {
  const e = Buffer.from(t.x, "base64"), n = Buffer.from(t.y, "base64");
  return concat3([new Uint8Array([4]), e, n]);
}
function ta(t, e) {
  const [n, r, o] = t.split("."), s = Buffer.from(Po2(o), "base64");
  if (s.length !== 64)
    throw new Error("Invalid signature length");
  const i = s.slice(0, 32), f = s.slice(32, 64), a = `${n}.${r}`, l = Te2(a), c = Do2(e);
  if (!Dc.verify(concat3([i, f]), l, c))
    throw new Error("Invalid signature");
  return sn(t).payload;
}
var Mo2 = "irn";
function ea(t) {
  return (t == null ? void 0 : t.relay) || { protocol: Mo2 };
}
function na(t) {
  const e = C[t];
  if (typeof e > "u")
    throw new Error(`Relay Protocol not supported: ${t}`);
  return e;
}
function Vo2(t, e = "-") {
  const n = {}, r = "relay" + e;
  return Object.keys(t).forEach((o) => {
    if (o.startsWith(r)) {
      const s = o.replace(r, ""), i = t[o];
      n[s] = i;
    }
  }), n;
}
function ra(t) {
  if (!t.includes("wc:")) {
    const l = Qe2(t);
    l != null && l.includes("wc:") && (t = l);
  }
  t = t.includes("wc://") ? t.replace("wc://", "") : t, t = t.includes("wc:") ? t.replace("wc:", "") : t;
  const e = t.indexOf(":"), n = t.indexOf("?") !== -1 ? t.indexOf("?") : void 0, r = t.substring(0, e), o = t.substring(e + 1, n).split("@"), s = typeof n < "u" ? t.substring(n) : "", i = new URLSearchParams(s), f = {};
  i.forEach((l, c) => {
    f[c] = l;
  });
  const a = typeof f.methods == "string" ? f.methods.split(",") : void 0;
  return { protocol: r, topic: qo2(o[0]), version: parseInt(o[1], 10), symKey: f.symKey, relay: Vo2(f), methods: a, expiryTimestamp: f.expiryTimestamp ? parseInt(f.expiryTimestamp, 10) : void 0 };
}
function qo2(t) {
  return t.startsWith("//") ? t.substring(2) : t;
}
function Ko2(t, e = "-") {
  const n = "relay", r = {};
  return Object.keys(t).forEach((o) => {
    const s = o, i = n + e + s;
    t[s] && (r[i] = t[s]);
  }), r;
}
function oa(t) {
  const e = new URLSearchParams(), n = Ko2(t.relay);
  Object.keys(n).sort().forEach((o) => {
    e.set(o, n[o]);
  }), e.set("symKey", t.symKey), t.expiryTimestamp && e.set("expiryTimestamp", t.expiryTimestamp.toString()), t.methods && e.set("methods", t.methods.join(","));
  const r = e.toString();
  return `${t.protocol}:${t.topic}@${t.version}?${r}`;
}
function sa(t, e, n) {
  return `${t}?wc_ev=${n}&topic=${e}`;
}
var ia = Object.defineProperty;
var fa = Object.defineProperties;
var ca = Object.getOwnPropertyDescriptors;
var Fo2 = Object.getOwnPropertySymbols;
var aa = Object.prototype.hasOwnProperty;
var ua = Object.prototype.propertyIsEnumerable;
var zo2 = (t, e, n) => e in t ? ia(t, e, { enumerable: true, configurable: true, writable: true, value: n }) : t[e] = n;
var la = (t, e) => {
  for (var n in e || (e = {}))
    aa.call(e, n) && zo2(t, n, e[n]);
  if (Fo2)
    for (var n of Fo2(e))
      ua.call(e, n) && zo2(t, n, e[n]);
  return t;
};
var da = (t, e) => fa(t, ca(e));
function qt2(t) {
  const e = [];
  return t.forEach((n) => {
    const [r, o] = n.split(":");
    e.push(`${r}:${o}`);
  }), e;
}
function Go2(t) {
  const e = [];
  return Object.values(t).forEach((n) => {
    e.push(...qt2(n.accounts));
  }), e;
}
function Zo2(t, e) {
  const n = [];
  return Object.values(t).forEach((r) => {
    qt2(r.accounts).includes(e) && n.push(...r.methods);
  }), n;
}
function Wo2(t, e) {
  const n = [];
  return Object.values(t).forEach((r) => {
    qt2(r.accounts).includes(e) && n.push(...r.events);
  }), n;
}
function ha(t, e) {
  const n = is(t, e);
  if (n)
    throw new Error(n.message);
  const r = {};
  for (const [o, s] of Object.entries(t))
    r[o] = { methods: s.methods, events: s.events, chains: s.accounts.map((i) => `${i.split(":")[0]}:${i.split(":")[1]}`) };
  return r;
}
function pa(t) {
  var e;
  const { proposal: { requiredNamespaces: n, optionalNamespaces: r = {} }, supportedNamespaces: o } = t, s = ye2(n), i = ye2(r), f = {};
  Object.keys(o).forEach((c) => {
    const u = o[c].chains, h = o[c].methods, g = o[c].events, w = o[c].accounts;
    u.forEach((y) => {
      if (!w.some((x2) => x2.includes(y)))
        throw new Error(`No accounts provided for chain ${y} in namespace ${c}`);
    }), f[c] = { chains: u, methods: h, events: g, accounts: w };
  });
  const a = cs(n, f, "approve()");
  if (a)
    throw new Error(a.message);
  const l = {};
  if (!Object.keys(n).length && !Object.keys(r).length)
    return f;
  Object.keys(s).forEach((c) => {
    const u = o[c].chains.filter((y) => {
      var x2, R;
      return (R = (x2 = s[c]) == null ? void 0 : x2.chains) == null ? void 0 : R.includes(y);
    }), h = o[c].methods.filter((y) => {
      var x2, R;
      return (R = (x2 = s[c]) == null ? void 0 : x2.methods) == null ? void 0 : R.includes(y);
    }), g = o[c].events.filter((y) => {
      var x2, R;
      return (R = (x2 = s[c]) == null ? void 0 : x2.events) == null ? void 0 : R.includes(y);
    }), w = u.map((y) => o[c].accounts.filter((x2) => x2.includes(`${y}:`))).flat();
    l[c] = { chains: u, methods: h, events: g, accounts: w };
  }), Object.keys(i).forEach((c) => {
    var u, h, g, w, y, x2;
    if (!o[c])
      return;
    const R = (h = (u = i[c]) == null ? void 0 : u.chains) == null ? void 0 : h.filter((_) => o[c].chains.includes(_)), M2 = o[c].methods.filter((_) => {
      var k2, j2;
      return (j2 = (k2 = i[c]) == null ? void 0 : k2.methods) == null ? void 0 : j2.includes(_);
    }), L = o[c].events.filter((_) => {
      var k2, j2;
      return (j2 = (k2 = i[c]) == null ? void 0 : k2.events) == null ? void 0 : j2.includes(_);
    }), V = R == null ? void 0 : R.map((_) => o[c].accounts.filter((k2) => k2.includes(`${_}:`))).flat();
    l[c] = { chains: ct2((g = l[c]) == null ? void 0 : g.chains, R), methods: ct2((w = l[c]) == null ? void 0 : w.methods, M2), events: ct2((y = l[c]) == null ? void 0 : y.events, L), accounts: ct2((x2 = l[c]) == null ? void 0 : x2.accounts, V) };
  });
  for (const [c, u] of Object.entries(l))
    (u.accounts.length === 0 || ((e = u == null ? void 0 : u.chains) == null ? void 0 : e.length) === 0) && delete l[c];
  return l;
}
function Pn2(t) {
  return t.includes(":");
}
function Yo2(t) {
  return Pn2(t) ? t.split(":")[0] : t;
}
function ye2(t) {
  var e, n, r;
  const o = {};
  if (!Ve2(t))
    return o;
  for (const [s, i] of Object.entries(t)) {
    const f = Pn2(s) ? [s] : i.chains, a = i.methods || [], l = i.events || [], c = Yo2(s);
    o[c] = da(la({}, o[c]), { chains: ct2(f, (e = o[c]) == null ? void 0 : e.chains), methods: ct2(a, (n = o[c]) == null ? void 0 : n.methods), events: ct2(l, (r = o[c]) == null ? void 0 : r.events) });
  }
  return o;
}
function Xo(t) {
  const e = {};
  return t == null ? void 0 : t.forEach((n) => {
    var r;
    const [o, s] = n.split(":");
    e[o] || (e[o] = { accounts: [], chains: [], events: [], methods: [] }), e[o].accounts.push(n), (r = e[o].chains) == null || r.push(`${o}:${s}`);
  }), e;
}
function ga(t, e) {
  e = e.map((r) => r.replace("did:pkh:", ""));
  const n = Xo(e);
  for (const [r, o] of Object.entries(n))
    o.methods ? o.methods = ct2(o.methods, t) : o.methods = t, o.events = ["chainChanged", "accountsChanged"];
  return n;
}
function ba(t, e) {
  var n, r, o, s, i, f;
  const a = ye2(t), l = ye2(e), c = {}, u = Object.keys(a).concat(Object.keys(l));
  for (const h of u)
    c[h] = { chains: ct2((n = a[h]) == null ? void 0 : n.chains, (r = l[h]) == null ? void 0 : r.chains), methods: ct2((o = a[h]) == null ? void 0 : o.methods, (s = l[h]) == null ? void 0 : s.methods), events: ct2((i = a[h]) == null ? void 0 : i.events, (f = l[h]) == null ? void 0 : f.events) };
  return c;
}
var Jo2 = { INVALID_METHOD: { message: "Invalid method.", code: 1001 }, INVALID_EVENT: { message: "Invalid event.", code: 1002 }, INVALID_UPDATE_REQUEST: { message: "Invalid update request.", code: 1003 }, INVALID_EXTEND_REQUEST: { message: "Invalid extend request.", code: 1004 }, INVALID_SESSION_SETTLE_REQUEST: { message: "Invalid session settle request.", code: 1005 }, UNAUTHORIZED_METHOD: { message: "Unauthorized method.", code: 3001 }, UNAUTHORIZED_EVENT: { message: "Unauthorized event.", code: 3002 }, UNAUTHORIZED_UPDATE_REQUEST: { message: "Unauthorized update request.", code: 3003 }, UNAUTHORIZED_EXTEND_REQUEST: { message: "Unauthorized extend request.", code: 3004 }, USER_REJECTED: { message: "User rejected.", code: 5e3 }, USER_REJECTED_CHAINS: { message: "User rejected chains.", code: 5001 }, USER_REJECTED_METHODS: { message: "User rejected methods.", code: 5002 }, USER_REJECTED_EVENTS: { message: "User rejected events.", code: 5003 }, UNSUPPORTED_CHAINS: { message: "Unsupported chains.", code: 5100 }, UNSUPPORTED_METHODS: { message: "Unsupported methods.", code: 5101 }, UNSUPPORTED_EVENTS: { message: "Unsupported events.", code: 5102 }, UNSUPPORTED_ACCOUNTS: { message: "Unsupported accounts.", code: 5103 }, UNSUPPORTED_NAMESPACE_KEY: { message: "Unsupported namespace key.", code: 5104 }, USER_DISCONNECTED: { message: "User disconnected.", code: 6e3 }, SESSION_SETTLEMENT_FAILED: { message: "Session settlement failed.", code: 7e3 }, WC_METHOD_UNSUPPORTED: { message: "Unsupported wc_ method.", code: 10001 } };
var Qo2 = { NOT_INITIALIZED: { message: "Not initialized.", code: 1 }, NO_MATCHING_KEY: { message: "No matching key.", code: 2 }, RESTORE_WILL_OVERRIDE: { message: "Restore will override.", code: 3 }, RESUBSCRIBED: { message: "Resubscribed.", code: 4 }, MISSING_OR_INVALID: { message: "Missing or invalid.", code: 5 }, EXPIRED: { message: "Expired.", code: 6 }, UNKNOWN_TYPE: { message: "Unknown type.", code: 7 }, MISMATCHED_TOPIC: { message: "Mismatched topic.", code: 8 }, NON_CONFORMING_NAMESPACES: { message: "Non conforming namespaces.", code: 9 } };
function Et2(t, e) {
  const { message: n, code: r } = Qo2[t];
  return { message: e ? `${n} ${e}` : n, code: r };
}
function Kt2(t, e) {
  const { message: n, code: r } = Jo2[t];
  return { message: e ? `${n} ${e}` : n, code: r };
}
function me2(t, e) {
  return Array.isArray(t) ? typeof e < "u" && t.length ? t.every(e) : true : false;
}
function Ve2(t) {
  return Object.getPrototypeOf(t) === Object.prototype && Object.keys(t).length;
}
function kt2(t) {
  return typeof t > "u";
}
function it2(t, e) {
  return e && kt2(t) ? true : typeof t == "string" && !!t.trim().length;
}
function qe2(t, e) {
  return e && kt2(t) ? true : typeof t == "number" && !isNaN(t);
}
function ya(t, e) {
  const { requiredNamespaces: n } = e, r = Object.keys(t.namespaces), o = Object.keys(n);
  let s = true;
  return It2(o, r) ? (r.forEach((i) => {
    const { accounts: f, methods: a, events: l } = t.namespaces[i], c = qt2(f), u = n[i];
    (!It2(ve2(i, u), c) || !It2(u.methods, a) || !It2(u.events, l)) && (s = false);
  }), s) : false;
}
function we2(t) {
  return it2(t, false) && t.includes(":") ? t.split(":").length === 2 : false;
}
function ts(t) {
  if (it2(t, false) && t.includes(":")) {
    const e = t.split(":");
    if (e.length === 3) {
      const n = e[0] + ":" + e[1];
      return !!e[2] && we2(n);
    }
  }
  return false;
}
function ma(t) {
  function e(n) {
    try {
      return typeof new URL(n) < "u";
    } catch {
      return false;
    }
  }
  try {
    if (it2(t, false)) {
      if (e(t))
        return true;
      const n = Qe2(t);
      return e(n);
    }
  } catch {
  }
  return false;
}
function wa(t) {
  var e;
  return (e = t == null ? void 0 : t.proposer) == null ? void 0 : e.publicKey;
}
function xa(t) {
  return t == null ? void 0 : t.topic;
}
function va(t, e) {
  let n = null;
  return it2(t == null ? void 0 : t.publicKey, false) || (n = Et2("MISSING_OR_INVALID", `${e} controller public key should be a string`)), n;
}
function Hn2(t) {
  let e = true;
  return me2(t) ? t.length && (e = t.every((n) => it2(n, false))) : e = false, e;
}
function es(t, e, n) {
  let r = null;
  return me2(e) && e.length ? e.forEach((o) => {
    r || we2(o) || (r = Kt2("UNSUPPORTED_CHAINS", `${n}, chain ${o} should be a string and conform to "namespace:chainId" format`));
  }) : we2(t) || (r = Kt2("UNSUPPORTED_CHAINS", `${n}, chains must be defined as "namespace:chainId" e.g. "eip155:1": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: ["eip155:1", "eip155:5"] }`)), r;
}
function ns(t, e, n) {
  let r = null;
  return Object.entries(t).forEach(([o, s]) => {
    if (r)
      return;
    const i = es(o, ve2(o, s), `${e} ${n}`);
    i && (r = i);
  }), r;
}
function rs(t, e) {
  let n = null;
  return me2(t) ? t.forEach((r) => {
    n || ts(r) || (n = Kt2("UNSUPPORTED_ACCOUNTS", `${e}, account ${r} should be a string and conform to "namespace:chainId:address" format`));
  }) : n = Kt2("UNSUPPORTED_ACCOUNTS", `${e}, accounts should be an array of strings conforming to "namespace:chainId:address" format`), n;
}
function os(t, e) {
  let n = null;
  return Object.values(t).forEach((r) => {
    if (n)
      return;
    const o = rs(r == null ? void 0 : r.accounts, `${e} namespace`);
    o && (n = o);
  }), n;
}
function ss(t, e) {
  let n = null;
  return Hn2(t == null ? void 0 : t.methods) ? Hn2(t == null ? void 0 : t.events) || (n = Kt2("UNSUPPORTED_EVENTS", `${e}, events should be an array of strings or empty array for no events`)) : n = Kt2("UNSUPPORTED_METHODS", `${e}, methods should be an array of strings or empty array for no methods`), n;
}
function Dn(t, e) {
  let n = null;
  return Object.values(t).forEach((r) => {
    if (n)
      return;
    const o = ss(r, `${e}, namespace`);
    o && (n = o);
  }), n;
}
function Ea(t, e, n) {
  let r = null;
  if (t && Ve2(t)) {
    const o = Dn(t, e);
    o && (r = o);
    const s = ns(t, e, n);
    s && (r = s);
  } else
    r = Et2("MISSING_OR_INVALID", `${e}, ${n} should be an object with data`);
  return r;
}
function is(t, e) {
  let n = null;
  if (t && Ve2(t)) {
    const r = Dn(t, e);
    r && (n = r);
    const o = os(t, e);
    o && (n = o);
  } else
    n = Et2("MISSING_OR_INVALID", `${e}, namespaces should be an object with data`);
  return n;
}
function fs(t) {
  return it2(t.protocol, true);
}
function Ba(t, e) {
  let n = false;
  return e && !t ? n = true : t && me2(t) && t.length && t.forEach((r) => {
    n = fs(r);
  }), n;
}
function Ia(t) {
  return typeof t == "number";
}
function Aa(t) {
  return typeof t < "u" && typeof t !== null;
}
function Sa(t) {
  return !(!t || typeof t != "object" || !t.code || !qe2(t.code, false) || !t.message || !it2(t.message, false));
}
function Na(t) {
  return !(kt2(t) || !it2(t.method, false));
}
function Oa(t) {
  return !(kt2(t) || kt2(t.result) && kt2(t.error) || !qe2(t.id, false) || !it2(t.jsonrpc, false));
}
function Ua(t) {
  return !(kt2(t) || !it2(t.name, false));
}
function _a(t, e) {
  return !(!we2(e) || !Go2(t).includes(e));
}
function Ta(t, e, n) {
  return it2(n, false) ? Zo2(t, e).includes(n) : false;
}
function Ra(t, e, n) {
  return it2(n, false) ? Wo2(t, e).includes(n) : false;
}
function cs(t, e, n) {
  let r = null;
  const o = $a(t), s = Ca(e), i = Object.keys(o), f = Object.keys(s), a = as(Object.keys(t)), l = as(Object.keys(e)), c = a.filter((u) => !l.includes(u));
  return c.length && (r = Et2("NON_CONFORMING_NAMESPACES", `${n} namespaces keys don't satisfy requiredNamespaces.
      Required: ${c.toString()}
      Received: ${Object.keys(e).toString()}`)), It2(i, f) || (r = Et2("NON_CONFORMING_NAMESPACES", `${n} namespaces chains don't satisfy required namespaces.
      Required: ${i.toString()}
      Approved: ${f.toString()}`)), Object.keys(e).forEach((u) => {
    if (!u.includes(":") || r)
      return;
    const h = qt2(e[u].accounts);
    h.includes(u) || (r = Et2("NON_CONFORMING_NAMESPACES", `${n} namespaces accounts don't satisfy namespace accounts for ${u}
        Required: ${u}
        Approved: ${h.toString()}`));
  }), i.forEach((u) => {
    r || (It2(o[u].methods, s[u].methods) ? It2(o[u].events, s[u].events) || (r = Et2("NON_CONFORMING_NAMESPACES", `${n} namespaces events don't satisfy namespace events for ${u}`)) : r = Et2("NON_CONFORMING_NAMESPACES", `${n} namespaces methods don't satisfy namespace methods for ${u}`));
  }), r;
}
function $a(t) {
  const e = {};
  return Object.keys(t).forEach((n) => {
    var r;
    n.includes(":") ? e[n] = t[n] : (r = t[n].chains) == null || r.forEach((o) => {
      e[o] = { methods: t[n].methods, events: t[n].events };
    });
  }), e;
}
function as(t) {
  return [...new Set(t.map((e) => e.includes(":") ? e.split(":")[0] : e))];
}
function Ca(t) {
  const e = {};
  return Object.keys(t).forEach((n) => {
    if (n.includes(":"))
      e[n] = t[n];
    else {
      const r = qt2(t[n].accounts);
      r == null ? void 0 : r.forEach((o) => {
        e[o] = { accounts: t[n].accounts.filter((s) => s.includes(`${o}:`)), methods: t[n].methods, events: t[n].events };
      });
    }
  }), e;
}
function La(t, e) {
  return qe2(t, false) && t <= e.max && t >= e.min;
}
function ja() {
  const t = Pt2();
  return new Promise((e) => {
    switch (t) {
      case J2.browser:
        e(us());
        break;
      case J2.reactNative:
        e(ls());
        break;
      case J2.node:
        e(ds());
        break;
      default:
        e(true);
    }
  });
}
function us() {
  return zt2() && (navigator == null ? void 0 : navigator.onLine);
}
async function ls() {
  if (Bt2() && typeof global < "u" && global != null && global.NetInfo) {
    const t = await (global == null ? void 0 : global.NetInfo.fetch());
    return t == null ? void 0 : t.isConnected;
  }
  return true;
}
function ds() {
  return true;
}
function ka(t) {
  switch (Pt2()) {
    case J2.browser:
      hs(t);
      break;
    case J2.reactNative:
      ps(t);
      break;
    case J2.node:
      break;
  }
}
function hs(t) {
  !Bt2() && zt2() && (window.addEventListener("online", () => t(true)), window.addEventListener("offline", () => t(false)));
}
function ps(t) {
  Bt2() && typeof global < "u" && global != null && global.NetInfo && (global == null ? void 0 : global.NetInfo.addEventListener((e) => t(e == null ? void 0 : e.isConnected)));
}
function Pa() {
  var t;
  return zt2() && (0, import_window_getters.getDocument)() ? ((t = (0, import_window_getters.getDocument)()) == null ? void 0 : t.visibilityState) === "visible" : true;
}
var Mn2 = {};
var Ha = class {
  static get(e) {
    return Mn2[e];
  }
  static set(e, n) {
    Mn2[e] = n;
  }
  static delete(e) {
    delete Mn2[e];
  }
};
function gs(t) {
  const e = esm_default2.decode(t);
  if (e.length < 33)
    throw new Error("Too short to contain a public key");
  return e.slice(1, 33);
}
function bs({ publicKey: t, signature: e, payload: n }) {
  var r;
  const o = Vn2(n.method), s = 128 | parseInt(((r = n.version) == null ? void 0 : r.toString()) || "4"), i = Ma(n.address), f = n.era === "00" ? new Uint8Array([0]) : Vn2(n.era);
  if (f.length !== 1 && f.length !== 2)
    throw new Error("Invalid era length");
  const a = parseInt(n.nonce, 16), l = new Uint8Array([a & 255, a >> 8 & 255]), c = BigInt(`0x${Da(n.tip)}`), u = qa(c), h = new Uint8Array([0, ...t, i, ...e, ...f, ...l, ...u, ...o]), g = Va(h.length + 1);
  return new Uint8Array([...g, s, ...h]);
}
function ys(t) {
  const e = Vn2(t), n = (0, import_blakejs.blake2b)(e, void 0, 32);
  return "0x" + Buffer.from(n).toString("hex");
}
function Vn2(t) {
  return new Uint8Array(t.replace(/^0x/, "").match(/.{1,2}/g).map((e) => parseInt(e, 16)));
}
function Da(t) {
  return t.startsWith("0x") ? t.slice(2) : t;
}
function Ma(t) {
  const e = esm_default2.decode(t)[0];
  return e === 42 ? 0 : e === 60 ? 2 : 1;
}
function Va(t) {
  if (t < 64)
    return new Uint8Array([t << 2]);
  if (t < 16384) {
    const e = t << 2 | 1;
    return new Uint8Array([e & 255, e >> 8 & 255]);
  } else if (t < 1 << 30) {
    const e = t << 2 | 2;
    return new Uint8Array([e & 255, e >> 8 & 255, e >> 16 & 255, e >> 24 & 255]);
  } else
    throw new Error("Compact encoding > 2^30 not supported");
}
function qa(t) {
  if (t < BigInt(1) << BigInt(6))
    return new Uint8Array([Number(t << BigInt(2))]);
  if (t < BigInt(1) << BigInt(14)) {
    const e = t << BigInt(2) | BigInt(1);
    return new Uint8Array([Number(e & BigInt(255)), Number(e >> BigInt(8) & BigInt(255))]);
  } else if (t < BigInt(1) << BigInt(30)) {
    const e = t << BigInt(2) | BigInt(2);
    return new Uint8Array([Number(e & BigInt(255)), Number(e >> BigInt(8) & BigInt(255)), Number(e >> BigInt(16) & BigInt(255)), Number(e >> BigInt(24) & BigInt(255))]);
  } else
    throw new Error("BigInt compact encoding not supported > 2^30");
}
function Ka(t) {
  const e = Uint8Array.from(Buffer.from(t.signature, "hex")), n = gs(t.transaction.address), r = bs({ publicKey: n, signature: e, payload: t.transaction }), o = Buffer.from(r).toString("hex");
  return ys(o);
}

export {
  tslib_es6_exports,
  init_tslib_es6,
  require_cjs,
  safeJsonParse,
  safeJsonStringify,
  Qe,
  sn,
  Po,
  Qo,
  require_cjs2,
  toString3 as toString,
  Fe,
  Gn2 as Gn,
  ze2 as ze,
  Zn2 as Zn,
  Ge2 as Ge,
  Wn2 as Wn,
  Yn2 as Yn,
  Os,
  Us,
  Xn2 as Xn,
  _s,
  Ts,
  Rs,
  ve2 as ve,
  er2 as er,
  J2 as J,
  Ee2 as Ee,
  Hs,
  nr2 as nr,
  We2 as We,
  Ds,
  rr2 as rr,
  Ye2 as Ye,
  Bt2 as Bt,
  Ms,
  Vs,
  zt2 as zt,
  Pt2 as Pt,
  qs,
  or3 as or,
  Ks,
  sr2 as sr,
  Fs,
  ir2 as ir,
  fr2 as fr,
  cr2 as cr,
  zs,
  Gs,
  Zs,
  ar2 as ar,
  Ws,
  It2 as It,
  ur2 as ur,
  Ys,
  Xs,
  Js,
  Qs,
  lr2 as lr,
  ti,
  ei,
  ni,
  Xe2 as Xe,
  ri,
  oi,
  si,
  ii,
  fi,
  ci,
  ct2 as ct,
  ai,
  dr2 as dr,
  hr2 as hr,
  ui,
  Je2 as Je,
  li,
  di,
  hi,
  pr2 as pr,
  gr2 as gr,
  br2 as br,
  Qe2,
  pi,
  gi,
  an,
  Cr2 as Cr,
  Lr2 as Lr,
  jr2 as jr,
  sf,
  ff,
  cf,
  kr2 as kr,
  af,
  uf,
  Se2 as Se,
  Mr2 as Mr,
  Vr2 as Vr,
  dn,
  yf,
  qr2 as qr,
  mf,
  wf,
  Kr2 as Kr,
  xf,
  Fr2 as Fr,
  vf,
  zr2 as zr,
  Gr2 as Gr,
  Zr2 as Zr,
  bt2 as bt,
  Wr2 as Wr,
  Yr2 as Yr,
  hn,
  Ne2 as Ne,
  Lt2 as Lt,
  Ef,
  pn,
  Bf,
  Xr2 as Xr,
  gn2 as gn,
  If,
  Af,
  Jr2 as Jr,
  Oe2 as Oe,
  $n2 as $n,
  tt,
  Qt2 as Qt,
  De2 as De,
  te2 as te,
  Cn2 as Cn,
  ee,
  ge2 as ge,
  Vc,
  qc,
  Kc,
  Fc,
  zc,
  jn2 as jn,
  Vt2 as Vt,
  Gc,
  Zc,
  Wc,
  Yc,
  kn2 as kn,
  Me2 as Me,
  Xc,
  Ho2 as Ho,
  Jc,
  Qc,
  Do2 as Do,
  ta,
  Mo2 as Mo,
  ea,
  na,
  Vo2 as Vo,
  ra,
  qo2 as qo,
  Ko2 as Ko,
  oa,
  sa,
  qt2 as qt,
  Go2 as Go,
  Zo2 as Zo,
  Wo2 as Wo,
  ha,
  pa,
  Pn2 as Pn,
  Yo2 as Yo,
  ye2 as ye,
  Xo,
  ga,
  ba,
  Jo2 as Jo,
  Qo2,
  Et2 as Et,
  Kt2 as Kt,
  me2 as me,
  Ve2 as Ve,
  kt2 as kt,
  it2 as it,
  qe2 as qe,
  ya,
  we2 as we,
  ts,
  ma,
  wa,
  xa,
  va,
  Hn2 as Hn,
  es,
  ns,
  rs,
  os,
  ss,
  Dn,
  Ea,
  is,
  fs,
  Ba,
  Ia,
  Aa,
  Sa,
  Na,
  Oa,
  Ua,
  _a,
  Ta,
  Ra,
  cs,
  La,
  ja,
  us,
  ls,
  ds,
  ka,
  hs,
  ps,
  Pa,
  Ha,
  gs,
  bs,
  ys,
  Ka
};
/*! Bundled license information:

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

@scure/base/lib/esm/index.js:
  (*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@walletconnect/relay-auth/dist/index.es.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@walletconnect/utils/dist/index.es.js:
  (*! noble-ciphers - MIT License (c) 2023 Paul Miller (paulmillr.com) *)
*/
//# sourceMappingURL=chunk-R3AZY4AQ.js.map
