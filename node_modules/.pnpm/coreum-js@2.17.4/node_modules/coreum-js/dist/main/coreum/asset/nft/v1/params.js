"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: coreum-protos/nft/params.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Params = exports.protobufPackage = void 0;
/* eslint-disable */
const binary_1 = require("cosmjs-types/binary");
const coin_1 = require("cosmjs-types/cosmos/base/v1beta1/coin");
exports.protobufPackage = "coreum.asset.nft.v1";
function createBaseParams() {
    return { mintFee: undefined };
}
exports.Params = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.mintFee !== undefined) {
            coin_1.Coin.encode(message.mintFee, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.mintFee = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            mintFee: isSet(object.mintFee)
                ? coin_1.Coin.fromJSON(object.mintFee)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.mintFee !== undefined) {
            obj.mintFee = coin_1.Coin.toJSON(message.mintFee);
        }
        return obj;
    },
    create(base) {
        return exports.Params.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseParams();
        message.mintFee =
            object.mintFee !== undefined && object.mintFee !== null
                ? coin_1.Coin.fromPartial(object.mintFee)
                : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
