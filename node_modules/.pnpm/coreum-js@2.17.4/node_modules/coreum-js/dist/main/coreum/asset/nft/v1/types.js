"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: coreum-protos/nft/types.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataDynamic = exports.DataDynamicIndexedItem = exports.DataDynamicItem = exports.DataBytes = exports.dataEditorToJSON = exports.dataEditorFromJSON = exports.DataEditor = exports.protobufPackage = void 0;
/* eslint-disable */
const binary_1 = require("cosmjs-types/binary");
exports.protobufPackage = "coreum.asset.nft.v1";
/** DataEditor defines possible data editors. */
var DataEditor;
(function (DataEditor) {
    DataEditor[DataEditor["admin"] = 0] = "admin";
    DataEditor[DataEditor["owner"] = 1] = "owner";
    DataEditor[DataEditor["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(DataEditor || (exports.DataEditor = DataEditor = {}));
function dataEditorFromJSON(object) {
    switch (object) {
        case 0:
        case "admin":
            return DataEditor.admin;
        case 1:
        case "owner":
            return DataEditor.owner;
        case -1:
        case "UNRECOGNIZED":
        default:
            return DataEditor.UNRECOGNIZED;
    }
}
exports.dataEditorFromJSON = dataEditorFromJSON;
function dataEditorToJSON(object) {
    switch (object) {
        case DataEditor.admin:
            return "admin";
        case DataEditor.owner:
            return "owner";
        case DataEditor.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.dataEditorToJSON = dataEditorToJSON;
function createBaseDataBytes() {
    return { Data: new Uint8Array(0) };
}
exports.DataBytes = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.Data.length !== 0) {
            writer.uint32(10).bytes(message.Data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDataBytes();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.Data = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            Data: isSet(object.Data)
                ? bytesFromBase64(object.Data)
                : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.Data.length !== 0) {
            obj.Data = base64FromBytes(message.Data);
        }
        return obj;
    },
    create(base) {
        return exports.DataBytes.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDataBytes();
        message.Data = object.Data ?? new Uint8Array(0);
        return message;
    },
};
function createBaseDataDynamicItem() {
    return { editors: [], data: new Uint8Array(0) };
}
exports.DataDynamicItem = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.editors) {
            writer.int32(v);
        }
        writer.ldelim();
        if (message.data.length !== 0) {
            writer.uint32(18).bytes(message.data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDataDynamicItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.editors.push(reader.int32());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.editors.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.data = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            editors: globalThis.Array.isArray(object?.editors)
                ? object.editors.map((e) => dataEditorFromJSON(e))
                : [],
            data: isSet(object.data)
                ? bytesFromBase64(object.data)
                : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.editors?.length) {
            obj.editors = message.editors.map((e) => dataEditorToJSON(e));
        }
        if (message.data.length !== 0) {
            obj.data = base64FromBytes(message.data);
        }
        return obj;
    },
    create(base) {
        return exports.DataDynamicItem.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDataDynamicItem();
        message.editors = object.editors?.map((e) => e) || [];
        message.data = object.data ?? new Uint8Array(0);
        return message;
    },
};
function createBaseDataDynamicIndexedItem() {
    return { index: 0, data: new Uint8Array(0) };
}
exports.DataDynamicIndexedItem = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.index !== 0) {
            writer.uint32(8).uint32(message.index);
        }
        if (message.data.length !== 0) {
            writer.uint32(18).bytes(message.data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDataDynamicIndexedItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.index = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.data = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            index: isSet(object.index) ? globalThis.Number(object.index) : 0,
            data: isSet(object.data)
                ? bytesFromBase64(object.data)
                : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.index !== 0) {
            obj.index = Math.round(message.index);
        }
        if (message.data.length !== 0) {
            obj.data = base64FromBytes(message.data);
        }
        return obj;
    },
    create(base) {
        return exports.DataDynamicIndexedItem.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDataDynamicIndexedItem();
        message.index = object.index ?? 0;
        message.data = object.data ?? new Uint8Array(0);
        return message;
    },
};
function createBaseDataDynamic() {
    return { items: [] };
}
exports.DataDynamic = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        for (const v of message.items) {
            exports.DataDynamicItem.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDataDynamic();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.items.push(exports.DataDynamicItem.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            items: globalThis.Array.isArray(object?.items)
                ? object.items.map((e) => exports.DataDynamicItem.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.items?.length) {
            obj.items = message.items.map((e) => exports.DataDynamicItem.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.DataDynamic.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDataDynamic();
        message.items =
            object.items?.map((e) => exports.DataDynamicItem.fromPartial(e)) || [];
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
