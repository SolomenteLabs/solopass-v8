"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: coreum-protos/nft/genesis.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.BurntNFT = exports.ClassFrozenAccounts = exports.ClassWhitelistedAccounts = exports.WhitelistedNFTAccounts = exports.FrozenNFT = exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
const binary_1 = require("cosmjs-types/binary");
const nft_1 = require("./nft");
const params_1 = require("./params");
exports.protobufPackage = "coreum.asset.nft.v1";
function createBaseGenesisState() {
    return {
        params: undefined,
        classDefinitions: [],
        frozenNfts: [],
        whitelistedNftAccounts: [],
        burntNfts: [],
        classWhitelistedAccounts: [],
        classFrozenAccounts: [],
    };
}
exports.GenesisState = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.classDefinitions) {
            nft_1.ClassDefinition.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.frozenNfts) {
            exports.FrozenNFT.encode(v, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.whitelistedNftAccounts) {
            exports.WhitelistedNFTAccounts.encode(v, writer.uint32(34).fork()).ldelim();
        }
        for (const v of message.burntNfts) {
            exports.BurntNFT.encode(v, writer.uint32(42).fork()).ldelim();
        }
        for (const v of message.classWhitelistedAccounts) {
            exports.ClassWhitelistedAccounts.encode(v, writer.uint32(50).fork()).ldelim();
        }
        for (const v of message.classFrozenAccounts) {
            exports.ClassFrozenAccounts.encode(v, writer.uint32(58).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.classDefinitions.push(nft_1.ClassDefinition.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.frozenNfts.push(exports.FrozenNFT.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.whitelistedNftAccounts.push(exports.WhitelistedNFTAccounts.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.burntNfts.push(exports.BurntNFT.decode(reader, reader.uint32()));
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.classWhitelistedAccounts.push(exports.ClassWhitelistedAccounts.decode(reader, reader.uint32()));
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.classFrozenAccounts.push(exports.ClassFrozenAccounts.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params) ? params_1.Params.fromJSON(object.params) : undefined,
            classDefinitions: globalThis.Array.isArray(object?.classDefinitions)
                ? object.classDefinitions.map((e) => nft_1.ClassDefinition.fromJSON(e))
                : [],
            frozenNfts: globalThis.Array.isArray(object?.frozenNfts)
                ? object.frozenNfts.map((e) => exports.FrozenNFT.fromJSON(e))
                : [],
            whitelistedNftAccounts: globalThis.Array.isArray(object?.whitelistedNftAccounts)
                ? object.whitelistedNftAccounts.map((e) => exports.WhitelistedNFTAccounts.fromJSON(e))
                : [],
            burntNfts: globalThis.Array.isArray(object?.burntNfts)
                ? object.burntNfts.map((e) => exports.BurntNFT.fromJSON(e))
                : [],
            classWhitelistedAccounts: globalThis.Array.isArray(object?.classWhitelistedAccounts)
                ? object.classWhitelistedAccounts.map((e) => exports.ClassWhitelistedAccounts.fromJSON(e))
                : [],
            classFrozenAccounts: globalThis.Array.isArray(object?.classFrozenAccounts)
                ? object.classFrozenAccounts.map((e) => exports.ClassFrozenAccounts.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.params !== undefined) {
            obj.params = params_1.Params.toJSON(message.params);
        }
        if (message.classDefinitions?.length) {
            obj.classDefinitions = message.classDefinitions.map((e) => nft_1.ClassDefinition.toJSON(e));
        }
        if (message.frozenNfts?.length) {
            obj.frozenNfts = message.frozenNfts.map((e) => exports.FrozenNFT.toJSON(e));
        }
        if (message.whitelistedNftAccounts?.length) {
            obj.whitelistedNftAccounts = message.whitelistedNftAccounts.map((e) => exports.WhitelistedNFTAccounts.toJSON(e));
        }
        if (message.burntNfts?.length) {
            obj.burntNfts = message.burntNfts.map((e) => exports.BurntNFT.toJSON(e));
        }
        if (message.classWhitelistedAccounts?.length) {
            obj.classWhitelistedAccounts = message.classWhitelistedAccounts.map((e) => exports.ClassWhitelistedAccounts.toJSON(e));
        }
        if (message.classFrozenAccounts?.length) {
            obj.classFrozenAccounts = message.classFrozenAccounts.map((e) => exports.ClassFrozenAccounts.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GenesisState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenesisState();
        message.params =
            object.params !== undefined && object.params !== null
                ? params_1.Params.fromPartial(object.params)
                : undefined;
        message.classDefinitions =
            object.classDefinitions?.map((e) => nft_1.ClassDefinition.fromPartial(e)) || [];
        message.frozenNfts =
            object.frozenNfts?.map((e) => exports.FrozenNFT.fromPartial(e)) || [];
        message.whitelistedNftAccounts =
            object.whitelistedNftAccounts?.map((e) => exports.WhitelistedNFTAccounts.fromPartial(e)) || [];
        message.burntNfts =
            object.burntNfts?.map((e) => exports.BurntNFT.fromPartial(e)) || [];
        message.classWhitelistedAccounts =
            object.classWhitelistedAccounts?.map((e) => exports.ClassWhitelistedAccounts.fromPartial(e)) || [];
        message.classFrozenAccounts =
            object.classFrozenAccounts?.map((e) => exports.ClassFrozenAccounts.fromPartial(e)) || [];
        return message;
    },
};
function createBaseFrozenNFT() {
    return { classID: "", nftIDs: [] };
}
exports.FrozenNFT = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.classID !== "") {
            writer.uint32(10).string(message.classID);
        }
        for (const v of message.nftIDs) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFrozenNFT();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.classID = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.nftIDs.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            classID: isSet(object.classID) ? globalThis.String(object.classID) : "",
            nftIDs: globalThis.Array.isArray(object?.nftIDs)
                ? object.nftIDs.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.classID !== "") {
            obj.classID = message.classID;
        }
        if (message.nftIDs?.length) {
            obj.nftIDs = message.nftIDs;
        }
        return obj;
    },
    create(base) {
        return exports.FrozenNFT.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFrozenNFT();
        message.classID = object.classID ?? "";
        message.nftIDs = object.nftIDs?.map((e) => e) || [];
        return message;
    },
};
function createBaseWhitelistedNFTAccounts() {
    return { classID: "", nftID: "", accounts: [] };
}
exports.WhitelistedNFTAccounts = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.classID !== "") {
            writer.uint32(10).string(message.classID);
        }
        if (message.nftID !== "") {
            writer.uint32(18).string(message.nftID);
        }
        for (const v of message.accounts) {
            writer.uint32(34).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWhitelistedNFTAccounts();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.classID = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.nftID = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.accounts.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            classID: isSet(object.classID) ? globalThis.String(object.classID) : "",
            nftID: isSet(object.nftID) ? globalThis.String(object.nftID) : "",
            accounts: globalThis.Array.isArray(object?.accounts)
                ? object.accounts.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.classID !== "") {
            obj.classID = message.classID;
        }
        if (message.nftID !== "") {
            obj.nftID = message.nftID;
        }
        if (message.accounts?.length) {
            obj.accounts = message.accounts;
        }
        return obj;
    },
    create(base) {
        return exports.WhitelistedNFTAccounts.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseWhitelistedNFTAccounts();
        message.classID = object.classID ?? "";
        message.nftID = object.nftID ?? "";
        message.accounts = object.accounts?.map((e) => e) || [];
        return message;
    },
};
function createBaseClassWhitelistedAccounts() {
    return { classID: "", accounts: [] };
}
exports.ClassWhitelistedAccounts = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.classID !== "") {
            writer.uint32(10).string(message.classID);
        }
        for (const v of message.accounts) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClassWhitelistedAccounts();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.classID = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.accounts.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            classID: isSet(object.classID) ? globalThis.String(object.classID) : "",
            accounts: globalThis.Array.isArray(object?.accounts)
                ? object.accounts.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.classID !== "") {
            obj.classID = message.classID;
        }
        if (message.accounts?.length) {
            obj.accounts = message.accounts;
        }
        return obj;
    },
    create(base) {
        return exports.ClassWhitelistedAccounts.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseClassWhitelistedAccounts();
        message.classID = object.classID ?? "";
        message.accounts = object.accounts?.map((e) => e) || [];
        return message;
    },
};
function createBaseClassFrozenAccounts() {
    return { classID: "", accounts: [] };
}
exports.ClassFrozenAccounts = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.classID !== "") {
            writer.uint32(10).string(message.classID);
        }
        for (const v of message.accounts) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClassFrozenAccounts();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.classID = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.accounts.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            classID: isSet(object.classID) ? globalThis.String(object.classID) : "",
            accounts: globalThis.Array.isArray(object?.accounts)
                ? object.accounts.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.classID !== "") {
            obj.classID = message.classID;
        }
        if (message.accounts?.length) {
            obj.accounts = message.accounts;
        }
        return obj;
    },
    create(base) {
        return exports.ClassFrozenAccounts.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseClassFrozenAccounts();
        message.classID = object.classID ?? "";
        message.accounts = object.accounts?.map((e) => e) || [];
        return message;
    },
};
function createBaseBurntNFT() {
    return { classID: "", nftIDs: [] };
}
exports.BurntNFT = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.classID !== "") {
            writer.uint32(10).string(message.classID);
        }
        for (const v of message.nftIDs) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBurntNFT();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.classID = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.nftIDs.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            classID: isSet(object.classID) ? globalThis.String(object.classID) : "",
            nftIDs: globalThis.Array.isArray(object?.nftIDs)
                ? object.nftIDs.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.classID !== "") {
            obj.classID = message.classID;
        }
        if (message.nftIDs?.length) {
            obj.nftIDs = message.nftIDs;
        }
        return obj;
    },
    create(base) {
        return exports.BurntNFT.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBurntNFT();
        message.classID = object.classID ?? "";
        message.nftIDs = object.nftIDs?.map((e) => e) || [];
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
