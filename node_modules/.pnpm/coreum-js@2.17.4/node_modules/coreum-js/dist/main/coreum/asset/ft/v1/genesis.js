"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: coreum-protos/ft/genesis.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEXSettingsWithDenom = exports.PendingTokenUpgrade = exports.Balance = exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
const binary_1 = require("cosmjs-types/binary");
const coin_1 = require("cosmjs-types/cosmos/base/v1beta1/coin");
const params_1 = require("./params");
const token_1 = require("./token");
exports.protobufPackage = "coreum.asset.ft.v1";
function createBaseGenesisState() {
    return {
        params: undefined,
        tokens: [],
        frozenBalances: [],
        whitelistedBalances: [],
        pendingTokenUpgrades: [],
        dexLockedBalances: [],
        dexExpectedToReceiveBalances: [],
        dexSettings: [],
    };
}
exports.GenesisState = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.tokens) {
            token_1.Token.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.frozenBalances) {
            exports.Balance.encode(v, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.whitelistedBalances) {
            exports.Balance.encode(v, writer.uint32(34).fork()).ldelim();
        }
        for (const v of message.pendingTokenUpgrades) {
            exports.PendingTokenUpgrade.encode(v, writer.uint32(42).fork()).ldelim();
        }
        for (const v of message.dexLockedBalances) {
            exports.Balance.encode(v, writer.uint32(50).fork()).ldelim();
        }
        for (const v of message.dexExpectedToReceiveBalances) {
            exports.Balance.encode(v, writer.uint32(58).fork()).ldelim();
        }
        for (const v of message.dexSettings) {
            exports.DEXSettingsWithDenom.encode(v, writer.uint32(66).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.tokens.push(token_1.Token.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.frozenBalances.push(exports.Balance.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.whitelistedBalances.push(exports.Balance.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.pendingTokenUpgrades.push(exports.PendingTokenUpgrade.decode(reader, reader.uint32()));
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.dexLockedBalances.push(exports.Balance.decode(reader, reader.uint32()));
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.dexExpectedToReceiveBalances.push(exports.Balance.decode(reader, reader.uint32()));
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.dexSettings.push(exports.DEXSettingsWithDenom.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params) ? params_1.Params.fromJSON(object.params) : undefined,
            tokens: globalThis.Array.isArray(object?.tokens)
                ? object.tokens.map((e) => token_1.Token.fromJSON(e))
                : [],
            frozenBalances: globalThis.Array.isArray(object?.frozenBalances)
                ? object.frozenBalances.map((e) => exports.Balance.fromJSON(e))
                : [],
            whitelistedBalances: globalThis.Array.isArray(object?.whitelistedBalances)
                ? object.whitelistedBalances.map((e) => exports.Balance.fromJSON(e))
                : [],
            pendingTokenUpgrades: globalThis.Array.isArray(object?.pendingTokenUpgrades)
                ? object.pendingTokenUpgrades.map((e) => exports.PendingTokenUpgrade.fromJSON(e))
                : [],
            dexLockedBalances: globalThis.Array.isArray(object?.dexLockedBalances)
                ? object.dexLockedBalances.map((e) => exports.Balance.fromJSON(e))
                : [],
            dexExpectedToReceiveBalances: globalThis.Array.isArray(object?.dexExpectedToReceiveBalances)
                ? object.dexExpectedToReceiveBalances.map((e) => exports.Balance.fromJSON(e))
                : [],
            dexSettings: globalThis.Array.isArray(object?.dexSettings)
                ? object.dexSettings.map((e) => exports.DEXSettingsWithDenom.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.params !== undefined) {
            obj.params = params_1.Params.toJSON(message.params);
        }
        if (message.tokens?.length) {
            obj.tokens = message.tokens.map((e) => token_1.Token.toJSON(e));
        }
        if (message.frozenBalances?.length) {
            obj.frozenBalances = message.frozenBalances.map((e) => exports.Balance.toJSON(e));
        }
        if (message.whitelistedBalances?.length) {
            obj.whitelistedBalances = message.whitelistedBalances.map((e) => exports.Balance.toJSON(e));
        }
        if (message.pendingTokenUpgrades?.length) {
            obj.pendingTokenUpgrades = message.pendingTokenUpgrades.map((e) => exports.PendingTokenUpgrade.toJSON(e));
        }
        if (message.dexLockedBalances?.length) {
            obj.dexLockedBalances = message.dexLockedBalances.map((e) => exports.Balance.toJSON(e));
        }
        if (message.dexExpectedToReceiveBalances?.length) {
            obj.dexExpectedToReceiveBalances =
                message.dexExpectedToReceiveBalances.map((e) => exports.Balance.toJSON(e));
        }
        if (message.dexSettings?.length) {
            obj.dexSettings = message.dexSettings.map((e) => exports.DEXSettingsWithDenom.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GenesisState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenesisState();
        message.params =
            object.params !== undefined && object.params !== null
                ? params_1.Params.fromPartial(object.params)
                : undefined;
        message.tokens = object.tokens?.map((e) => token_1.Token.fromPartial(e)) || [];
        message.frozenBalances =
            object.frozenBalances?.map((e) => exports.Balance.fromPartial(e)) || [];
        message.whitelistedBalances =
            object.whitelistedBalances?.map((e) => exports.Balance.fromPartial(e)) || [];
        message.pendingTokenUpgrades =
            object.pendingTokenUpgrades?.map((e) => exports.PendingTokenUpgrade.fromPartial(e)) || [];
        message.dexLockedBalances =
            object.dexLockedBalances?.map((e) => exports.Balance.fromPartial(e)) || [];
        message.dexExpectedToReceiveBalances =
            object.dexExpectedToReceiveBalances?.map((e) => exports.Balance.fromPartial(e)) ||
                [];
        message.dexSettings =
            object.dexSettings?.map((e) => exports.DEXSettingsWithDenom.fromPartial(e)) || [];
        return message;
    },
};
function createBaseBalance() {
    return { address: "", coins: [] };
}
exports.Balance = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        for (const v of message.coins) {
            coin_1.Coin.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBalance();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.coins.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            coins: globalThis.Array.isArray(object?.coins)
                ? object.coins.map((e) => coin_1.Coin.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.coins?.length) {
            obj.coins = message.coins.map((e) => coin_1.Coin.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Balance.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBalance();
        message.address = object.address ?? "";
        message.coins = object.coins?.map((e) => coin_1.Coin.fromPartial(e)) || [];
        return message;
    },
};
function createBasePendingTokenUpgrade() {
    return { denom: "", version: 0 };
}
exports.PendingTokenUpgrade = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        if (message.version !== 0) {
            writer.uint32(16).uint32(message.version);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePendingTokenUpgrade();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.version = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            version: isSet(object.version) ? globalThis.Number(object.version) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.version !== 0) {
            obj.version = Math.round(message.version);
        }
        return obj;
    },
    create(base) {
        return exports.PendingTokenUpgrade.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePendingTokenUpgrade();
        message.denom = object.denom ?? "";
        message.version = object.version ?? 0;
        return message;
    },
};
function createBaseDEXSettingsWithDenom() {
    return { denom: "", dexSettings: undefined };
}
exports.DEXSettingsWithDenom = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        if (message.dexSettings !== undefined) {
            token_1.DEXSettings.encode(message.dexSettings, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDEXSettingsWithDenom();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.dexSettings = token_1.DEXSettings.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            dexSettings: isSet(object.dexSettings)
                ? token_1.DEXSettings.fromJSON(object.dexSettings)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.dexSettings !== undefined) {
            obj.dexSettings = token_1.DEXSettings.toJSON(message.dexSettings);
        }
        return obj;
    },
    create(base) {
        return exports.DEXSettingsWithDenom.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDEXSettingsWithDenom();
        message.denom = object.denom ?? "";
        message.dexSettings =
            object.dexSettings !== undefined && object.dexSettings !== null
                ? token_1.DEXSettings.fromPartial(object.dexSettings)
                : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
