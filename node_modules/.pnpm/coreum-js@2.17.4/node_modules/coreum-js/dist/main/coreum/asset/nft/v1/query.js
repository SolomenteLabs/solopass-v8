"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: coreum-protos/nft/query.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.QueryServiceName = exports.QueryBurntNFTsInClassResponse = exports.QueryBurntNFTsInClassRequest = exports.QueryBurntNFTResponse = exports.QueryBurntNFTRequest = exports.QueryClassFrozenAccountsResponse = exports.QueryClassFrozenAccountsRequest = exports.QueryClassWhitelistedAccountsResponse = exports.QueryClassWhitelistedAccountsRequest = exports.QueryWhitelistedAccountsForNFTResponse = exports.QueryWhitelistedAccountsForNFTRequest = exports.QueryWhitelistedResponse = exports.QueryWhitelistedRequest = exports.QueryClassFrozenResponse = exports.QueryClassFrozenRequest = exports.QueryFrozenResponse = exports.QueryFrozenRequest = exports.QueryClassesResponse = exports.QueryClassesRequest = exports.QueryClassResponse = exports.QueryClassRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const binary_1 = require("cosmjs-types/binary");
const pagination_1 = require("cosmjs-types/cosmos/base/query/v1beta1/pagination");
const nft_1 = require("./nft");
const params_1 = require("./params");
exports.protobufPackage = "coreum.asset.nft.v1";
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    encode(_, writer = new binary_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryParamsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
};
function createBaseQueryParamsResponse() {
    return { params: undefined };
}
exports.QueryParamsResponse = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params) ? params_1.Params.fromJSON(object.params) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.params !== undefined) {
            obj.params = params_1.Params.toJSON(message.params);
        }
        return obj;
    },
    create(base) {
        return exports.QueryParamsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params =
            object.params !== undefined && object.params !== null
                ? params_1.Params.fromPartial(object.params)
                : undefined;
        return message;
    },
};
function createBaseQueryClassRequest() {
    return { id: "" };
}
exports.QueryClassRequest = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryClassRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.QueryClassRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryClassRequest();
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseQueryClassResponse() {
    return { class: undefined };
}
exports.QueryClassResponse = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.class !== undefined) {
            nft_1.Class.encode(message.class, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryClassResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.class = nft_1.Class.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            class: isSet(object.class) ? nft_1.Class.fromJSON(object.class) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.class !== undefined) {
            obj.class = nft_1.Class.toJSON(message.class);
        }
        return obj;
    },
    create(base) {
        return exports.QueryClassResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryClassResponse();
        message.class =
            object.class !== undefined && object.class !== null
                ? nft_1.Class.fromPartial(object.class)
                : undefined;
        return message;
    },
};
function createBaseQueryClassesRequest() {
    return { pagination: undefined, issuer: "" };
}
exports.QueryClassesRequest = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        if (message.issuer !== "") {
            writer.uint32(18).string(message.issuer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryClassesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination)
                ? pagination_1.PageRequest.fromJSON(object.pagination)
                : undefined,
            issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = pagination_1.PageRequest.toJSON(message.pagination);
        }
        if (message.issuer !== "") {
            obj.issuer = message.issuer;
        }
        return obj;
    },
    create(base) {
        return exports.QueryClassesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryClassesRequest();
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageRequest.fromPartial(object.pagination)
                : undefined;
        message.issuer = object.issuer ?? "";
        return message;
    },
};
function createBaseQueryClassesResponse() {
    return { pagination: undefined, classes: [] };
}
exports.QueryClassesResponse = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.classes) {
            nft_1.Class.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryClassesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.classes.push(nft_1.Class.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination)
                ? pagination_1.PageResponse.fromJSON(object.pagination)
                : undefined,
            classes: globalThis.Array.isArray(object?.classes)
                ? object.classes.map((e) => nft_1.Class.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = pagination_1.PageResponse.toJSON(message.pagination);
        }
        if (message.classes?.length) {
            obj.classes = message.classes.map((e) => nft_1.Class.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.QueryClassesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryClassesResponse();
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageResponse.fromPartial(object.pagination)
                : undefined;
        message.classes = object.classes?.map((e) => nft_1.Class.fromPartial(e)) || [];
        return message;
    },
};
function createBaseQueryFrozenRequest() {
    return { id: "", classId: "" };
}
exports.QueryFrozenRequest = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.classId !== "") {
            writer.uint32(18).string(message.classId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryFrozenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        return obj;
    },
    create(base) {
        return exports.QueryFrozenRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryFrozenRequest();
        message.id = object.id ?? "";
        message.classId = object.classId ?? "";
        return message;
    },
};
function createBaseQueryFrozenResponse() {
    return { frozen: false };
}
exports.QueryFrozenResponse = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.frozen !== false) {
            writer.uint32(8).bool(message.frozen);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryFrozenResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.frozen = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            frozen: isSet(object.frozen) ? globalThis.Boolean(object.frozen) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.frozen !== false) {
            obj.frozen = message.frozen;
        }
        return obj;
    },
    create(base) {
        return exports.QueryFrozenResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryFrozenResponse();
        message.frozen = object.frozen ?? false;
        return message;
    },
};
function createBaseQueryClassFrozenRequest() {
    return { classId: "", account: "" };
}
exports.QueryClassFrozenRequest = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.classId !== "") {
            writer.uint32(10).string(message.classId);
        }
        if (message.account !== "") {
            writer.uint32(18).string(message.account);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryClassFrozenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
            account: isSet(object.account) ? globalThis.String(object.account) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        if (message.account !== "") {
            obj.account = message.account;
        }
        return obj;
    },
    create(base) {
        return exports.QueryClassFrozenRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryClassFrozenRequest();
        message.classId = object.classId ?? "";
        message.account = object.account ?? "";
        return message;
    },
};
function createBaseQueryClassFrozenResponse() {
    return { frozen: false };
}
exports.QueryClassFrozenResponse = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.frozen !== false) {
            writer.uint32(8).bool(message.frozen);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryClassFrozenResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.frozen = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            frozen: isSet(object.frozen) ? globalThis.Boolean(object.frozen) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.frozen !== false) {
            obj.frozen = message.frozen;
        }
        return obj;
    },
    create(base) {
        return exports.QueryClassFrozenResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryClassFrozenResponse();
        message.frozen = object.frozen ?? false;
        return message;
    },
};
function createBaseQueryWhitelistedRequest() {
    return { id: "", classId: "", account: "" };
}
exports.QueryWhitelistedRequest = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.classId !== "") {
            writer.uint32(18).string(message.classId);
        }
        if (message.account !== "") {
            writer.uint32(26).string(message.account);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryWhitelistedRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
            account: isSet(object.account) ? globalThis.String(object.account) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        if (message.account !== "") {
            obj.account = message.account;
        }
        return obj;
    },
    create(base) {
        return exports.QueryWhitelistedRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryWhitelistedRequest();
        message.id = object.id ?? "";
        message.classId = object.classId ?? "";
        message.account = object.account ?? "";
        return message;
    },
};
function createBaseQueryWhitelistedResponse() {
    return { whitelisted: false };
}
exports.QueryWhitelistedResponse = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.whitelisted !== false) {
            writer.uint32(8).bool(message.whitelisted);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryWhitelistedResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.whitelisted = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            whitelisted: isSet(object.whitelisted)
                ? globalThis.Boolean(object.whitelisted)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.whitelisted !== false) {
            obj.whitelisted = message.whitelisted;
        }
        return obj;
    },
    create(base) {
        return exports.QueryWhitelistedResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryWhitelistedResponse();
        message.whitelisted = object.whitelisted ?? false;
        return message;
    },
};
function createBaseQueryWhitelistedAccountsForNFTRequest() {
    return { pagination: undefined, id: "", classId: "" };
}
exports.QueryWhitelistedAccountsForNFTRequest = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        if (message.classId !== "") {
            writer.uint32(26).string(message.classId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryWhitelistedAccountsForNFTRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination)
                ? pagination_1.PageRequest.fromJSON(object.pagination)
                : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = pagination_1.PageRequest.toJSON(message.pagination);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        return obj;
    },
    create(base) {
        return exports.QueryWhitelistedAccountsForNFTRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryWhitelistedAccountsForNFTRequest();
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageRequest.fromPartial(object.pagination)
                : undefined;
        message.id = object.id ?? "";
        message.classId = object.classId ?? "";
        return message;
    },
};
function createBaseQueryWhitelistedAccountsForNFTResponse() {
    return { pagination: undefined, accounts: [] };
}
exports.QueryWhitelistedAccountsForNFTResponse = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.accounts) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryWhitelistedAccountsForNFTResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.accounts.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination)
                ? pagination_1.PageResponse.fromJSON(object.pagination)
                : undefined,
            accounts: globalThis.Array.isArray(object?.accounts)
                ? object.accounts.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = pagination_1.PageResponse.toJSON(message.pagination);
        }
        if (message.accounts?.length) {
            obj.accounts = message.accounts;
        }
        return obj;
    },
    create(base) {
        return exports.QueryWhitelistedAccountsForNFTResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryWhitelistedAccountsForNFTResponse();
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageResponse.fromPartial(object.pagination)
                : undefined;
        message.accounts = object.accounts?.map((e) => e) || [];
        return message;
    },
};
function createBaseQueryClassWhitelistedAccountsRequest() {
    return { pagination: undefined, classId: "" };
}
exports.QueryClassWhitelistedAccountsRequest = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        if (message.classId !== "") {
            writer.uint32(18).string(message.classId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryClassWhitelistedAccountsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination)
                ? pagination_1.PageRequest.fromJSON(object.pagination)
                : undefined,
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = pagination_1.PageRequest.toJSON(message.pagination);
        }
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        return obj;
    },
    create(base) {
        return exports.QueryClassWhitelistedAccountsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryClassWhitelistedAccountsRequest();
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageRequest.fromPartial(object.pagination)
                : undefined;
        message.classId = object.classId ?? "";
        return message;
    },
};
function createBaseQueryClassWhitelistedAccountsResponse() {
    return { pagination: undefined, accounts: [] };
}
exports.QueryClassWhitelistedAccountsResponse = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.accounts) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryClassWhitelistedAccountsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.accounts.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination)
                ? pagination_1.PageResponse.fromJSON(object.pagination)
                : undefined,
            accounts: globalThis.Array.isArray(object?.accounts)
                ? object.accounts.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = pagination_1.PageResponse.toJSON(message.pagination);
        }
        if (message.accounts?.length) {
            obj.accounts = message.accounts;
        }
        return obj;
    },
    create(base) {
        return exports.QueryClassWhitelistedAccountsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryClassWhitelistedAccountsResponse();
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageResponse.fromPartial(object.pagination)
                : undefined;
        message.accounts = object.accounts?.map((e) => e) || [];
        return message;
    },
};
function createBaseQueryClassFrozenAccountsRequest() {
    return { pagination: undefined, classId: "" };
}
exports.QueryClassFrozenAccountsRequest = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        if (message.classId !== "") {
            writer.uint32(18).string(message.classId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryClassFrozenAccountsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination)
                ? pagination_1.PageRequest.fromJSON(object.pagination)
                : undefined,
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = pagination_1.PageRequest.toJSON(message.pagination);
        }
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        return obj;
    },
    create(base) {
        return exports.QueryClassFrozenAccountsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryClassFrozenAccountsRequest();
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageRequest.fromPartial(object.pagination)
                : undefined;
        message.classId = object.classId ?? "";
        return message;
    },
};
function createBaseQueryClassFrozenAccountsResponse() {
    return { pagination: undefined, accounts: [] };
}
exports.QueryClassFrozenAccountsResponse = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.accounts) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryClassFrozenAccountsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.accounts.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination)
                ? pagination_1.PageResponse.fromJSON(object.pagination)
                : undefined,
            accounts: globalThis.Array.isArray(object?.accounts)
                ? object.accounts.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = pagination_1.PageResponse.toJSON(message.pagination);
        }
        if (message.accounts?.length) {
            obj.accounts = message.accounts;
        }
        return obj;
    },
    create(base) {
        return exports.QueryClassFrozenAccountsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryClassFrozenAccountsResponse();
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageResponse.fromPartial(object.pagination)
                : undefined;
        message.accounts = object.accounts?.map((e) => e) || [];
        return message;
    },
};
function createBaseQueryBurntNFTRequest() {
    return { classId: "", nftId: "" };
}
exports.QueryBurntNFTRequest = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.classId !== "") {
            writer.uint32(10).string(message.classId);
        }
        if (message.nftId !== "") {
            writer.uint32(18).string(message.nftId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryBurntNFTRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.nftId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
            nftId: isSet(object.nftId) ? globalThis.String(object.nftId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        if (message.nftId !== "") {
            obj.nftId = message.nftId;
        }
        return obj;
    },
    create(base) {
        return exports.QueryBurntNFTRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryBurntNFTRequest();
        message.classId = object.classId ?? "";
        message.nftId = object.nftId ?? "";
        return message;
    },
};
function createBaseQueryBurntNFTResponse() {
    return { burnt: false };
}
exports.QueryBurntNFTResponse = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.burnt !== false) {
            writer.uint32(8).bool(message.burnt);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryBurntNFTResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.burnt = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            burnt: isSet(object.burnt) ? globalThis.Boolean(object.burnt) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.burnt !== false) {
            obj.burnt = message.burnt;
        }
        return obj;
    },
    create(base) {
        return exports.QueryBurntNFTResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryBurntNFTResponse();
        message.burnt = object.burnt ?? false;
        return message;
    },
};
function createBaseQueryBurntNFTsInClassRequest() {
    return { pagination: undefined, classId: "" };
}
exports.QueryBurntNFTsInClassRequest = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        if (message.classId !== "") {
            writer.uint32(18).string(message.classId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryBurntNFTsInClassRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination)
                ? pagination_1.PageRequest.fromJSON(object.pagination)
                : undefined,
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = pagination_1.PageRequest.toJSON(message.pagination);
        }
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        return obj;
    },
    create(base) {
        return exports.QueryBurntNFTsInClassRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryBurntNFTsInClassRequest();
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageRequest.fromPartial(object.pagination)
                : undefined;
        message.classId = object.classId ?? "";
        return message;
    },
};
function createBaseQueryBurntNFTsInClassResponse() {
    return { pagination: undefined, nftIds: [] };
}
exports.QueryBurntNFTsInClassResponse = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.nftIds) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryBurntNFTsInClassResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.nftIds.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination)
                ? pagination_1.PageResponse.fromJSON(object.pagination)
                : undefined,
            nftIds: globalThis.Array.isArray(object?.nftIds)
                ? object.nftIds.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = pagination_1.PageResponse.toJSON(message.pagination);
        }
        if (message.nftIds?.length) {
            obj.nftIds = message.nftIds;
        }
        return obj;
    },
    create(base) {
        return exports.QueryBurntNFTsInClassResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryBurntNFTsInClassResponse();
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageResponse.fromPartial(object.pagination)
                : undefined;
        message.nftIds = object.nftIds?.map((e) => e) || [];
        return message;
    },
};
exports.QueryServiceName = "coreum.asset.nft.v1.Query";
class QueryClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || exports.QueryServiceName;
        this.rpc = rpc;
        this.Params = this.Params.bind(this);
        this.Class = this.Class.bind(this);
        this.Classes = this.Classes.bind(this);
        this.Frozen = this.Frozen.bind(this);
        this.ClassFrozen = this.ClassFrozen.bind(this);
        this.ClassFrozenAccounts = this.ClassFrozenAccounts.bind(this);
        this.Whitelisted = this.Whitelisted.bind(this);
        this.WhitelistedAccountsForNFT = this.WhitelistedAccountsForNFT.bind(this);
        this.ClassWhitelistedAccounts = this.ClassWhitelistedAccounts.bind(this);
        this.BurntNFT = this.BurntNFT.bind(this);
        this.BurntNFTsInClass = this.BurntNFTsInClass.bind(this);
    }
    Params(request) {
        const data = exports.QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Params", data);
        return promise.then((data) => exports.QueryParamsResponse.decode(new binary_1.BinaryReader(data)));
    }
    Class(request) {
        const data = exports.QueryClassRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Class", data);
        return promise.then((data) => exports.QueryClassResponse.decode(new binary_1.BinaryReader(data)));
    }
    Classes(request) {
        const data = exports.QueryClassesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Classes", data);
        return promise.then((data) => exports.QueryClassesResponse.decode(new binary_1.BinaryReader(data)));
    }
    Frozen(request) {
        const data = exports.QueryFrozenRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Frozen", data);
        return promise.then((data) => exports.QueryFrozenResponse.decode(new binary_1.BinaryReader(data)));
    }
    ClassFrozen(request) {
        const data = exports.QueryClassFrozenRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ClassFrozen", data);
        return promise.then((data) => exports.QueryClassFrozenResponse.decode(new binary_1.BinaryReader(data)));
    }
    ClassFrozenAccounts(request) {
        const data = exports.QueryClassFrozenAccountsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ClassFrozenAccounts", data);
        return promise.then((data) => exports.QueryClassFrozenAccountsResponse.decode(new binary_1.BinaryReader(data)));
    }
    Whitelisted(request) {
        const data = exports.QueryWhitelistedRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Whitelisted", data);
        return promise.then((data) => exports.QueryWhitelistedResponse.decode(new binary_1.BinaryReader(data)));
    }
    WhitelistedAccountsForNFT(request) {
        const data = exports.QueryWhitelistedAccountsForNFTRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "WhitelistedAccountsForNFT", data);
        return promise.then((data) => exports.QueryWhitelistedAccountsForNFTResponse.decode(new binary_1.BinaryReader(data)));
    }
    ClassWhitelistedAccounts(request) {
        const data = exports.QueryClassWhitelistedAccountsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ClassWhitelistedAccounts", data);
        return promise.then((data) => exports.QueryClassWhitelistedAccountsResponse.decode(new binary_1.BinaryReader(data)));
    }
    BurntNFT(request) {
        const data = exports.QueryBurntNFTRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "BurntNFT", data);
        return promise.then((data) => exports.QueryBurntNFTResponse.decode(new binary_1.BinaryReader(data)));
    }
    BurntNFTsInClass(request) {
        const data = exports.QueryBurntNFTsInClassRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "BurntNFTsInClass", data);
        return promise.then((data) => exports.QueryBurntNFTsInClassResponse.decode(new binary_1.BinaryReader(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}
