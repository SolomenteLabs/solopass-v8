"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: coreum-protos/ft/query.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.QueryServiceName = exports.QueryDEXSettingsResponse = exports.QueryDEXSettingsRequest = exports.QueryWhitelistedBalanceResponse = exports.QueryWhitelistedBalanceRequest = exports.QueryWhitelistedBalancesResponse = exports.QueryWhitelistedBalancesRequest = exports.QueryFrozenBalanceResponse = exports.QueryFrozenBalanceRequest = exports.QueryFrozenBalancesResponse = exports.QueryFrozenBalancesRequest = exports.QueryBalanceResponse = exports.QueryBalanceRequest = exports.QueryTokensResponse = exports.QueryTokensRequest = exports.QueryTokenUpgradeStatusesResponse = exports.QueryTokenUpgradeStatusesRequest = exports.QueryTokenResponse = exports.QueryTokenRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const binary_1 = require("cosmjs-types/binary");
const pagination_1 = require("cosmjs-types/cosmos/base/query/v1beta1/pagination");
const coin_1 = require("cosmjs-types/cosmos/base/v1beta1/coin");
const params_1 = require("./params");
const token_1 = require("./token");
exports.protobufPackage = "coreum.asset.ft.v1";
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    encode(_, writer = new binary_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryParamsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
};
function createBaseQueryParamsResponse() {
    return { params: undefined };
}
exports.QueryParamsResponse = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params) ? params_1.Params.fromJSON(object.params) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.params !== undefined) {
            obj.params = params_1.Params.toJSON(message.params);
        }
        return obj;
    },
    create(base) {
        return exports.QueryParamsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params =
            object.params !== undefined && object.params !== null
                ? params_1.Params.fromPartial(object.params)
                : undefined;
        return message;
    },
};
function createBaseQueryTokenRequest() {
    return { denom: "" };
}
exports.QueryTokenRequest = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTokenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        return obj;
    },
    create(base) {
        return exports.QueryTokenRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryTokenRequest();
        message.denom = object.denom ?? "";
        return message;
    },
};
function createBaseQueryTokenResponse() {
    return { token: undefined };
}
exports.QueryTokenResponse = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.token !== undefined) {
            token_1.Token.encode(message.token, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTokenResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.token = token_1.Token.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            token: isSet(object.token) ? token_1.Token.fromJSON(object.token) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.token !== undefined) {
            obj.token = token_1.Token.toJSON(message.token);
        }
        return obj;
    },
    create(base) {
        return exports.QueryTokenResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryTokenResponse();
        message.token =
            object.token !== undefined && object.token !== null
                ? token_1.Token.fromPartial(object.token)
                : undefined;
        return message;
    },
};
function createBaseQueryTokenUpgradeStatusesRequest() {
    return { denom: "" };
}
exports.QueryTokenUpgradeStatusesRequest = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTokenUpgradeStatusesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        return obj;
    },
    create(base) {
        return exports.QueryTokenUpgradeStatusesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryTokenUpgradeStatusesRequest();
        message.denom = object.denom ?? "";
        return message;
    },
};
function createBaseQueryTokenUpgradeStatusesResponse() {
    return { statuses: undefined };
}
exports.QueryTokenUpgradeStatusesResponse = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.statuses !== undefined) {
            token_1.TokenUpgradeStatuses.encode(message.statuses, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTokenUpgradeStatusesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.statuses = token_1.TokenUpgradeStatuses.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            statuses: isSet(object.statuses)
                ? token_1.TokenUpgradeStatuses.fromJSON(object.statuses)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.statuses !== undefined) {
            obj.statuses = token_1.TokenUpgradeStatuses.toJSON(message.statuses);
        }
        return obj;
    },
    create(base) {
        return exports.QueryTokenUpgradeStatusesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryTokenUpgradeStatusesResponse();
        message.statuses =
            object.statuses !== undefined && object.statuses !== null
                ? token_1.TokenUpgradeStatuses.fromPartial(object.statuses)
                : undefined;
        return message;
    },
};
function createBaseQueryTokensRequest() {
    return { pagination: undefined, issuer: "" };
}
exports.QueryTokensRequest = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        if (message.issuer !== "") {
            writer.uint32(18).string(message.issuer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTokensRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination)
                ? pagination_1.PageRequest.fromJSON(object.pagination)
                : undefined,
            issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = pagination_1.PageRequest.toJSON(message.pagination);
        }
        if (message.issuer !== "") {
            obj.issuer = message.issuer;
        }
        return obj;
    },
    create(base) {
        return exports.QueryTokensRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryTokensRequest();
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageRequest.fromPartial(object.pagination)
                : undefined;
        message.issuer = object.issuer ?? "";
        return message;
    },
};
function createBaseQueryTokensResponse() {
    return { pagination: undefined, tokens: [] };
}
exports.QueryTokensResponse = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.tokens) {
            token_1.Token.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTokensResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.tokens.push(token_1.Token.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination)
                ? pagination_1.PageResponse.fromJSON(object.pagination)
                : undefined,
            tokens: globalThis.Array.isArray(object?.tokens)
                ? object.tokens.map((e) => token_1.Token.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = pagination_1.PageResponse.toJSON(message.pagination);
        }
        if (message.tokens?.length) {
            obj.tokens = message.tokens.map((e) => token_1.Token.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.QueryTokensResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryTokensResponse();
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageResponse.fromPartial(object.pagination)
                : undefined;
        message.tokens = object.tokens?.map((e) => token_1.Token.fromPartial(e)) || [];
        return message;
    },
};
function createBaseQueryBalanceRequest() {
    return { account: "", denom: "" };
}
exports.QueryBalanceRequest = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.account !== "") {
            writer.uint32(10).string(message.account);
        }
        if (message.denom !== "") {
            writer.uint32(18).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryBalanceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            account: isSet(object.account) ? globalThis.String(object.account) : "",
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.account !== "") {
            obj.account = message.account;
        }
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        return obj;
    },
    create(base) {
        return exports.QueryBalanceRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryBalanceRequest();
        message.account = object.account ?? "";
        message.denom = object.denom ?? "";
        return message;
    },
};
function createBaseQueryBalanceResponse() {
    return {
        balance: "",
        whitelisted: "",
        frozen: "",
        locked: "",
        lockedInVesting: "",
        lockedInDex: "",
        expectedToReceiveInDex: "",
    };
}
exports.QueryBalanceResponse = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.balance !== "") {
            writer.uint32(10).string(message.balance);
        }
        if (message.whitelisted !== "") {
            writer.uint32(18).string(message.whitelisted);
        }
        if (message.frozen !== "") {
            writer.uint32(26).string(message.frozen);
        }
        if (message.locked !== "") {
            writer.uint32(34).string(message.locked);
        }
        if (message.lockedInVesting !== "") {
            writer.uint32(42).string(message.lockedInVesting);
        }
        if (message.lockedInDex !== "") {
            writer.uint32(50).string(message.lockedInDex);
        }
        if (message.expectedToReceiveInDex !== "") {
            writer.uint32(58).string(message.expectedToReceiveInDex);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryBalanceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.balance = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.whitelisted = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.frozen = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.locked = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.lockedInVesting = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.lockedInDex = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.expectedToReceiveInDex = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            balance: isSet(object.balance) ? globalThis.String(object.balance) : "",
            whitelisted: isSet(object.whitelisted)
                ? globalThis.String(object.whitelisted)
                : "",
            frozen: isSet(object.frozen) ? globalThis.String(object.frozen) : "",
            locked: isSet(object.locked) ? globalThis.String(object.locked) : "",
            lockedInVesting: isSet(object.lockedInVesting)
                ? globalThis.String(object.lockedInVesting)
                : "",
            lockedInDex: isSet(object.lockedInDex)
                ? globalThis.String(object.lockedInDex)
                : "",
            expectedToReceiveInDex: isSet(object.expectedToReceiveInDex)
                ? globalThis.String(object.expectedToReceiveInDex)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.balance !== "") {
            obj.balance = message.balance;
        }
        if (message.whitelisted !== "") {
            obj.whitelisted = message.whitelisted;
        }
        if (message.frozen !== "") {
            obj.frozen = message.frozen;
        }
        if (message.locked !== "") {
            obj.locked = message.locked;
        }
        if (message.lockedInVesting !== "") {
            obj.lockedInVesting = message.lockedInVesting;
        }
        if (message.lockedInDex !== "") {
            obj.lockedInDex = message.lockedInDex;
        }
        if (message.expectedToReceiveInDex !== "") {
            obj.expectedToReceiveInDex = message.expectedToReceiveInDex;
        }
        return obj;
    },
    create(base) {
        return exports.QueryBalanceResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryBalanceResponse();
        message.balance = object.balance ?? "";
        message.whitelisted = object.whitelisted ?? "";
        message.frozen = object.frozen ?? "";
        message.locked = object.locked ?? "";
        message.lockedInVesting = object.lockedInVesting ?? "";
        message.lockedInDex = object.lockedInDex ?? "";
        message.expectedToReceiveInDex = object.expectedToReceiveInDex ?? "";
        return message;
    },
};
function createBaseQueryFrozenBalancesRequest() {
    return { pagination: undefined, account: "" };
}
exports.QueryFrozenBalancesRequest = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        if (message.account !== "") {
            writer.uint32(18).string(message.account);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryFrozenBalancesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination)
                ? pagination_1.PageRequest.fromJSON(object.pagination)
                : undefined,
            account: isSet(object.account) ? globalThis.String(object.account) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = pagination_1.PageRequest.toJSON(message.pagination);
        }
        if (message.account !== "") {
            obj.account = message.account;
        }
        return obj;
    },
    create(base) {
        return exports.QueryFrozenBalancesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryFrozenBalancesRequest();
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageRequest.fromPartial(object.pagination)
                : undefined;
        message.account = object.account ?? "";
        return message;
    },
};
function createBaseQueryFrozenBalancesResponse() {
    return { pagination: undefined, balances: [] };
}
exports.QueryFrozenBalancesResponse = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.balances) {
            coin_1.Coin.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryFrozenBalancesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.balances.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination)
                ? pagination_1.PageResponse.fromJSON(object.pagination)
                : undefined,
            balances: globalThis.Array.isArray(object?.balances)
                ? object.balances.map((e) => coin_1.Coin.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = pagination_1.PageResponse.toJSON(message.pagination);
        }
        if (message.balances?.length) {
            obj.balances = message.balances.map((e) => coin_1.Coin.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.QueryFrozenBalancesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryFrozenBalancesResponse();
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageResponse.fromPartial(object.pagination)
                : undefined;
        message.balances = object.balances?.map((e) => coin_1.Coin.fromPartial(e)) || [];
        return message;
    },
};
function createBaseQueryFrozenBalanceRequest() {
    return { account: "", denom: "" };
}
exports.QueryFrozenBalanceRequest = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.account !== "") {
            writer.uint32(10).string(message.account);
        }
        if (message.denom !== "") {
            writer.uint32(18).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryFrozenBalanceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            account: isSet(object.account) ? globalThis.String(object.account) : "",
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.account !== "") {
            obj.account = message.account;
        }
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        return obj;
    },
    create(base) {
        return exports.QueryFrozenBalanceRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryFrozenBalanceRequest();
        message.account = object.account ?? "";
        message.denom = object.denom ?? "";
        return message;
    },
};
function createBaseQueryFrozenBalanceResponse() {
    return { balance: undefined };
}
exports.QueryFrozenBalanceResponse = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.balance !== undefined) {
            coin_1.Coin.encode(message.balance, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryFrozenBalanceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.balance = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            balance: isSet(object.balance)
                ? coin_1.Coin.fromJSON(object.balance)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.balance !== undefined) {
            obj.balance = coin_1.Coin.toJSON(message.balance);
        }
        return obj;
    },
    create(base) {
        return exports.QueryFrozenBalanceResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryFrozenBalanceResponse();
        message.balance =
            object.balance !== undefined && object.balance !== null
                ? coin_1.Coin.fromPartial(object.balance)
                : undefined;
        return message;
    },
};
function createBaseQueryWhitelistedBalancesRequest() {
    return { pagination: undefined, account: "" };
}
exports.QueryWhitelistedBalancesRequest = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        if (message.account !== "") {
            writer.uint32(18).string(message.account);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryWhitelistedBalancesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination)
                ? pagination_1.PageRequest.fromJSON(object.pagination)
                : undefined,
            account: isSet(object.account) ? globalThis.String(object.account) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = pagination_1.PageRequest.toJSON(message.pagination);
        }
        if (message.account !== "") {
            obj.account = message.account;
        }
        return obj;
    },
    create(base) {
        return exports.QueryWhitelistedBalancesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryWhitelistedBalancesRequest();
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageRequest.fromPartial(object.pagination)
                : undefined;
        message.account = object.account ?? "";
        return message;
    },
};
function createBaseQueryWhitelistedBalancesResponse() {
    return { pagination: undefined, balances: [] };
}
exports.QueryWhitelistedBalancesResponse = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.balances) {
            coin_1.Coin.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryWhitelistedBalancesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.balances.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination)
                ? pagination_1.PageResponse.fromJSON(object.pagination)
                : undefined,
            balances: globalThis.Array.isArray(object?.balances)
                ? object.balances.map((e) => coin_1.Coin.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = pagination_1.PageResponse.toJSON(message.pagination);
        }
        if (message.balances?.length) {
            obj.balances = message.balances.map((e) => coin_1.Coin.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.QueryWhitelistedBalancesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryWhitelistedBalancesResponse();
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageResponse.fromPartial(object.pagination)
                : undefined;
        message.balances = object.balances?.map((e) => coin_1.Coin.fromPartial(e)) || [];
        return message;
    },
};
function createBaseQueryWhitelistedBalanceRequest() {
    return { account: "", denom: "" };
}
exports.QueryWhitelistedBalanceRequest = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.account !== "") {
            writer.uint32(10).string(message.account);
        }
        if (message.denom !== "") {
            writer.uint32(18).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryWhitelistedBalanceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            account: isSet(object.account) ? globalThis.String(object.account) : "",
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.account !== "") {
            obj.account = message.account;
        }
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        return obj;
    },
    create(base) {
        return exports.QueryWhitelistedBalanceRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryWhitelistedBalanceRequest();
        message.account = object.account ?? "";
        message.denom = object.denom ?? "";
        return message;
    },
};
function createBaseQueryWhitelistedBalanceResponse() {
    return { balance: undefined };
}
exports.QueryWhitelistedBalanceResponse = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.balance !== undefined) {
            coin_1.Coin.encode(message.balance, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryWhitelistedBalanceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.balance = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            balance: isSet(object.balance)
                ? coin_1.Coin.fromJSON(object.balance)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.balance !== undefined) {
            obj.balance = coin_1.Coin.toJSON(message.balance);
        }
        return obj;
    },
    create(base) {
        return exports.QueryWhitelistedBalanceResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryWhitelistedBalanceResponse();
        message.balance =
            object.balance !== undefined && object.balance !== null
                ? coin_1.Coin.fromPartial(object.balance)
                : undefined;
        return message;
    },
};
function createBaseQueryDEXSettingsRequest() {
    return { denom: "" };
}
exports.QueryDEXSettingsRequest = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryDEXSettingsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        return obj;
    },
    create(base) {
        return exports.QueryDEXSettingsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryDEXSettingsRequest();
        message.denom = object.denom ?? "";
        return message;
    },
};
function createBaseQueryDEXSettingsResponse() {
    return { dexSettings: undefined };
}
exports.QueryDEXSettingsResponse = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.dexSettings !== undefined) {
            token_1.DEXSettings.encode(message.dexSettings, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryDEXSettingsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.dexSettings = token_1.DEXSettings.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            dexSettings: isSet(object.dexSettings)
                ? token_1.DEXSettings.fromJSON(object.dexSettings)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.dexSettings !== undefined) {
            obj.dexSettings = token_1.DEXSettings.toJSON(message.dexSettings);
        }
        return obj;
    },
    create(base) {
        return exports.QueryDEXSettingsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryDEXSettingsResponse();
        message.dexSettings =
            object.dexSettings !== undefined && object.dexSettings !== null
                ? token_1.DEXSettings.fromPartial(object.dexSettings)
                : undefined;
        return message;
    },
};
exports.QueryServiceName = "coreum.asset.ft.v1.Query";
class QueryClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || exports.QueryServiceName;
        this.rpc = rpc;
        this.Params = this.Params.bind(this);
        this.Tokens = this.Tokens.bind(this);
        this.Token = this.Token.bind(this);
        this.TokenUpgradeStatuses = this.TokenUpgradeStatuses.bind(this);
        this.Balance = this.Balance.bind(this);
        this.FrozenBalances = this.FrozenBalances.bind(this);
        this.FrozenBalance = this.FrozenBalance.bind(this);
        this.WhitelistedBalances = this.WhitelistedBalances.bind(this);
        this.WhitelistedBalance = this.WhitelistedBalance.bind(this);
        this.DEXSettings = this.DEXSettings.bind(this);
    }
    Params(request) {
        const data = exports.QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Params", data);
        return promise.then((data) => exports.QueryParamsResponse.decode(new binary_1.BinaryReader(data)));
    }
    Tokens(request) {
        const data = exports.QueryTokensRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Tokens", data);
        return promise.then((data) => exports.QueryTokensResponse.decode(new binary_1.BinaryReader(data)));
    }
    Token(request) {
        const data = exports.QueryTokenRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Token", data);
        return promise.then((data) => exports.QueryTokenResponse.decode(new binary_1.BinaryReader(data)));
    }
    TokenUpgradeStatuses(request) {
        const data = exports.QueryTokenUpgradeStatusesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "TokenUpgradeStatuses", data);
        return promise.then((data) => exports.QueryTokenUpgradeStatusesResponse.decode(new binary_1.BinaryReader(data)));
    }
    Balance(request) {
        const data = exports.QueryBalanceRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Balance", data);
        return promise.then((data) => exports.QueryBalanceResponse.decode(new binary_1.BinaryReader(data)));
    }
    FrozenBalances(request) {
        const data = exports.QueryFrozenBalancesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "FrozenBalances", data);
        return promise.then((data) => exports.QueryFrozenBalancesResponse.decode(new binary_1.BinaryReader(data)));
    }
    FrozenBalance(request) {
        const data = exports.QueryFrozenBalanceRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "FrozenBalance", data);
        return promise.then((data) => exports.QueryFrozenBalanceResponse.decode(new binary_1.BinaryReader(data)));
    }
    WhitelistedBalances(request) {
        const data = exports.QueryWhitelistedBalancesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "WhitelistedBalances", data);
        return promise.then((data) => exports.QueryWhitelistedBalancesResponse.decode(new binary_1.BinaryReader(data)));
    }
    WhitelistedBalance(request) {
        const data = exports.QueryWhitelistedBalanceRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "WhitelistedBalance", data);
        return promise.then((data) => exports.QueryWhitelistedBalanceResponse.decode(new binary_1.BinaryReader(data)));
    }
    DEXSettings(request) {
        const data = exports.QueryDEXSettingsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "DEXSettings", data);
        return promise.then((data) => exports.QueryDEXSettingsResponse.decode(new binary_1.BinaryReader(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}
