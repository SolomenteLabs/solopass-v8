"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: coreum-protos/customparams/query.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.QueryServiceName = exports.QueryStakingParamsResponse = exports.QueryStakingParamsRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const binary_1 = require("cosmjs-types/binary");
const params_1 = require("./params");
exports.protobufPackage = "coreum.customparams.v1";
function createBaseQueryStakingParamsRequest() {
    return {};
}
exports.QueryStakingParamsRequest = {
    encode(_, writer = new binary_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStakingParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryStakingParamsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseQueryStakingParamsRequest();
        return message;
    },
};
function createBaseQueryStakingParamsResponse() {
    return { params: undefined };
}
exports.QueryStakingParamsResponse = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.params !== undefined) {
            params_1.StakingParams.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStakingParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.params = params_1.StakingParams.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params)
                ? params_1.StakingParams.fromJSON(object.params)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.params !== undefined) {
            obj.params = params_1.StakingParams.toJSON(message.params);
        }
        return obj;
    },
    create(base) {
        return exports.QueryStakingParamsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryStakingParamsResponse();
        message.params =
            object.params !== undefined && object.params !== null
                ? params_1.StakingParams.fromPartial(object.params)
                : undefined;
        return message;
    },
};
exports.QueryServiceName = "coreum.customparams.v1.Query";
class QueryClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || exports.QueryServiceName;
        this.rpc = rpc;
        this.StakingParams = this.StakingParams.bind(this);
    }
    StakingParams(request) {
        const data = exports.QueryStakingParamsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "StakingParams", data);
        return promise.then((data) => exports.QueryStakingParamsResponse.decode(new binary_1.BinaryReader(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}
