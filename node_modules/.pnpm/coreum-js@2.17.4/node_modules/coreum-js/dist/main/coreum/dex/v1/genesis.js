"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.21.12
// source: coreum-protos/dex/genesis.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountDenomOrdersCount = exports.OrderBookDataWithID = exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
const binary_1 = require("cosmjs-types/binary");
const order_1 = require("./order");
const params_1 = require("./params");
exports.protobufPackage = "coreum.dex.v1";
function createBaseGenesisState() {
    return {
        params: undefined,
        orderBooks: [],
        orders: [],
        orderSequence: 0,
        accountsDenomsOrdersCounts: [],
    };
}
exports.GenesisState = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.orderBooks) {
            exports.OrderBookDataWithID.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.orders) {
            order_1.Order.encode(v, writer.uint32(26).fork()).ldelim();
        }
        if (message.orderSequence !== 0) {
            writer.uint32(32).uint64(message.orderSequence);
        }
        for (const v of message.accountsDenomsOrdersCounts) {
            exports.AccountDenomOrdersCount.encode(v, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.orderBooks.push(exports.OrderBookDataWithID.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.orders.push(order_1.Order.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.orderSequence = longToNumber(reader.uint64());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.accountsDenomsOrdersCounts.push(exports.AccountDenomOrdersCount.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params) ? params_1.Params.fromJSON(object.params) : undefined,
            orderBooks: globalThis.Array.isArray(object?.orderBooks)
                ? object.orderBooks.map((e) => exports.OrderBookDataWithID.fromJSON(e))
                : [],
            orders: globalThis.Array.isArray(object?.orders)
                ? object.orders.map((e) => order_1.Order.fromJSON(e))
                : [],
            orderSequence: isSet(object.orderSequence)
                ? globalThis.Number(object.orderSequence)
                : 0,
            accountsDenomsOrdersCounts: globalThis.Array.isArray(object?.accountsDenomsOrdersCounts)
                ? object.accountsDenomsOrdersCounts.map((e) => exports.AccountDenomOrdersCount.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.params !== undefined) {
            obj.params = params_1.Params.toJSON(message.params);
        }
        if (message.orderBooks?.length) {
            obj.orderBooks = message.orderBooks.map((e) => exports.OrderBookDataWithID.toJSON(e));
        }
        if (message.orders?.length) {
            obj.orders = message.orders.map((e) => order_1.Order.toJSON(e));
        }
        if (message.orderSequence !== 0) {
            obj.orderSequence = Math.round(message.orderSequence);
        }
        if (message.accountsDenomsOrdersCounts?.length) {
            obj.accountsDenomsOrdersCounts = message.accountsDenomsOrdersCounts.map((e) => exports.AccountDenomOrdersCount.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GenesisState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenesisState();
        message.params =
            object.params !== undefined && object.params !== null
                ? params_1.Params.fromPartial(object.params)
                : undefined;
        message.orderBooks =
            object.orderBooks?.map((e) => exports.OrderBookDataWithID.fromPartial(e)) || [];
        message.orders = object.orders?.map((e) => order_1.Order.fromPartial(e)) || [];
        message.orderSequence = object.orderSequence ?? 0;
        message.accountsDenomsOrdersCounts =
            object.accountsDenomsOrdersCounts?.map((e) => exports.AccountDenomOrdersCount.fromPartial(e)) || [];
        return message;
    },
};
function createBaseOrderBookDataWithID() {
    return { id: 0, data: undefined };
}
exports.OrderBookDataWithID = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).uint32(message.id);
        }
        if (message.data !== undefined) {
            order_1.OrderBookData.encode(message.data, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOrderBookDataWithID();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.data = order_1.OrderBookData.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            data: isSet(object.data)
                ? order_1.OrderBookData.fromJSON(object.data)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.data !== undefined) {
            obj.data = order_1.OrderBookData.toJSON(message.data);
        }
        return obj;
    },
    create(base) {
        return exports.OrderBookDataWithID.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOrderBookDataWithID();
        message.id = object.id ?? 0;
        message.data =
            object.data !== undefined && object.data !== null
                ? order_1.OrderBookData.fromPartial(object.data)
                : undefined;
        return message;
    },
};
function createBaseAccountDenomOrdersCount() {
    return { accountNumber: 0, denom: "", ordersCount: 0 };
}
exports.AccountDenomOrdersCount = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.accountNumber !== 0) {
            writer.uint32(8).uint64(message.accountNumber);
        }
        if (message.denom !== "") {
            writer.uint32(18).string(message.denom);
        }
        if (message.ordersCount !== 0) {
            writer.uint32(24).uint64(message.ordersCount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAccountDenomOrdersCount();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.accountNumber = longToNumber(reader.uint64());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.ordersCount = longToNumber(reader.uint64());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountNumber: isSet(object.accountNumber)
                ? globalThis.Number(object.accountNumber)
                : 0,
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            ordersCount: isSet(object.ordersCount)
                ? globalThis.Number(object.ordersCount)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountNumber !== 0) {
            obj.accountNumber = Math.round(message.accountNumber);
        }
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.ordersCount !== 0) {
            obj.ordersCount = Math.round(message.ordersCount);
        }
        return obj;
    },
    create(base) {
        return exports.AccountDenomOrdersCount.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAccountDenomOrdersCount();
        message.accountNumber = object.accountNumber ?? 0;
        message.denom = object.denom ?? "";
        message.ordersCount = object.ordersCount ?? 0;
        return message;
    },
};
function longToNumber(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
