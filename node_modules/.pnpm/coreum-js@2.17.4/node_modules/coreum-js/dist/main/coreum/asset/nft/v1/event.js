"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: coreum-protos/nft/event.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventRemovedFromClassWhitelist = exports.EventAddedToClassWhitelist = exports.EventRemovedFromWhitelist = exports.EventAddedToWhitelist = exports.EventClassUnfrozen = exports.EventClassFrozen = exports.EventUnfrozen = exports.EventFrozen = exports.EventClassIssued = exports.protobufPackage = void 0;
/* eslint-disable */
const binary_1 = require("cosmjs-types/binary");
const nft_1 = require("./nft");
exports.protobufPackage = "coreum.asset.nft.v1";
function createBaseEventClassIssued() {
    return {
        id: "",
        issuer: "",
        symbol: "",
        name: "",
        description: "",
        uri: "",
        uriHash: "",
        features: [],
        royaltyRate: "",
    };
}
exports.EventClassIssued = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.issuer !== "") {
            writer.uint32(18).string(message.issuer);
        }
        if (message.symbol !== "") {
            writer.uint32(26).string(message.symbol);
        }
        if (message.name !== "") {
            writer.uint32(34).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(42).string(message.description);
        }
        if (message.uri !== "") {
            writer.uint32(50).string(message.uri);
        }
        if (message.uriHash !== "") {
            writer.uint32(58).string(message.uriHash);
        }
        writer.uint32(66).fork();
        for (const v of message.features) {
            writer.int32(v);
        }
        writer.ldelim();
        if (message.royaltyRate !== "") {
            writer.uint32(74).string(message.royaltyRate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventClassIssued();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.symbol = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.uri = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.uriHash = reader.string();
                    continue;
                }
                case 8: {
                    if (tag === 64) {
                        message.features.push(reader.int32());
                        continue;
                    }
                    if (tag === 66) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.features.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.royaltyRate = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
            symbol: isSet(object.symbol) ? globalThis.String(object.symbol) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            description: isSet(object.description)
                ? globalThis.String(object.description)
                : "",
            uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
            uriHash: isSet(object.uriHash) ? globalThis.String(object.uriHash) : "",
            features: globalThis.Array.isArray(object?.features)
                ? object.features.map((e) => (0, nft_1.classFeatureFromJSON)(e))
                : [],
            royaltyRate: isSet(object.royaltyRate)
                ? globalThis.String(object.royaltyRate)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.issuer !== "") {
            obj.issuer = message.issuer;
        }
        if (message.symbol !== "") {
            obj.symbol = message.symbol;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.uri !== "") {
            obj.uri = message.uri;
        }
        if (message.uriHash !== "") {
            obj.uriHash = message.uriHash;
        }
        if (message.features?.length) {
            obj.features = message.features.map((e) => (0, nft_1.classFeatureToJSON)(e));
        }
        if (message.royaltyRate !== "") {
            obj.royaltyRate = message.royaltyRate;
        }
        return obj;
    },
    create(base) {
        return exports.EventClassIssued.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEventClassIssued();
        message.id = object.id ?? "";
        message.issuer = object.issuer ?? "";
        message.symbol = object.symbol ?? "";
        message.name = object.name ?? "";
        message.description = object.description ?? "";
        message.uri = object.uri ?? "";
        message.uriHash = object.uriHash ?? "";
        message.features = object.features?.map((e) => e) || [];
        message.royaltyRate = object.royaltyRate ?? "";
        return message;
    },
};
function createBaseEventFrozen() {
    return { classId: "", id: "", owner: "" };
}
exports.EventFrozen = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.classId !== "") {
            writer.uint32(10).string(message.classId);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        if (message.owner !== "") {
            writer.uint32(26).string(message.owner);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventFrozen();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.owner = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.owner !== "") {
            obj.owner = message.owner;
        }
        return obj;
    },
    create(base) {
        return exports.EventFrozen.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEventFrozen();
        message.classId = object.classId ?? "";
        message.id = object.id ?? "";
        message.owner = object.owner ?? "";
        return message;
    },
};
function createBaseEventUnfrozen() {
    return { classId: "", id: "", owner: "" };
}
exports.EventUnfrozen = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.classId !== "") {
            writer.uint32(10).string(message.classId);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        if (message.owner !== "") {
            writer.uint32(26).string(message.owner);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventUnfrozen();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.owner = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.owner !== "") {
            obj.owner = message.owner;
        }
        return obj;
    },
    create(base) {
        return exports.EventUnfrozen.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEventUnfrozen();
        message.classId = object.classId ?? "";
        message.id = object.id ?? "";
        message.owner = object.owner ?? "";
        return message;
    },
};
function createBaseEventClassFrozen() {
    return { classId: "", account: "" };
}
exports.EventClassFrozen = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.classId !== "") {
            writer.uint32(10).string(message.classId);
        }
        if (message.account !== "") {
            writer.uint32(26).string(message.account);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventClassFrozen();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
            account: isSet(object.account) ? globalThis.String(object.account) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        if (message.account !== "") {
            obj.account = message.account;
        }
        return obj;
    },
    create(base) {
        return exports.EventClassFrozen.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEventClassFrozen();
        message.classId = object.classId ?? "";
        message.account = object.account ?? "";
        return message;
    },
};
function createBaseEventClassUnfrozen() {
    return { classId: "", account: "" };
}
exports.EventClassUnfrozen = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.classId !== "") {
            writer.uint32(10).string(message.classId);
        }
        if (message.account !== "") {
            writer.uint32(26).string(message.account);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventClassUnfrozen();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
            account: isSet(object.account) ? globalThis.String(object.account) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        if (message.account !== "") {
            obj.account = message.account;
        }
        return obj;
    },
    create(base) {
        return exports.EventClassUnfrozen.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEventClassUnfrozen();
        message.classId = object.classId ?? "";
        message.account = object.account ?? "";
        return message;
    },
};
function createBaseEventAddedToWhitelist() {
    return { classId: "", id: "", account: "" };
}
exports.EventAddedToWhitelist = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.classId !== "") {
            writer.uint32(10).string(message.classId);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        if (message.account !== "") {
            writer.uint32(26).string(message.account);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventAddedToWhitelist();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            account: isSet(object.account) ? globalThis.String(object.account) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.account !== "") {
            obj.account = message.account;
        }
        return obj;
    },
    create(base) {
        return exports.EventAddedToWhitelist.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEventAddedToWhitelist();
        message.classId = object.classId ?? "";
        message.id = object.id ?? "";
        message.account = object.account ?? "";
        return message;
    },
};
function createBaseEventRemovedFromWhitelist() {
    return { classId: "", id: "", account: "" };
}
exports.EventRemovedFromWhitelist = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.classId !== "") {
            writer.uint32(10).string(message.classId);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        if (message.account !== "") {
            writer.uint32(26).string(message.account);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventRemovedFromWhitelist();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            account: isSet(object.account) ? globalThis.String(object.account) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.account !== "") {
            obj.account = message.account;
        }
        return obj;
    },
    create(base) {
        return exports.EventRemovedFromWhitelist.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEventRemovedFromWhitelist();
        message.classId = object.classId ?? "";
        message.id = object.id ?? "";
        message.account = object.account ?? "";
        return message;
    },
};
function createBaseEventAddedToClassWhitelist() {
    return { classId: "", account: "" };
}
exports.EventAddedToClassWhitelist = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.classId !== "") {
            writer.uint32(10).string(message.classId);
        }
        if (message.account !== "") {
            writer.uint32(18).string(message.account);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventAddedToClassWhitelist();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
            account: isSet(object.account) ? globalThis.String(object.account) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        if (message.account !== "") {
            obj.account = message.account;
        }
        return obj;
    },
    create(base) {
        return exports.EventAddedToClassWhitelist.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEventAddedToClassWhitelist();
        message.classId = object.classId ?? "";
        message.account = object.account ?? "";
        return message;
    },
};
function createBaseEventRemovedFromClassWhitelist() {
    return { classId: "", account: "" };
}
exports.EventRemovedFromClassWhitelist = {
    encode(message, writer = new binary_1.BinaryWriter()) {
        if (message.classId !== "") {
            writer.uint32(10).string(message.classId);
        }
        if (message.account !== "") {
            writer.uint32(18).string(message.account);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventRemovedFromClassWhitelist();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
            account: isSet(object.account) ? globalThis.String(object.account) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        if (message.account !== "") {
            obj.account = message.account;
        }
        return obj;
    },
    create(base) {
        return exports.EventRemovedFromClassWhitelist.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEventRemovedFromClassWhitelist();
        message.classId = object.classId ?? "";
        message.account = object.account ?? "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
