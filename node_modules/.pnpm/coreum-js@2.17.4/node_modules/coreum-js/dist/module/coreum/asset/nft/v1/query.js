// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: coreum-protos/nft/query.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "cosmjs-types/binary";
import { PageRequest, PageResponse, } from "cosmjs-types/cosmos/base/query/v1beta1/pagination";
import { Class } from "./nft";
import { Params } from "./params";
export const protobufPackage = "coreum.asset.nft.v1";
function createBaseQueryParamsRequest() {
    return {};
}
export const QueryParamsRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return QueryParamsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
};
function createBaseQueryParamsResponse() {
    return { params: undefined };
}
export const QueryParamsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.params !== undefined) {
            Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.params = Params.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.params !== undefined) {
            obj.params = Params.toJSON(message.params);
        }
        return obj;
    },
    create(base) {
        return QueryParamsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params =
            object.params !== undefined && object.params !== null
                ? Params.fromPartial(object.params)
                : undefined;
        return message;
    },
};
function createBaseQueryClassRequest() {
    return { id: "" };
}
export const QueryClassRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryClassRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return QueryClassRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryClassRequest();
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseQueryClassResponse() {
    return { class: undefined };
}
export const QueryClassResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.class !== undefined) {
            Class.encode(message.class, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryClassResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.class = Class.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            class: isSet(object.class) ? Class.fromJSON(object.class) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.class !== undefined) {
            obj.class = Class.toJSON(message.class);
        }
        return obj;
    },
    create(base) {
        return QueryClassResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryClassResponse();
        message.class =
            object.class !== undefined && object.class !== null
                ? Class.fromPartial(object.class)
                : undefined;
        return message;
    },
};
function createBaseQueryClassesRequest() {
    return { pagination: undefined, issuer: "" };
}
export const QueryClassesRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.pagination !== undefined) {
            PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        if (message.issuer !== "") {
            writer.uint32(18).string(message.issuer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryClassesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = PageRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination)
                ? PageRequest.fromJSON(object.pagination)
                : undefined,
            issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = PageRequest.toJSON(message.pagination);
        }
        if (message.issuer !== "") {
            obj.issuer = message.issuer;
        }
        return obj;
    },
    create(base) {
        return QueryClassesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryClassesRequest();
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? PageRequest.fromPartial(object.pagination)
                : undefined;
        message.issuer = object.issuer ?? "";
        return message;
    },
};
function createBaseQueryClassesResponse() {
    return { pagination: undefined, classes: [] };
}
export const QueryClassesResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.pagination !== undefined) {
            PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.classes) {
            Class.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryClassesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = PageResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.classes.push(Class.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination)
                ? PageResponse.fromJSON(object.pagination)
                : undefined,
            classes: globalThis.Array.isArray(object?.classes)
                ? object.classes.map((e) => Class.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = PageResponse.toJSON(message.pagination);
        }
        if (message.classes?.length) {
            obj.classes = message.classes.map((e) => Class.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return QueryClassesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryClassesResponse();
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? PageResponse.fromPartial(object.pagination)
                : undefined;
        message.classes = object.classes?.map((e) => Class.fromPartial(e)) || [];
        return message;
    },
};
function createBaseQueryFrozenRequest() {
    return { id: "", classId: "" };
}
export const QueryFrozenRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.classId !== "") {
            writer.uint32(18).string(message.classId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryFrozenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        return obj;
    },
    create(base) {
        return QueryFrozenRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryFrozenRequest();
        message.id = object.id ?? "";
        message.classId = object.classId ?? "";
        return message;
    },
};
function createBaseQueryFrozenResponse() {
    return { frozen: false };
}
export const QueryFrozenResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.frozen !== false) {
            writer.uint32(8).bool(message.frozen);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryFrozenResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.frozen = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            frozen: isSet(object.frozen) ? globalThis.Boolean(object.frozen) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.frozen !== false) {
            obj.frozen = message.frozen;
        }
        return obj;
    },
    create(base) {
        return QueryFrozenResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryFrozenResponse();
        message.frozen = object.frozen ?? false;
        return message;
    },
};
function createBaseQueryClassFrozenRequest() {
    return { classId: "", account: "" };
}
export const QueryClassFrozenRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.classId !== "") {
            writer.uint32(10).string(message.classId);
        }
        if (message.account !== "") {
            writer.uint32(18).string(message.account);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryClassFrozenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
            account: isSet(object.account) ? globalThis.String(object.account) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        if (message.account !== "") {
            obj.account = message.account;
        }
        return obj;
    },
    create(base) {
        return QueryClassFrozenRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryClassFrozenRequest();
        message.classId = object.classId ?? "";
        message.account = object.account ?? "";
        return message;
    },
};
function createBaseQueryClassFrozenResponse() {
    return { frozen: false };
}
export const QueryClassFrozenResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.frozen !== false) {
            writer.uint32(8).bool(message.frozen);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryClassFrozenResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.frozen = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            frozen: isSet(object.frozen) ? globalThis.Boolean(object.frozen) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.frozen !== false) {
            obj.frozen = message.frozen;
        }
        return obj;
    },
    create(base) {
        return QueryClassFrozenResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryClassFrozenResponse();
        message.frozen = object.frozen ?? false;
        return message;
    },
};
function createBaseQueryWhitelistedRequest() {
    return { id: "", classId: "", account: "" };
}
export const QueryWhitelistedRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.classId !== "") {
            writer.uint32(18).string(message.classId);
        }
        if (message.account !== "") {
            writer.uint32(26).string(message.account);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryWhitelistedRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
            account: isSet(object.account) ? globalThis.String(object.account) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        if (message.account !== "") {
            obj.account = message.account;
        }
        return obj;
    },
    create(base) {
        return QueryWhitelistedRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryWhitelistedRequest();
        message.id = object.id ?? "";
        message.classId = object.classId ?? "";
        message.account = object.account ?? "";
        return message;
    },
};
function createBaseQueryWhitelistedResponse() {
    return { whitelisted: false };
}
export const QueryWhitelistedResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.whitelisted !== false) {
            writer.uint32(8).bool(message.whitelisted);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryWhitelistedResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.whitelisted = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            whitelisted: isSet(object.whitelisted)
                ? globalThis.Boolean(object.whitelisted)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.whitelisted !== false) {
            obj.whitelisted = message.whitelisted;
        }
        return obj;
    },
    create(base) {
        return QueryWhitelistedResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryWhitelistedResponse();
        message.whitelisted = object.whitelisted ?? false;
        return message;
    },
};
function createBaseQueryWhitelistedAccountsForNFTRequest() {
    return { pagination: undefined, id: "", classId: "" };
}
export const QueryWhitelistedAccountsForNFTRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.pagination !== undefined) {
            PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        if (message.classId !== "") {
            writer.uint32(26).string(message.classId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryWhitelistedAccountsForNFTRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = PageRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination)
                ? PageRequest.fromJSON(object.pagination)
                : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = PageRequest.toJSON(message.pagination);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        return obj;
    },
    create(base) {
        return QueryWhitelistedAccountsForNFTRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryWhitelistedAccountsForNFTRequest();
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? PageRequest.fromPartial(object.pagination)
                : undefined;
        message.id = object.id ?? "";
        message.classId = object.classId ?? "";
        return message;
    },
};
function createBaseQueryWhitelistedAccountsForNFTResponse() {
    return { pagination: undefined, accounts: [] };
}
export const QueryWhitelistedAccountsForNFTResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.pagination !== undefined) {
            PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.accounts) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryWhitelistedAccountsForNFTResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = PageResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.accounts.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination)
                ? PageResponse.fromJSON(object.pagination)
                : undefined,
            accounts: globalThis.Array.isArray(object?.accounts)
                ? object.accounts.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = PageResponse.toJSON(message.pagination);
        }
        if (message.accounts?.length) {
            obj.accounts = message.accounts;
        }
        return obj;
    },
    create(base) {
        return QueryWhitelistedAccountsForNFTResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryWhitelistedAccountsForNFTResponse();
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? PageResponse.fromPartial(object.pagination)
                : undefined;
        message.accounts = object.accounts?.map((e) => e) || [];
        return message;
    },
};
function createBaseQueryClassWhitelistedAccountsRequest() {
    return { pagination: undefined, classId: "" };
}
export const QueryClassWhitelistedAccountsRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.pagination !== undefined) {
            PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        if (message.classId !== "") {
            writer.uint32(18).string(message.classId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryClassWhitelistedAccountsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = PageRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination)
                ? PageRequest.fromJSON(object.pagination)
                : undefined,
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = PageRequest.toJSON(message.pagination);
        }
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        return obj;
    },
    create(base) {
        return QueryClassWhitelistedAccountsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryClassWhitelistedAccountsRequest();
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? PageRequest.fromPartial(object.pagination)
                : undefined;
        message.classId = object.classId ?? "";
        return message;
    },
};
function createBaseQueryClassWhitelistedAccountsResponse() {
    return { pagination: undefined, accounts: [] };
}
export const QueryClassWhitelistedAccountsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.pagination !== undefined) {
            PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.accounts) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryClassWhitelistedAccountsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = PageResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.accounts.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination)
                ? PageResponse.fromJSON(object.pagination)
                : undefined,
            accounts: globalThis.Array.isArray(object?.accounts)
                ? object.accounts.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = PageResponse.toJSON(message.pagination);
        }
        if (message.accounts?.length) {
            obj.accounts = message.accounts;
        }
        return obj;
    },
    create(base) {
        return QueryClassWhitelistedAccountsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryClassWhitelistedAccountsResponse();
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? PageResponse.fromPartial(object.pagination)
                : undefined;
        message.accounts = object.accounts?.map((e) => e) || [];
        return message;
    },
};
function createBaseQueryClassFrozenAccountsRequest() {
    return { pagination: undefined, classId: "" };
}
export const QueryClassFrozenAccountsRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.pagination !== undefined) {
            PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        if (message.classId !== "") {
            writer.uint32(18).string(message.classId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryClassFrozenAccountsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = PageRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination)
                ? PageRequest.fromJSON(object.pagination)
                : undefined,
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = PageRequest.toJSON(message.pagination);
        }
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        return obj;
    },
    create(base) {
        return QueryClassFrozenAccountsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryClassFrozenAccountsRequest();
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? PageRequest.fromPartial(object.pagination)
                : undefined;
        message.classId = object.classId ?? "";
        return message;
    },
};
function createBaseQueryClassFrozenAccountsResponse() {
    return { pagination: undefined, accounts: [] };
}
export const QueryClassFrozenAccountsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.pagination !== undefined) {
            PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.accounts) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryClassFrozenAccountsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = PageResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.accounts.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination)
                ? PageResponse.fromJSON(object.pagination)
                : undefined,
            accounts: globalThis.Array.isArray(object?.accounts)
                ? object.accounts.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = PageResponse.toJSON(message.pagination);
        }
        if (message.accounts?.length) {
            obj.accounts = message.accounts;
        }
        return obj;
    },
    create(base) {
        return QueryClassFrozenAccountsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryClassFrozenAccountsResponse();
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? PageResponse.fromPartial(object.pagination)
                : undefined;
        message.accounts = object.accounts?.map((e) => e) || [];
        return message;
    },
};
function createBaseQueryBurntNFTRequest() {
    return { classId: "", nftId: "" };
}
export const QueryBurntNFTRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.classId !== "") {
            writer.uint32(10).string(message.classId);
        }
        if (message.nftId !== "") {
            writer.uint32(18).string(message.nftId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryBurntNFTRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.nftId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
            nftId: isSet(object.nftId) ? globalThis.String(object.nftId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        if (message.nftId !== "") {
            obj.nftId = message.nftId;
        }
        return obj;
    },
    create(base) {
        return QueryBurntNFTRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryBurntNFTRequest();
        message.classId = object.classId ?? "";
        message.nftId = object.nftId ?? "";
        return message;
    },
};
function createBaseQueryBurntNFTResponse() {
    return { burnt: false };
}
export const QueryBurntNFTResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.burnt !== false) {
            writer.uint32(8).bool(message.burnt);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryBurntNFTResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.burnt = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            burnt: isSet(object.burnt) ? globalThis.Boolean(object.burnt) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.burnt !== false) {
            obj.burnt = message.burnt;
        }
        return obj;
    },
    create(base) {
        return QueryBurntNFTResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryBurntNFTResponse();
        message.burnt = object.burnt ?? false;
        return message;
    },
};
function createBaseQueryBurntNFTsInClassRequest() {
    return { pagination: undefined, classId: "" };
}
export const QueryBurntNFTsInClassRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.pagination !== undefined) {
            PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        if (message.classId !== "") {
            writer.uint32(18).string(message.classId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryBurntNFTsInClassRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = PageRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination)
                ? PageRequest.fromJSON(object.pagination)
                : undefined,
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = PageRequest.toJSON(message.pagination);
        }
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        return obj;
    },
    create(base) {
        return QueryBurntNFTsInClassRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryBurntNFTsInClassRequest();
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? PageRequest.fromPartial(object.pagination)
                : undefined;
        message.classId = object.classId ?? "";
        return message;
    },
};
function createBaseQueryBurntNFTsInClassResponse() {
    return { pagination: undefined, nftIds: [] };
}
export const QueryBurntNFTsInClassResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.pagination !== undefined) {
            PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.nftIds) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryBurntNFTsInClassResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = PageResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.nftIds.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination)
                ? PageResponse.fromJSON(object.pagination)
                : undefined,
            nftIds: globalThis.Array.isArray(object?.nftIds)
                ? object.nftIds.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = PageResponse.toJSON(message.pagination);
        }
        if (message.nftIds?.length) {
            obj.nftIds = message.nftIds;
        }
        return obj;
    },
    create(base) {
        return QueryBurntNFTsInClassResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryBurntNFTsInClassResponse();
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? PageResponse.fromPartial(object.pagination)
                : undefined;
        message.nftIds = object.nftIds?.map((e) => e) || [];
        return message;
    },
};
export const QueryServiceName = "coreum.asset.nft.v1.Query";
export class QueryClientImpl {
    rpc;
    service;
    constructor(rpc, opts) {
        this.service = opts?.service || QueryServiceName;
        this.rpc = rpc;
        this.Params = this.Params.bind(this);
        this.Class = this.Class.bind(this);
        this.Classes = this.Classes.bind(this);
        this.Frozen = this.Frozen.bind(this);
        this.ClassFrozen = this.ClassFrozen.bind(this);
        this.ClassFrozenAccounts = this.ClassFrozenAccounts.bind(this);
        this.Whitelisted = this.Whitelisted.bind(this);
        this.WhitelistedAccountsForNFT = this.WhitelistedAccountsForNFT.bind(this);
        this.ClassWhitelistedAccounts = this.ClassWhitelistedAccounts.bind(this);
        this.BurntNFT = this.BurntNFT.bind(this);
        this.BurntNFTsInClass = this.BurntNFTsInClass.bind(this);
    }
    Params(request) {
        const data = QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Params", data);
        return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
    }
    Class(request) {
        const data = QueryClassRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Class", data);
        return promise.then((data) => QueryClassResponse.decode(new BinaryReader(data)));
    }
    Classes(request) {
        const data = QueryClassesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Classes", data);
        return promise.then((data) => QueryClassesResponse.decode(new BinaryReader(data)));
    }
    Frozen(request) {
        const data = QueryFrozenRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Frozen", data);
        return promise.then((data) => QueryFrozenResponse.decode(new BinaryReader(data)));
    }
    ClassFrozen(request) {
        const data = QueryClassFrozenRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ClassFrozen", data);
        return promise.then((data) => QueryClassFrozenResponse.decode(new BinaryReader(data)));
    }
    ClassFrozenAccounts(request) {
        const data = QueryClassFrozenAccountsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ClassFrozenAccounts", data);
        return promise.then((data) => QueryClassFrozenAccountsResponse.decode(new BinaryReader(data)));
    }
    Whitelisted(request) {
        const data = QueryWhitelistedRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Whitelisted", data);
        return promise.then((data) => QueryWhitelistedResponse.decode(new BinaryReader(data)));
    }
    WhitelistedAccountsForNFT(request) {
        const data = QueryWhitelistedAccountsForNFTRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "WhitelistedAccountsForNFT", data);
        return promise.then((data) => QueryWhitelistedAccountsForNFTResponse.decode(new BinaryReader(data)));
    }
    ClassWhitelistedAccounts(request) {
        const data = QueryClassWhitelistedAccountsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ClassWhitelistedAccounts", data);
        return promise.then((data) => QueryClassWhitelistedAccountsResponse.decode(new BinaryReader(data)));
    }
    BurntNFT(request) {
        const data = QueryBurntNFTRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "BurntNFT", data);
        return promise.then((data) => QueryBurntNFTResponse.decode(new BinaryReader(data)));
    }
    BurntNFTsInClass(request) {
        const data = QueryBurntNFTsInClassRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "BurntNFTsInClass", data);
        return promise.then((data) => QueryBurntNFTsInClassResponse.decode(new BinaryReader(data)));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
