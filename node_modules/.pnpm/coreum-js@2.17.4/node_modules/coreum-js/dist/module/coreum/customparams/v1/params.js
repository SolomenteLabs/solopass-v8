// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: coreum-protos/customparams/params.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "cosmjs-types/binary";
export const protobufPackage = "coreum.customparams.v1";
function createBaseStakingParams() {
    return { minSelfDelegation: "" };
}
export const StakingParams = {
    encode(message, writer = new BinaryWriter()) {
        if (message.minSelfDelegation !== "") {
            writer.uint32(10).string(message.minSelfDelegation);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStakingParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.minSelfDelegation = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            minSelfDelegation: isSet(object.minSelfDelegation)
                ? globalThis.String(object.minSelfDelegation)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.minSelfDelegation !== "") {
            obj.minSelfDelegation = message.minSelfDelegation;
        }
        return obj;
    },
    create(base) {
        return StakingParams.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseStakingParams();
        message.minSelfDelegation = object.minSelfDelegation ?? "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
