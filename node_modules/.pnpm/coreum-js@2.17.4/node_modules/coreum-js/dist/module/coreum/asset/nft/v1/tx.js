// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: coreum-protos/nft/tx.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "cosmjs-types/binary";
import { Any } from "cosmjs-types/google/protobuf/any";
import { classFeatureFromJSON, classFeatureToJSON } from "./nft";
import { Params } from "./params";
import { DataDynamicIndexedItem } from "./types";
export const protobufPackage = "coreum.asset.nft.v1";
function createBaseMsgIssueClass() {
    return {
        issuer: "",
        symbol: "",
        name: "",
        description: "",
        uri: "",
        uriHash: "",
        data: undefined,
        features: [],
        royaltyRate: "",
    };
}
export const MsgIssueClass = {
    encode(message, writer = new BinaryWriter()) {
        if (message.issuer !== "") {
            writer.uint32(10).string(message.issuer);
        }
        if (message.symbol !== "") {
            writer.uint32(18).string(message.symbol);
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(34).string(message.description);
        }
        if (message.uri !== "") {
            writer.uint32(42).string(message.uri);
        }
        if (message.uriHash !== "") {
            writer.uint32(50).string(message.uriHash);
        }
        if (message.data !== undefined) {
            Any.encode(message.data, writer.uint32(58).fork()).ldelim();
        }
        writer.uint32(66).fork();
        for (const v of message.features) {
            writer.int32(v);
        }
        writer.ldelim();
        if (message.royaltyRate !== "") {
            writer.uint32(74).string(message.royaltyRate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgIssueClass();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.symbol = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.uri = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.uriHash = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.data = Any.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag === 64) {
                        message.features.push(reader.int32());
                        continue;
                    }
                    if (tag === 66) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.features.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.royaltyRate = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
            symbol: isSet(object.symbol) ? globalThis.String(object.symbol) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            description: isSet(object.description)
                ? globalThis.String(object.description)
                : "",
            uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
            uriHash: isSet(object.uriHash) ? globalThis.String(object.uriHash) : "",
            data: isSet(object.data) ? Any.fromJSON(object.data) : undefined,
            features: globalThis.Array.isArray(object?.features)
                ? object.features.map((e) => classFeatureFromJSON(e))
                : [],
            royaltyRate: isSet(object.royaltyRate)
                ? globalThis.String(object.royaltyRate)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.issuer !== "") {
            obj.issuer = message.issuer;
        }
        if (message.symbol !== "") {
            obj.symbol = message.symbol;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.uri !== "") {
            obj.uri = message.uri;
        }
        if (message.uriHash !== "") {
            obj.uriHash = message.uriHash;
        }
        if (message.data !== undefined) {
            obj.data = Any.toJSON(message.data);
        }
        if (message.features?.length) {
            obj.features = message.features.map((e) => classFeatureToJSON(e));
        }
        if (message.royaltyRate !== "") {
            obj.royaltyRate = message.royaltyRate;
        }
        return obj;
    },
    create(base) {
        return MsgIssueClass.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgIssueClass();
        message.issuer = object.issuer ?? "";
        message.symbol = object.symbol ?? "";
        message.name = object.name ?? "";
        message.description = object.description ?? "";
        message.uri = object.uri ?? "";
        message.uriHash = object.uriHash ?? "";
        message.data =
            object.data !== undefined && object.data !== null
                ? Any.fromPartial(object.data)
                : undefined;
        message.features = object.features?.map((e) => e) || [];
        message.royaltyRate = object.royaltyRate ?? "";
        return message;
    },
};
function createBaseMsgMint() {
    return {
        sender: "",
        classId: "",
        id: "",
        uri: "",
        uriHash: "",
        data: undefined,
        recipient: "",
    };
}
export const MsgMint = {
    encode(message, writer = new BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.classId !== "") {
            writer.uint32(18).string(message.classId);
        }
        if (message.id !== "") {
            writer.uint32(26).string(message.id);
        }
        if (message.uri !== "") {
            writer.uint32(34).string(message.uri);
        }
        if (message.uriHash !== "") {
            writer.uint32(42).string(message.uriHash);
        }
        if (message.data !== undefined) {
            Any.encode(message.data, writer.uint32(50).fork()).ldelim();
        }
        if (message.recipient !== "") {
            writer.uint32(58).string(message.recipient);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgMint();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.uri = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.uriHash = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.data = Any.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.recipient = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
            uriHash: isSet(object.uriHash) ? globalThis.String(object.uriHash) : "",
            data: isSet(object.data) ? Any.fromJSON(object.data) : undefined,
            recipient: isSet(object.recipient)
                ? globalThis.String(object.recipient)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.uri !== "") {
            obj.uri = message.uri;
        }
        if (message.uriHash !== "") {
            obj.uriHash = message.uriHash;
        }
        if (message.data !== undefined) {
            obj.data = Any.toJSON(message.data);
        }
        if (message.recipient !== "") {
            obj.recipient = message.recipient;
        }
        return obj;
    },
    create(base) {
        return MsgMint.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgMint();
        message.sender = object.sender ?? "";
        message.classId = object.classId ?? "";
        message.id = object.id ?? "";
        message.uri = object.uri ?? "";
        message.uriHash = object.uriHash ?? "";
        message.data =
            object.data !== undefined && object.data !== null
                ? Any.fromPartial(object.data)
                : undefined;
        message.recipient = object.recipient ?? "";
        return message;
    },
};
function createBaseMsgUpdateData() {
    return { sender: "", classId: "", id: "", items: [] };
}
export const MsgUpdateData = {
    encode(message, writer = new BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.classId !== "") {
            writer.uint32(18).string(message.classId);
        }
        if (message.id !== "") {
            writer.uint32(26).string(message.id);
        }
        for (const v of message.items) {
            DataDynamicIndexedItem.encode(v, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.items.push(DataDynamicIndexedItem.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            items: globalThis.Array.isArray(object?.items)
                ? object.items.map((e) => DataDynamicIndexedItem.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.items?.length) {
            obj.items = message.items.map((e) => DataDynamicIndexedItem.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return MsgUpdateData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgUpdateData();
        message.sender = object.sender ?? "";
        message.classId = object.classId ?? "";
        message.id = object.id ?? "";
        message.items =
            object.items?.map((e) => DataDynamicIndexedItem.fromPartial(e)) || [];
        return message;
    },
};
function createBaseMsgBurn() {
    return { sender: "", classId: "", id: "" };
}
export const MsgBurn = {
    encode(message, writer = new BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.classId !== "") {
            writer.uint32(18).string(message.classId);
        }
        if (message.id !== "") {
            writer.uint32(26).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgBurn();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return MsgBurn.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgBurn();
        message.sender = object.sender ?? "";
        message.classId = object.classId ?? "";
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseMsgFreeze() {
    return { sender: "", classId: "", id: "" };
}
export const MsgFreeze = {
    encode(message, writer = new BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.classId !== "") {
            writer.uint32(18).string(message.classId);
        }
        if (message.id !== "") {
            writer.uint32(26).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgFreeze();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return MsgFreeze.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgFreeze();
        message.sender = object.sender ?? "";
        message.classId = object.classId ?? "";
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseMsgUnfreeze() {
    return { sender: "", classId: "", id: "" };
}
export const MsgUnfreeze = {
    encode(message, writer = new BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.classId !== "") {
            writer.uint32(18).string(message.classId);
        }
        if (message.id !== "") {
            writer.uint32(26).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUnfreeze();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return MsgUnfreeze.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgUnfreeze();
        message.sender = object.sender ?? "";
        message.classId = object.classId ?? "";
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseMsgClassFreeze() {
    return { sender: "", classId: "", account: "" };
}
export const MsgClassFreeze = {
    encode(message, writer = new BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.classId !== "") {
            writer.uint32(18).string(message.classId);
        }
        if (message.account !== "") {
            writer.uint32(26).string(message.account);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgClassFreeze();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
            account: isSet(object.account) ? globalThis.String(object.account) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        if (message.account !== "") {
            obj.account = message.account;
        }
        return obj;
    },
    create(base) {
        return MsgClassFreeze.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgClassFreeze();
        message.sender = object.sender ?? "";
        message.classId = object.classId ?? "";
        message.account = object.account ?? "";
        return message;
    },
};
function createBaseMsgClassUnfreeze() {
    return { sender: "", classId: "", account: "" };
}
export const MsgClassUnfreeze = {
    encode(message, writer = new BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.classId !== "") {
            writer.uint32(18).string(message.classId);
        }
        if (message.account !== "") {
            writer.uint32(26).string(message.account);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgClassUnfreeze();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
            account: isSet(object.account) ? globalThis.String(object.account) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        if (message.account !== "") {
            obj.account = message.account;
        }
        return obj;
    },
    create(base) {
        return MsgClassUnfreeze.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgClassUnfreeze();
        message.sender = object.sender ?? "";
        message.classId = object.classId ?? "";
        message.account = object.account ?? "";
        return message;
    },
};
function createBaseMsgAddToWhitelist() {
    return { sender: "", classId: "", id: "", account: "" };
}
export const MsgAddToWhitelist = {
    encode(message, writer = new BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.classId !== "") {
            writer.uint32(18).string(message.classId);
        }
        if (message.id !== "") {
            writer.uint32(26).string(message.id);
        }
        if (message.account !== "") {
            writer.uint32(34).string(message.account);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgAddToWhitelist();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            account: isSet(object.account) ? globalThis.String(object.account) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.account !== "") {
            obj.account = message.account;
        }
        return obj;
    },
    create(base) {
        return MsgAddToWhitelist.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgAddToWhitelist();
        message.sender = object.sender ?? "";
        message.classId = object.classId ?? "";
        message.id = object.id ?? "";
        message.account = object.account ?? "";
        return message;
    },
};
function createBaseMsgRemoveFromWhitelist() {
    return { sender: "", classId: "", id: "", account: "" };
}
export const MsgRemoveFromWhitelist = {
    encode(message, writer = new BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.classId !== "") {
            writer.uint32(18).string(message.classId);
        }
        if (message.id !== "") {
            writer.uint32(26).string(message.id);
        }
        if (message.account !== "") {
            writer.uint32(34).string(message.account);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgRemoveFromWhitelist();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            account: isSet(object.account) ? globalThis.String(object.account) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.account !== "") {
            obj.account = message.account;
        }
        return obj;
    },
    create(base) {
        return MsgRemoveFromWhitelist.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgRemoveFromWhitelist();
        message.sender = object.sender ?? "";
        message.classId = object.classId ?? "";
        message.id = object.id ?? "";
        message.account = object.account ?? "";
        return message;
    },
};
function createBaseMsgAddToClassWhitelist() {
    return { sender: "", classId: "", account: "" };
}
export const MsgAddToClassWhitelist = {
    encode(message, writer = new BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.classId !== "") {
            writer.uint32(18).string(message.classId);
        }
        if (message.account !== "") {
            writer.uint32(26).string(message.account);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgAddToClassWhitelist();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
            account: isSet(object.account) ? globalThis.String(object.account) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        if (message.account !== "") {
            obj.account = message.account;
        }
        return obj;
    },
    create(base) {
        return MsgAddToClassWhitelist.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgAddToClassWhitelist();
        message.sender = object.sender ?? "";
        message.classId = object.classId ?? "";
        message.account = object.account ?? "";
        return message;
    },
};
function createBaseMsgRemoveFromClassWhitelist() {
    return { sender: "", classId: "", account: "" };
}
export const MsgRemoveFromClassWhitelist = {
    encode(message, writer = new BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.classId !== "") {
            writer.uint32(18).string(message.classId);
        }
        if (message.account !== "") {
            writer.uint32(26).string(message.account);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgRemoveFromClassWhitelist();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
            account: isSet(object.account) ? globalThis.String(object.account) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        if (message.account !== "") {
            obj.account = message.account;
        }
        return obj;
    },
    create(base) {
        return MsgRemoveFromClassWhitelist.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgRemoveFromClassWhitelist();
        message.sender = object.sender ?? "";
        message.classId = object.classId ?? "";
        message.account = object.account ?? "";
        return message;
    },
};
function createBaseMsgUpdateParams() {
    return { authority: "", params: undefined };
}
export const MsgUpdateParams = {
    encode(message, writer = new BinaryWriter()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.params !== undefined) {
            Params.encode(message.params, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.params = Params.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority)
                ? globalThis.String(object.authority)
                : "",
            params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.params !== undefined) {
            obj.params = Params.toJSON(message.params);
        }
        return obj;
    },
    create(base) {
        return MsgUpdateParams.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgUpdateParams();
        message.authority = object.authority ?? "";
        message.params =
            object.params !== undefined && object.params !== null
                ? Params.fromPartial(object.params)
                : undefined;
        return message;
    },
};
function createBaseEmptyResponse() {
    return {};
}
export const EmptyResponse = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEmptyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return EmptyResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseEmptyResponse();
        return message;
    },
};
export const MsgServiceName = "coreum.asset.nft.v1.Msg";
export class MsgClientImpl {
    rpc;
    service;
    constructor(rpc, opts) {
        this.service = opts?.service || MsgServiceName;
        this.rpc = rpc;
        this.IssueClass = this.IssueClass.bind(this);
        this.Mint = this.Mint.bind(this);
        this.UpdateData = this.UpdateData.bind(this);
        this.Burn = this.Burn.bind(this);
        this.Freeze = this.Freeze.bind(this);
        this.Unfreeze = this.Unfreeze.bind(this);
        this.AddToWhitelist = this.AddToWhitelist.bind(this);
        this.RemoveFromWhitelist = this.RemoveFromWhitelist.bind(this);
        this.AddToClassWhitelist = this.AddToClassWhitelist.bind(this);
        this.RemoveFromClassWhitelist = this.RemoveFromClassWhitelist.bind(this);
        this.ClassFreeze = this.ClassFreeze.bind(this);
        this.ClassUnfreeze = this.ClassUnfreeze.bind(this);
        this.UpdateParams = this.UpdateParams.bind(this);
    }
    IssueClass(request) {
        const data = MsgIssueClass.encode(request).finish();
        const promise = this.rpc.request(this.service, "IssueClass", data);
        return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
    }
    Mint(request) {
        const data = MsgMint.encode(request).finish();
        const promise = this.rpc.request(this.service, "Mint", data);
        return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
    }
    UpdateData(request) {
        const data = MsgUpdateData.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateData", data);
        return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
    }
    Burn(request) {
        const data = MsgBurn.encode(request).finish();
        const promise = this.rpc.request(this.service, "Burn", data);
        return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
    }
    Freeze(request) {
        const data = MsgFreeze.encode(request).finish();
        const promise = this.rpc.request(this.service, "Freeze", data);
        return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
    }
    Unfreeze(request) {
        const data = MsgUnfreeze.encode(request).finish();
        const promise = this.rpc.request(this.service, "Unfreeze", data);
        return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
    }
    AddToWhitelist(request) {
        const data = MsgAddToWhitelist.encode(request).finish();
        const promise = this.rpc.request(this.service, "AddToWhitelist", data);
        return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
    }
    RemoveFromWhitelist(request) {
        const data = MsgRemoveFromWhitelist.encode(request).finish();
        const promise = this.rpc.request(this.service, "RemoveFromWhitelist", data);
        return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
    }
    AddToClassWhitelist(request) {
        const data = MsgAddToClassWhitelist.encode(request).finish();
        const promise = this.rpc.request(this.service, "AddToClassWhitelist", data);
        return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
    }
    RemoveFromClassWhitelist(request) {
        const data = MsgRemoveFromClassWhitelist.encode(request).finish();
        const promise = this.rpc.request(this.service, "RemoveFromClassWhitelist", data);
        return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
    }
    ClassFreeze(request) {
        const data = MsgClassFreeze.encode(request).finish();
        const promise = this.rpc.request(this.service, "ClassFreeze", data);
        return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
    }
    ClassUnfreeze(request) {
        const data = MsgClassUnfreeze.encode(request).finish();
        const promise = this.rpc.request(this.service, "ClassUnfreeze", data);
        return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
    }
    UpdateParams(request) {
        const data = MsgUpdateParams.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateParams", data);
        return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
