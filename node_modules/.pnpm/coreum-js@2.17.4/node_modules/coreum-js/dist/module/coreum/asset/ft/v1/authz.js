// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: coreum-protos/ft/authz.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "cosmjs-types/binary";
import { Coin } from "cosmjs-types/cosmos/base/v1beta1/coin";
export const protobufPackage = "coreum.asset.ft.v1";
function createBaseMintAuthorization() {
    return { mintLimit: [] };
}
export const MintAuthorization = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.mintLimit) {
            Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMintAuthorization();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.mintLimit.push(Coin.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            mintLimit: globalThis.Array.isArray(object?.mintLimit)
                ? object.mintLimit.map((e) => Coin.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.mintLimit?.length) {
            obj.mintLimit = message.mintLimit.map((e) => Coin.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return MintAuthorization.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMintAuthorization();
        message.mintLimit = object.mintLimit?.map((e) => Coin.fromPartial(e)) || [];
        return message;
    },
};
function createBaseBurnAuthorization() {
    return { burnLimit: [] };
}
export const BurnAuthorization = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.burnLimit) {
            Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBurnAuthorization();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.burnLimit.push(Coin.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            burnLimit: globalThis.Array.isArray(object?.burnLimit)
                ? object.burnLimit.map((e) => Coin.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.burnLimit?.length) {
            obj.burnLimit = message.burnLimit.map((e) => Coin.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return BurnAuthorization.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBurnAuthorization();
        message.burnLimit = object.burnLimit?.map((e) => Coin.fromPartial(e)) || [];
        return message;
    },
};
