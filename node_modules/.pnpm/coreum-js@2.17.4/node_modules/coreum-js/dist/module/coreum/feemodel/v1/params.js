// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: coreum-protos/feemodel/params.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "cosmjs-types/binary";
export const protobufPackage = "coreum.feemodel.v1";
function createBaseModelParams() {
    return {
        initialGasPrice: "",
        maxGasPriceMultiplier: "",
        maxDiscount: "",
        escalationStartFraction: "",
        maxBlockGas: 0,
        shortEmaBlockLength: 0,
        longEmaBlockLength: 0,
    };
}
export const ModelParams = {
    encode(message, writer = new BinaryWriter()) {
        if (message.initialGasPrice !== "") {
            writer.uint32(10).string(message.initialGasPrice);
        }
        if (message.maxGasPriceMultiplier !== "") {
            writer.uint32(18).string(message.maxGasPriceMultiplier);
        }
        if (message.maxDiscount !== "") {
            writer.uint32(26).string(message.maxDiscount);
        }
        if (message.escalationStartFraction !== "") {
            writer.uint32(34).string(message.escalationStartFraction);
        }
        if (message.maxBlockGas !== 0) {
            writer.uint32(40).int64(message.maxBlockGas);
        }
        if (message.shortEmaBlockLength !== 0) {
            writer.uint32(48).uint32(message.shortEmaBlockLength);
        }
        if (message.longEmaBlockLength !== 0) {
            writer.uint32(56).uint32(message.longEmaBlockLength);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseModelParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.initialGasPrice = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.maxGasPriceMultiplier = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.maxDiscount = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.escalationStartFraction = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.maxBlockGas = longToNumber(reader.int64());
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.shortEmaBlockLength = reader.uint32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.longEmaBlockLength = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            initialGasPrice: isSet(object.initialGasPrice)
                ? globalThis.String(object.initialGasPrice)
                : "",
            maxGasPriceMultiplier: isSet(object.maxGasPriceMultiplier)
                ? globalThis.String(object.maxGasPriceMultiplier)
                : "",
            maxDiscount: isSet(object.maxDiscount)
                ? globalThis.String(object.maxDiscount)
                : "",
            escalationStartFraction: isSet(object.escalationStartFraction)
                ? globalThis.String(object.escalationStartFraction)
                : "",
            maxBlockGas: isSet(object.maxBlockGas)
                ? globalThis.Number(object.maxBlockGas)
                : 0,
            shortEmaBlockLength: isSet(object.shortEmaBlockLength)
                ? globalThis.Number(object.shortEmaBlockLength)
                : 0,
            longEmaBlockLength: isSet(object.longEmaBlockLength)
                ? globalThis.Number(object.longEmaBlockLength)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.initialGasPrice !== "") {
            obj.initialGasPrice = message.initialGasPrice;
        }
        if (message.maxGasPriceMultiplier !== "") {
            obj.maxGasPriceMultiplier = message.maxGasPriceMultiplier;
        }
        if (message.maxDiscount !== "") {
            obj.maxDiscount = message.maxDiscount;
        }
        if (message.escalationStartFraction !== "") {
            obj.escalationStartFraction = message.escalationStartFraction;
        }
        if (message.maxBlockGas !== 0) {
            obj.maxBlockGas = Math.round(message.maxBlockGas);
        }
        if (message.shortEmaBlockLength !== 0) {
            obj.shortEmaBlockLength = Math.round(message.shortEmaBlockLength);
        }
        if (message.longEmaBlockLength !== 0) {
            obj.longEmaBlockLength = Math.round(message.longEmaBlockLength);
        }
        return obj;
    },
    create(base) {
        return ModelParams.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseModelParams();
        message.initialGasPrice = object.initialGasPrice ?? "";
        message.maxGasPriceMultiplier = object.maxGasPriceMultiplier ?? "";
        message.maxDiscount = object.maxDiscount ?? "";
        message.escalationStartFraction = object.escalationStartFraction ?? "";
        message.maxBlockGas = object.maxBlockGas ?? 0;
        message.shortEmaBlockLength = object.shortEmaBlockLength ?? 0;
        message.longEmaBlockLength = object.longEmaBlockLength ?? 0;
        return message;
    },
};
function createBaseParams() {
    return { model: undefined };
}
export const Params = {
    encode(message, writer = new BinaryWriter()) {
        if (message.model !== undefined) {
            ModelParams.encode(message.model, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.model = ModelParams.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            model: isSet(object.model)
                ? ModelParams.fromJSON(object.model)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.model !== undefined) {
            obj.model = ModelParams.toJSON(message.model);
        }
        return obj;
    },
    create(base) {
        return Params.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseParams();
        message.model =
            object.model !== undefined && object.model !== null
                ? ModelParams.fromPartial(object.model)
                : undefined;
        return message;
    },
};
function longToNumber(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
