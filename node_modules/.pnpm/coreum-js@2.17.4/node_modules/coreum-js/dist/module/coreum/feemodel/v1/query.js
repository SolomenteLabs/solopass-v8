// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: coreum-protos/feemodel/query.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "cosmjs-types/binary";
import { DecCoin } from "cosmjs-types/cosmos/base/v1beta1/coin";
import { Params } from "./params";
export const protobufPackage = "coreum.feemodel.v1";
function createBaseQueryMinGasPriceRequest() {
    return {};
}
export const QueryMinGasPriceRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryMinGasPriceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return QueryMinGasPriceRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseQueryMinGasPriceRequest();
        return message;
    },
};
function createBaseQueryMinGasPriceResponse() {
    return { minGasPrice: undefined };
}
export const QueryMinGasPriceResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.minGasPrice !== undefined) {
            DecCoin.encode(message.minGasPrice, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryMinGasPriceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.minGasPrice = DecCoin.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            minGasPrice: isSet(object.minGasPrice)
                ? DecCoin.fromJSON(object.minGasPrice)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.minGasPrice !== undefined) {
            obj.minGasPrice = DecCoin.toJSON(message.minGasPrice);
        }
        return obj;
    },
    create(base) {
        return QueryMinGasPriceResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryMinGasPriceResponse();
        message.minGasPrice =
            object.minGasPrice !== undefined && object.minGasPrice !== null
                ? DecCoin.fromPartial(object.minGasPrice)
                : undefined;
        return message;
    },
};
function createBaseQueryRecommendedGasPriceRequest() {
    return { afterBlocks: 0 };
}
export const QueryRecommendedGasPriceRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.afterBlocks !== 0) {
            writer.uint32(8).uint32(message.afterBlocks);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryRecommendedGasPriceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.afterBlocks = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            afterBlocks: isSet(object.afterBlocks)
                ? globalThis.Number(object.afterBlocks)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.afterBlocks !== 0) {
            obj.afterBlocks = Math.round(message.afterBlocks);
        }
        return obj;
    },
    create(base) {
        return QueryRecommendedGasPriceRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryRecommendedGasPriceRequest();
        message.afterBlocks = object.afterBlocks ?? 0;
        return message;
    },
};
function createBaseQueryRecommendedGasPriceResponse() {
    return { low: undefined, med: undefined, high: undefined };
}
export const QueryRecommendedGasPriceResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.low !== undefined) {
            DecCoin.encode(message.low, writer.uint32(10).fork()).ldelim();
        }
        if (message.med !== undefined) {
            DecCoin.encode(message.med, writer.uint32(18).fork()).ldelim();
        }
        if (message.high !== undefined) {
            DecCoin.encode(message.high, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryRecommendedGasPriceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.low = DecCoin.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.med = DecCoin.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.high = DecCoin.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            low: isSet(object.low) ? DecCoin.fromJSON(object.low) : undefined,
            med: isSet(object.med) ? DecCoin.fromJSON(object.med) : undefined,
            high: isSet(object.high) ? DecCoin.fromJSON(object.high) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.low !== undefined) {
            obj.low = DecCoin.toJSON(message.low);
        }
        if (message.med !== undefined) {
            obj.med = DecCoin.toJSON(message.med);
        }
        if (message.high !== undefined) {
            obj.high = DecCoin.toJSON(message.high);
        }
        return obj;
    },
    create(base) {
        return QueryRecommendedGasPriceResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryRecommendedGasPriceResponse();
        message.low =
            object.low !== undefined && object.low !== null
                ? DecCoin.fromPartial(object.low)
                : undefined;
        message.med =
            object.med !== undefined && object.med !== null
                ? DecCoin.fromPartial(object.med)
                : undefined;
        message.high =
            object.high !== undefined && object.high !== null
                ? DecCoin.fromPartial(object.high)
                : undefined;
        return message;
    },
};
function createBaseQueryParamsRequest() {
    return {};
}
export const QueryParamsRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return QueryParamsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
};
function createBaseQueryParamsResponse() {
    return { params: undefined };
}
export const QueryParamsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.params !== undefined) {
            Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.params = Params.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.params !== undefined) {
            obj.params = Params.toJSON(message.params);
        }
        return obj;
    },
    create(base) {
        return QueryParamsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params =
            object.params !== undefined && object.params !== null
                ? Params.fromPartial(object.params)
                : undefined;
        return message;
    },
};
export const QueryServiceName = "coreum.feemodel.v1.Query";
export class QueryClientImpl {
    rpc;
    service;
    constructor(rpc, opts) {
        this.service = opts?.service || QueryServiceName;
        this.rpc = rpc;
        this.MinGasPrice = this.MinGasPrice.bind(this);
        this.RecommendedGasPrice = this.RecommendedGasPrice.bind(this);
        this.Params = this.Params.bind(this);
    }
    MinGasPrice(request) {
        const data = QueryMinGasPriceRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "MinGasPrice", data);
        return promise.then((data) => QueryMinGasPriceResponse.decode(new BinaryReader(data)));
    }
    RecommendedGasPrice(request) {
        const data = QueryRecommendedGasPriceRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RecommendedGasPrice", data);
        return promise.then((data) => QueryRecommendedGasPriceResponse.decode(new BinaryReader(data)));
    }
    Params(request) {
        const data = QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Params", data);
        return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
